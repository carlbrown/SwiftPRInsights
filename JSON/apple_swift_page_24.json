{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10428",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10428/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10428/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10428/events",
      "html_url": "https://github.com/apple/swift/pull/10428",
      "id": 237376544,
      "number": 10428,
      "title": "[4.0] Sema: Ensure the array type for variadic tuple shuffles is always set.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-20T23:48:30Z",
      "updated_at": "2017-06-21T22:22:30Z",
      "closed_at": "2017-06-21T22:22:30Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10428",
        "html_url": "https://github.com/apple/swift/pull/10428",
        "diff_url": "https://github.com/apple/swift/pull/10428.diff",
        "patch_url": "https://github.com/apple/swift/pull/10428.patch"
      },
      "body": "Explanation: We neglected to set up the type of the variadic argument array when invoking a variadic subscript with a single argument.\r\n\r\nScope: Source compatibility regression affecting vapor\r\n\r\nIssue: SR-5264 | rdar://problem/32860988\r\n\r\nRisk: Low, small bug fix.\r\n\r\nTesting: Swift CI, compatibility test suite",
      "score": 1.2121907
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10431",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10431/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10431/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10431/events",
      "html_url": "https://github.com/apple/swift/pull/10431",
      "id": 237383001,
      "number": 10431,
      "title": "Runtime hook for logging on the use of unstable runtime names with NSCoding",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 18,
      "created_at": "2017-06-21T00:33:51Z",
      "updated_at": "2017-06-21T20:13:47Z",
      "closed_at": "2017-06-21T17:49:42Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10431",
        "html_url": "https://github.com/apple/swift/pull/10431",
        "diff_url": "https://github.com/apple/swift/pull/10431.diff",
        "patch_url": "https://github.com/apple/swift/pull/10431.patch"
      },
      "body": "- **Explanation**: Foundation's standard serialization mechanism, NSKeyedArchiver, can end up storing mangled names into persistent archives, which isn't really a good idea. This provides a run-time hook that Foundation can call (on a new enough OS) to validate that we're not doing such a thing. (Consider it the run-time half of #10155.)\r\n- **Scope**: Affects classes that conform to NSCoding that do not have \"simple\" mangled names, if they are actually archived or unarchived.\r\n- **Radar**: rdar://problem/32414508\r\n- **Reviewed by**: me (@eeckstein's parts), @itaiferber (my parts)\r\n- **Risk**: Low. This adds a new entry point via the Foundation overlay; nothing uses it yet. The only change to existing classes is the new metadata flag, which nothing else is reading.\r\n- **Testing**: Added compiler regression tests.",
      "score": 1.2119253
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10432",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10432/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10432/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10432/events",
      "html_url": "https://github.com/apple/swift/pull/10432",
      "id": 237386741,
      "number": 10432,
      "title": "[Migrator] Remove some now unnecessary tuple destructuring",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T01:00:22Z",
      "updated_at": "2017-06-21T01:19:40Z",
      "closed_at": "2017-06-21T01:19:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10432",
        "html_url": "https://github.com/apple/swift/pull/10432",
        "diff_url": "https://github.com/apple/swift/pull/10432.diff",
        "patch_url": "https://github.com/apple/swift/pull/10432.patch"
      },
      "body": "Some changes for SE-0110 were backed out in\r\nhttps://github.com/apple/swift/pull/10414, so the migrator no longer\r\nneeds to add its own tuple destructuring.\r\n\r\nrdar://problem/32513074",
      "score": 1.2074655
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10433",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10433/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10433/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10433/events",
      "html_url": "https://github.com/apple/swift/pull/10433",
      "id": 237388503,
      "number": 10433,
      "title": "Fix up #10418 for 32-bit platforms.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-21T01:14:40Z",
      "updated_at": "2017-06-21T02:24:39Z",
      "closed_at": "2017-06-21T02:24:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10433",
        "html_url": "https://github.com/apple/swift/pull/10433",
        "diff_url": "https://github.com/apple/swift/pull/10433.diff",
        "patch_url": "https://github.com/apple/swift/pull/10433.patch"
      },
      "body": "...where swift::TwoWordPair is defined a little less freely. I was a little too clever here!",
      "score": 1.2078109
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10434",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10434/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10434/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10434/events",
      "html_url": "https://github.com/apple/swift/pull/10434",
      "id": 237389313,
      "number": 10434,
      "title": "[Migrator] Remove some now unnecessary tuple destructuring",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-06-21T01:21:55Z",
      "updated_at": "2017-06-21T18:32:17Z",
      "closed_at": "2017-06-21T18:31:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10434",
        "html_url": "https://github.com/apple/swift/pull/10434",
        "diff_url": "https://github.com/apple/swift/pull/10434.diff",
        "patch_url": "https://github.com/apple/swift/pull/10434.patch"
      },
      "body": "Some changes for SE-0110 were backed out in\r\nhttps://github.com/apple/swift/pull/10414, so the migrator no longer\r\nneeds to add its own tuple destructuring.\r\n\r\nrdar://problem/32513074",
      "score": 1.2117841
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10436",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10436/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10436/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10436/events",
      "html_url": "https://github.com/apple/swift/pull/10436",
      "id": 237399661,
      "number": 10436,
      "title": "Remove DeclContext walk from resolveTypeInContext()",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-21T02:44:46Z",
      "updated_at": "2017-07-19T08:10:56Z",
      "closed_at": "2017-07-19T08:10:55Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10436",
        "html_url": "https://github.com/apple/swift/pull/10436",
        "diff_url": "https://github.com/apple/swift/pull/10436.diff",
        "patch_url": "https://github.com/apple/swift/pull/10436.patch"
      },
      "body": "Unqualified name lookup starts from an innermost context and walks up through parent contexts until it finds a declaration with the given name. For example, consider something like this:\r\n\r\n```\r\nclass Base<T> {\r\n  typealias A = [T]\r\n}\r\n\r\nclass Derived : Base<Int> {\r\n  class Nested {\r\n    func foo() -> A { ... }\r\n  }\r\n}\r\n```\r\n\r\nThe lookup of 'A' inside 'Nested' finds the typealias 'A' inside 'Base<T>'. Since the lookup is done from a nested type of 'Derived', we have to use 'Base<Int>' as the base type to get the substitution `T := Int`.\r\n\r\nPreviously, we would find the base type by performing a walk over all parent contexts, checking their superclasses and adopted protocols until we found the nested type in question. This duplicates work already done by name lookup, and has the potential to go out of sync with the name lookup implementation.\r\n\r\nThe new implementation instead saves the DeclContext resulting from the name lookup, avoiding the walk altogether.",
      "score": 1.3940095
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10437",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10437/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10437/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10437/events",
      "html_url": "https://github.com/apple/swift/pull/10437",
      "id": 237400673,
      "number": 10437,
      "title": "[Foundation] Make CocoaError.Code and URLError.Code Hashable.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T02:52:59Z",
      "updated_at": "2017-06-21T03:15:50Z",
      "closed_at": "2017-06-21T03:15:48Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10437",
        "html_url": "https://github.com/apple/swift/pull/10437",
        "diff_url": "https://github.com/apple/swift/pull/10437.diff",
        "patch_url": "https://github.com/apple/swift/pull/10437.patch"
      },
      "body": "This is consistent with imported error codes, which are always Hashable. URLError.Code was also Hashable in Swift 3.1 by virtue of being defined as an enum; the change to a struct broke that.\r\n\r\nrdar://problem/32066434",
      "score": 1.2085825
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10438",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10438/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10438/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10438/events",
      "html_url": "https://github.com/apple/swift/pull/10438",
      "id": 237404040,
      "number": 10438,
      "title": "[Foundation] Make CocoaError.Code and URLError.Code Hashable.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T03:21:04Z",
      "updated_at": "2017-06-21T16:55:39Z",
      "closed_at": "2017-06-21T16:55:29Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10438",
        "html_url": "https://github.com/apple/swift/pull/10438",
        "diff_url": "https://github.com/apple/swift/pull/10438.diff",
        "patch_url": "https://github.com/apple/swift/pull/10438.patch"
      },
      "body": "- **Explanation**: Imported error codes are Hashable, but we define CocoaError and URLError in Swift for implementation detail reasons. Make them Hashable too. (URLError.Code was also Hashable in Swift 3.1 by virtue of being defined as an enum; the change to a struct broke that.)\r\n- **Radar**: rdar://problem/32066434\r\n- **Reviewed by**: @parkera \r\n- **Risk**: Very low. The implementations are tiny.\r\n- **Testing**: Added compiler regression test.",
      "score": 1.212076
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10439",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10439/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10439/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10439/events",
      "html_url": "https://github.com/apple/swift/pull/10439",
      "id": 237418044,
      "number": 10439,
      "title": "AST: Tweak a concrete-nested-type-of-archetype hack slightly",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T05:23:30Z",
      "updated_at": "2017-06-21T05:45:10Z",
      "closed_at": "2017-06-21T05:45:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10439",
        "html_url": "https://github.com/apple/swift/pull/10439",
        "diff_url": "https://github.com/apple/swift/pull/10439.diff",
        "patch_url": "https://github.com/apple/swift/pull/10439.patch"
      },
      "body": "When an archetype conforms to a protocol abstractly (ie, it is\r\nnot class-constrained and we don't have any further information\r\nother than that it conforms), we can recover nested types,\r\nbut we cannot recover the conformance of those nested types\r\nto protocols if those conformances are concrete (the nested\r\ntype might be concrete, or it might be a class-constrained\r\narchetype).\r\n\r\nTo work around this, we added a hack where if the conformance\r\nlookup in the SubstitutionMap fails, we fall back to the module.\r\n\r\nThis is horrible and unprincipled, but has to remain in place\r\nuntil more infrastructure is plumbed through.\r\n\r\nCommit 620db5f74c1ec57d832814ebf3811ca1bb4262ce made this\r\nworkaround apply in fewer cases, so that we could still catch\r\ncases where the SubstitutionMap was constructed with missing\r\nconformances.\r\n\r\nUnfortunately this workaround didn't handle the case where the\r\nnested type was an archetype with a superclass constraint.\r\n\r\nThis will all go away soon, but for now tweak the logic a bit,\r\nsince I really want to keep the \"narrow\" workaround in place\r\nand not the general fallback, otherwise we run the risk of\r\nSubstitutionMap conformance lookup bitrotting completely.\r\n\r\nFixes <https://bugs.swift.org/browse/SR-4088> and\r\n<rdar://problem/32773028>.",
      "score": 1.2100531
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10440",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10440/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10440/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10440/events",
      "html_url": "https://github.com/apple/swift/pull/10440",
      "id": 237418914,
      "number": 10440,
      "title": "AST: Tweak a concrete-nested-type-of-archetype hack slightly [4.0]",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-21T05:29:53Z",
      "updated_at": "2017-06-22T18:29:47Z",
      "closed_at": "2017-06-21T06:40:50Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10440",
        "html_url": "https://github.com/apple/swift/pull/10440",
        "diff_url": "https://github.com/apple/swift/pull/10440.diff",
        "patch_url": "https://github.com/apple/swift/pull/10440.patch"
      },
      "body": "* Description: There is a long-standing representational issue where SubstitutionMaps have a hard time dealing with associated types that are constrained to concrete types, but themselves have nested associated types. We put in a workaround in 3.1. In 4.0, I made the workaround slightly narrower so that we can test the conformance lookup logic better. Unfortunately I missed a case in 4.0 where we should have applied the workaround but didn't. This patch brings back the workaround in that specific case.\r\n\r\n* Scope of the issue: Affects an open source project in the source compatibility test suite (JSQDataSourcesKit).\r\n\r\n* Origination: Regression in 4.0.\r\n\r\n* Risk: Very low, this just performs a module-based lookup in one more case that wasn't being done before, and this should always work.\r\n\r\n* Tested: Reduced test case added.\r\n\r\n* Reviewed by: @DougGregor \r\n\r\n* Radar: rdar://problem/32773028",
      "score": 1.2190957
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10441",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10441/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10441/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10441/events",
      "html_url": "https://github.com/apple/swift/pull/10441",
      "id": 237431459,
      "number": 10441,
      "title": "[Type checker] Check type equality even for argument tuples in Swift 4.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T06:50:09Z",
      "updated_at": "2017-06-21T13:09:51Z",
      "closed_at": "2017-06-21T13:09:48Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10441",
        "html_url": "https://github.com/apple/swift/pull/10441",
        "diff_url": "https://github.com/apple/swift/pull/10441.diff",
        "patch_url": "https://github.com/apple/swift/pull/10441.patch"
      },
      "body": "Replace a where Type-pointer-equality check with what it intended,\r\ni.e., match up ParenTypes at the top level and perform a deeper\r\nequality comparison of the underlying types.\r\n\r\nFixes SR-5166 / rdar://problem/32666189.\r\n",
      "score": 1.212359
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10442",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10442/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10442/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10442/events",
      "html_url": "https://github.com/apple/swift/pull/10442",
      "id": 237438984,
      "number": 10442,
      "title": "Fix a couple of silly problems with extensions",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T07:26:50Z",
      "updated_at": "2017-06-21T09:18:20Z",
      "closed_at": "2017-06-21T09:18:20Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10442",
        "html_url": "https://github.com/apple/swift/pull/10442",
        "diff_url": "https://github.com/apple/swift/pull/10442.diff",
        "patch_url": "https://github.com/apple/swift/pull/10442.patch"
      },
      "body": "",
      "score": 1.2116286
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10443",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10443/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10443/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10443/events",
      "html_url": "https://github.com/apple/swift/pull/10443",
      "id": 237440587,
      "number": 10443,
      "title": "Fix a couple of silly problems with extensions [4.0]",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T07:34:27Z",
      "updated_at": "2017-06-21T22:11:12Z",
      "closed_at": "2017-06-21T22:11:12Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10443",
        "html_url": "https://github.com/apple/swift/pull/10443",
        "diff_url": "https://github.com/apple/swift/pull/10443.diff",
        "patch_url": "https://github.com/apple/swift/pull/10443.patch"
      },
      "body": "* Description: A **constrained** extension of a typealias would result in a crash. Also, there was an old limitation that prevented us from being able to define a **protocol** extension with a typealias *in the same module*, probably as a workaround for some related problem, but it doesn't seem like this restriction is necessary anymore. Note that the crash I fixed occurs regardless of the module that the type is defined in, so maybe the restriction was bogus to begin with.\r\n\r\n* Origination: The crash was first reported against Swift 2 so this is an old problem. The related restriction has been there even longer.\r\n\r\n* Scope of the issue: Probably extensions of typealiases is not something people do intentionally very often, but happens when we rename a type and add a typealias for the old name.\r\n\r\n* Risk: Very low, we already desugar the type on this code path so we know this succeeds. Lifting the restriction might make some code that used to diagnose crash, but from my understanding of how extensions and name lookup works in today's Swift this doesn't seem likely. I strongly suspect it is vestigial, but @DougGregor can confirm.\r\n\r\n* Tested: New test case added, existing test for extension of protocol via typealias updated to reflect that it no longer produces a diagnostic.\r\n\r\n* Reviewed by: @DougGregor \r\n\r\n* Radar: rdar://problem/21607421",
      "score": 1.2148205
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10444",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10444/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10444/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10444/events",
      "html_url": "https://github.com/apple/swift/pull/10444",
      "id": 237448954,
      "number": 10444,
      "title": "[Parse] Fix #sourceLocation parsing in Decl position",
      "user": {
        "login": "rintaro",
        "id": 142081,
        "avatar_url": "https://avatars1.githubusercontent.com/u/142081?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rintaro",
        "html_url": "https://github.com/rintaro",
        "followers_url": "https://api.github.com/users/rintaro/followers",
        "following_url": "https://api.github.com/users/rintaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/rintaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rintaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rintaro/subscriptions",
        "organizations_url": "https://api.github.com/users/rintaro/orgs",
        "repos_url": "https://api.github.com/users/rintaro/repos",
        "events_url": "https://api.github.com/users/rintaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rintaro/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2017-06-21T08:10:52Z",
      "updated_at": "2017-06-22T03:35:44Z",
      "closed_at": "2017-06-22T03:35:44Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10444",
        "html_url": "https://github.com/apple/swift/pull/10444",
        "diff_url": "https://github.com/apple/swift/pull/10444.diff",
        "patch_url": "https://github.com/apple/swift/pull/10444.patch"
      },
      "body": "Fixes: https://bugs.swift.org/browse/SR-5242\r\n`#sourceLocation` directive at end of declaration list position was rejected.\r\n\r\nThis is 4.0 regression introduced in #6979",
      "score": 1.2163563
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10445",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10445/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10445/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10445/events",
      "html_url": "https://github.com/apple/swift/pull/10445",
      "id": 237459636,
      "number": 10445,
      "title": "[swiftc (32 vs. 5563)] Add crasher in swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T08:50:18Z",
      "updated_at": "2017-06-21T09:58:47Z",
      "closed_at": "2017-06-21T09:58:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10445",
        "html_url": "https://github.com/apple/swift/pull/10445",
        "diff_url": "https://github.com/apple/swift/pull/10445.diff",
        "patch_url": "https://github.com/apple/swift/pull/10445.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete`.\n\nCurrent number of unresolved compiler crashers: 32 (5563 resolved)\n\n/cc @DougGregor - just wanted to let you know that this crasher caused an assertion failure for the assertion `conformance->isConcrete() || Concrete->isExistentialType()` added on 2017-02-23 by you in commit cbbf4154 :-)\n\nAssertion failure in [`lib/AST/GenericSignatureBuilder.cpp (line 3371)`](https://github.com/apple/swift/blob/c21699b4e5715a24c754becbc89e784210d7220d/lib/AST/GenericSignatureBuilder.cpp#L3371):\n\n```\nAssertion `conformance->isConcrete() || Concrete->isExistentialType()' failed.\n\nWhen executing: ConstraintResult swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype *, swift::Type, const swift::GenericSignatureBuilder::RequirementSource *)\n```\n\nAssertion context:\n\n```c++\n    }\n\n    conformances.insert({protocol, *conformance});\n\n    // Abstract conformances are acceptable for existential types.\n    assert(conformance->isConcrete() || Concrete->isExistentialType());\n\n    // Update the requirement source now that we know it's concrete.\n    // FIXME: Bad concrete source info.\n    auto concreteSource = Source->viaConcrete(*this,\n                                              conformance->isConcrete()\n```\nStack trace:\n\n```\n0 0x0000000003a7b018 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a7b018)\n1 0x0000000003a7b756 SignalHandler(int) (/path/to/swift/bin/swift+0x3a7b756)\n2 0x00007f5d03513390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f5d01a38428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f5d01a3a02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f5d01a30bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f5d01a30c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x0000000001581a04 swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x1581a04)\n8 0x0000000001580f6c swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x1580f6c)\n9 0x000000000157895b concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::RequirementSource const*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&, llvm::function_ref<swift::ProtocolConformanceRef (swift::ProtocolDecl*)>) (/path/to/swift/bin/swift+0x157895b)\n10 0x0000000001577ce3 swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance(llvm::PointerUnion<swift::AssociatedTypeDecl*, swift::TypeDecl*>, swift::GenericSignatureBuilder::PotentialArchetype::NestedTypeUpdate) (/path/to/swift/bin/swift+0x1577ce3)\n11 0x00000000015762fc swift::GenericSignatureBuilder::PotentialArchetype::getNestedArchetypeAnchor(swift::Identifier, swift::GenericSignatureBuilder&, swift::GenericSignatureBuilder::PotentialArchetype::NestedTypeUpdate) (/path/to/swift/bin/swift+0x15762fc)\n12 0x00000000015848fc swift::GenericSignatureBuilder::checkSameTypeConstraints(llvm::ArrayRef<swift::GenericTypeParamType*>, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x15848fc)\n13 0x000000000158245a swift::GenericSignatureBuilder::finalize(swift::SourceLoc, llvm::ArrayRef<swift::GenericTypeParamType*>, bool) (/path/to/swift/bin/swift+0x158245a)\n14 0x000000000138647a swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x138647a)\n15 0x000000000136c69b (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x136c69b)\n16 0x0000000001358464 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358464)\n17 0x000000000135a494 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135a494)\n18 0x00000000015761cb swift::GenericSignatureBuilder::PotentialArchetype::getNestedArchetypeAnchor(swift::Identifier, swift::GenericSignatureBuilder&, swift::GenericSignatureBuilder::PotentialArchetype::NestedTypeUpdate) (/path/to/swift/bin/swift+0x15761cb)\n19 0x00000000015848fc swift::GenericSignatureBuilder::checkSameTypeConstraints(llvm::ArrayRef<swift::GenericTypeParamType*>, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x15848fc)\n20 0x000000000158245a swift::GenericSignatureBuilder::finalize(swift::SourceLoc, llvm::ArrayRef<swift::GenericTypeParamType*>, bool) (/path/to/swift/bin/swift+0x158245a)\n21 0x0000000001389040 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x1389040)\n22 0x0000000001389429 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x1389429)\n23 0x000000000135a200 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135a200)\n24 0x0000000001369ee3 (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x1369ee3)\n25 0x0000000001358444 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358444)\n26 0x0000000001358343 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1358343)\n27 0x00000000013e3344 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e3344)\n28 0x0000000000fa16cd swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa16cd)\n29 0x00000000004abe59 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe59)\n30 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n31 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n32 0x00007f5d01a23830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n33 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2122738
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10446",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10446/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10446/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10446/events",
      "html_url": "https://github.com/apple/swift/pull/10446",
      "id": 237480441,
      "number": 10446,
      "title": "[swiftc (31 vs. 5565)] Add crasher in swift::GenericSignatureBuilder::addRequirement",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-21T10:00:53Z",
      "updated_at": "2017-06-21T20:59:35Z",
      "closed_at": "2017-06-21T20:59:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10446",
        "html_url": "https://github.com/apple/swift/pull/10446",
        "diff_url": "https://github.com/apple/swift/pull/10446.diff",
        "patch_url": "https://github.com/apple/swift/pull/10446.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::addRequirement`.\n\nCurrent number of unresolved compiler crashers: 31 (5565 resolved)\n\nStack trace:\n\n```\n0 0x0000000003a7b018 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a7b018)\n1 0x0000000003a7b756 SignalHandler(int) (/path/to/swift/bin/swift+0x3a7b756)\n2 0x00007ff6250c5390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x000000000157d9a4 swift::GenericSignatureBuilder::addRequirement(swift::RequirementRepr const*, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::SubstitutionMap const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x157d9a4)\n4 0x000000000157bd6f swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x157bd6f)\n5 0x000000000157fc55 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x157fc55)\n6 0x0000000001590d41 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x1590d41)\n7 0x0000000001589522 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_59>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1589522)\n8 0x000000000157b6a1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x157b6a1)\n9 0x000000000157b4be swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x157b4be)\n10 0x0000000001385a22 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385a22)\n11 0x0000000001389004 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x1389004)\n12 0x0000000001389429 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x1389429)\n13 0x000000000135a200 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135a200)\n14 0x0000000001359c99 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1359c99)\n15 0x00000000015b259c swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b259c)\n16 0x00000000015b0c47 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, bool, swift::SourceLoc, bool, bool, bool) (/path/to/swift/bin/swift+0x15b0c47)\n17 0x000000000138b607 swift::TypeChecker::lookupUnqualifiedType(swift::DeclContext*, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138b607)\n18 0x00000000013dad5d resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13dad5d)\n19 0x00000000013d52b3 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d52b3)\n20 0x00000000013d4c89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4c89)\n21 0x00000000013d59f8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d59f8)\n22 0x00000000013d58fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d58fc)\n23 0x00000000013d4300 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4300)\n24 0x0000000001385c30 swift::TypeChecker::validateRequirement(swift::SourceLoc, swift::RequirementRepr&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385c30)\n25 0x00000000013506d8 swift::TypeChecker::validateWhereClauses(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13506d8)\n26 0x0000000001353678 swift::TypeChecker::validateDeclForNameLookup(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1353678)\n27 0x00000000015b0b91 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, bool, swift::SourceLoc, bool, bool, bool) (/path/to/swift/bin/swift+0x15b0b91)\n28 0x000000000138b607 swift::TypeChecker::lookupUnqualifiedType(swift::DeclContext*, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138b607)\n29 0x00000000013dad5d resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13dad5d)\n30 0x00000000013d52b3 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d52b3)\n31 0x00000000013d4c89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4c89)\n32 0x00000000013d59f8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d59f8)\n33 0x00000000013d58fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d58fc)\n34 0x00000000013d4300 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4300)\n35 0x0000000001385bfc swift::TypeChecker::validateRequirement(swift::SourceLoc, swift::RequirementRepr&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385bfc)\n36 0x00000000013506d8 swift::TypeChecker::validateWhereClauses(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13506d8)\n37 0x0000000001369ecb (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x1369ecb)\n38 0x0000000001358444 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358444)\n39 0x0000000001358343 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1358343)\n40 0x00000000013e3344 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e3344)\n41 0x0000000000fa16cd swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa16cd)\n42 0x00000000004abe59 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe59)\n43 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n44 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n45 0x00007ff6235d5830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n46 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2153721
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10447",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10447/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10447/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10447/events",
      "html_url": "https://github.com/apple/swift/pull/10447",
      "id": 237532278,
      "number": 10447,
      "title": "[4.0] [Type checker] Check type equality even for argument tuples in Swift 4.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-21T13:21:25Z",
      "updated_at": "2017-06-21T23:30:49Z",
      "closed_at": "2017-06-21T22:15:49Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10447",
        "html_url": "https://github.com/apple/swift/pull/10447",
        "diff_url": "https://github.com/apple/swift/pull/10447.diff",
        "patch_url": "https://github.com/apple/swift/pull/10447.patch"
      },
      "body": "**Explanation**: In Swift 4 mode, comparisons of single-parameter, unlabeled functions could fail when the parameter types were different spellings of the same type. This manifested in nonsensical failures with protocol conformance checking, but could happen in a number of places.\r\n**Scope**: Obviously-correct code that works in Swift 3.2 mode would fail (or produce weird results) in Swift 4 mode. We've only pinned a single SR/radar on this bug, but I highly suspect that there are others.\r\n**Radar**: SR-5166 / rdar://problem/32666189.\r\n**Risk**: Fairly low; the change is localized to Swift 4 mode and \"obviously\" an improvement of what we previously had.\r\n**Testing**: New test + normal compiler regression testing.\r\n",
      "score": 1.2168412
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10450",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10450/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10450/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10450/events",
      "html_url": "https://github.com/apple/swift/pull/10450",
      "id": 237587726,
      "number": 10450,
      "title": "[4.0] Move Dictionary(grouping:by) down a level",
      "user": {
        "login": "natecook1000",
        "id": 7053374,
        "avatar_url": "https://avatars1.githubusercontent.com/u/7053374?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/natecook1000",
        "html_url": "https://github.com/natecook1000",
        "followers_url": "https://api.github.com/users/natecook1000/followers",
        "following_url": "https://api.github.com/users/natecook1000/following{/other_user}",
        "gists_url": "https://api.github.com/users/natecook1000/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/natecook1000/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/natecook1000/subscriptions",
        "organizations_url": "https://api.github.com/users/natecook1000/orgs",
        "repos_url": "https://api.github.com/users/natecook1000/repos",
        "events_url": "https://api.github.com/users/natecook1000/events{/privacy}",
        "received_events_url": "https://api.github.com/users/natecook1000/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": {
        "login": "airspeedswift",
        "id": 8058277,
        "avatar_url": "https://avatars1.githubusercontent.com/u/8058277?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/airspeedswift",
        "html_url": "https://github.com/airspeedswift",
        "followers_url": "https://api.github.com/users/airspeedswift/followers",
        "following_url": "https://api.github.com/users/airspeedswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/airspeedswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/airspeedswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/airspeedswift/subscriptions",
        "organizations_url": "https://api.github.com/users/airspeedswift/orgs",
        "repos_url": "https://api.github.com/users/airspeedswift/repos",
        "events_url": "https://api.github.com/users/airspeedswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/airspeedswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "airspeedswift",
          "id": 8058277,
          "avatar_url": "https://avatars1.githubusercontent.com/u/8058277?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/airspeedswift",
          "html_url": "https://github.com/airspeedswift",
          "followers_url": "https://api.github.com/users/airspeedswift/followers",
          "following_url": "https://api.github.com/users/airspeedswift/following{/other_user}",
          "gists_url": "https://api.github.com/users/airspeedswift/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/airspeedswift/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/airspeedswift/subscriptions",
          "organizations_url": "https://api.github.com/users/airspeedswift/orgs",
          "repos_url": "https://api.github.com/users/airspeedswift/repos",
          "events_url": "https://api.github.com/users/airspeedswift/events{/privacy}",
          "received_events_url": "https://api.github.com/users/airspeedswift/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T16:08:08Z",
      "updated_at": "2017-06-23T18:20:52Z",
      "closed_at": "2017-06-23T18:12:36Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10450",
        "html_url": "https://github.com/apple/swift/pull/10450",
        "diff_url": "https://github.com/apple/swift/pull/10450.diff",
        "patch_url": "https://github.com/apple/swift/pull/10450.patch"
      },
      "body": "This is a cherry pick of #10275, #10279, and #10306.\r\n\r\n* Explanation: Moves the implementation of the `Dictionary(grouping:by:)` initializer down to the buffer level to avoid repeatedly duplicating arrays while building the grouped dictionary.\r\n* Scope: This changes the implementation of a single initializer; there is no external change.\r\n* Radar/SR: rdar://problem/32899123\r\n* Risk: Low\r\n* Testing: Added a benchmark to cover the initializer's performance. PR passed existing unit and validation tests.",
      "score": 1.2286521
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10451",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10451/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10451/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10451/events",
      "html_url": "https://github.com/apple/swift/pull/10451",
      "id": 237614893,
      "number": 10451,
      "title": "[swift-4.0-branch][overlay] Adding missing files to Intents/CMakeLists.txt",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-21T17:51:33Z",
      "updated_at": "2017-06-23T18:06:29Z",
      "closed_at": "2017-06-23T18:06:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10451",
        "html_url": "https://github.com/apple/swift/pull/10451",
        "diff_url": "https://github.com/apple/swift/pull/10451.diff",
        "patch_url": "https://github.com/apple/swift/pull/10451.patch"
      },
      "body": "<rdar://problem/32901674>",
      "score": 1.229226
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10452",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10452/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10452/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10452/events",
      "html_url": "https://github.com/apple/swift/pull/10452",
      "id": 237630281,
      "number": 10452,
      "title": "Fix a linked-list bug with the exclusivity runtime when accesses are not strictly nested",
      "user": {
        "login": "rjmccall",
        "id": 793869,
        "avatar_url": "https://avatars1.githubusercontent.com/u/793869?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjmccall",
        "html_url": "https://github.com/rjmccall",
        "followers_url": "https://api.github.com/users/rjmccall/followers",
        "following_url": "https://api.github.com/users/rjmccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjmccall/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjmccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjmccall/subscriptions",
        "organizations_url": "https://api.github.com/users/rjmccall/orgs",
        "repos_url": "https://api.github.com/users/rjmccall/repos",
        "events_url": "https://api.github.com/users/rjmccall/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjmccall/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 15,
      "created_at": "2017-06-21T18:51:12Z",
      "updated_at": "2017-06-22T06:24:56Z",
      "closed_at": "2017-06-22T04:10:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10452",
        "html_url": "https://github.com/apple/swift/pull/10452",
        "diff_url": "https://github.com/apple/swift/pull/10452.diff",
        "patch_url": "https://github.com/apple/swift/pull/10452.patch"
      },
      "body": "",
      "score": 1.2207509
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10453",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10453/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10453/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10453/events",
      "html_url": "https://github.com/apple/swift/pull/10453",
      "id": 237637676,
      "number": 10453,
      "title": "Unify CallArgParam and AnyFunctionType::Param",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-21T19:19:44Z",
      "updated_at": "2017-06-22T19:53:32Z",
      "closed_at": "2017-06-21T21:11:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10453",
        "html_url": "https://github.com/apple/swift/pull/10453",
        "diff_url": "https://github.com/apple/swift/pull/10453.diff",
        "patch_url": "https://github.com/apple/swift/pull/10453.patch"
      },
      "body": "Does what it says on the can.\r\n\r\nI would like to remove `swift::decomposeArgType` next, but a number of callers are just feeding `ArrayRef<Identifier>` to helper functions for \"reasons\".",
      "score": 1.2242345
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10454",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10454/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10454/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10454/events",
      "html_url": "https://github.com/apple/swift/pull/10454",
      "id": 237637730,
      "number": 10454,
      "title": "[Foundation] Prevent incorrect slice access when dropping elements",
      "user": {
        "login": "phausler",
        "id": 278470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/278470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phausler",
        "html_url": "https://github.com/phausler",
        "followers_url": "https://api.github.com/users/phausler/followers",
        "following_url": "https://api.github.com/users/phausler/following{/other_user}",
        "gists_url": "https://api.github.com/users/phausler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phausler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phausler/subscriptions",
        "organizations_url": "https://api.github.com/users/phausler/orgs",
        "repos_url": "https://api.github.com/users/phausler/repos",
        "events_url": "https://api.github.com/users/phausler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phausler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T19:19:57Z",
      "updated_at": "2017-06-22T14:23:47Z",
      "closed_at": "2017-06-22T14:23:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10454",
        "html_url": "https://github.com/apple/swift/pull/10454",
        "diff_url": "https://github.com/apple/swift/pull/10454.diff",
        "patch_url": "https://github.com/apple/swift/pull/10454.patch"
      },
      "body": "IndexPath initialization from slices incorrectly assumed that array slices would be indexed starting at 0, instead it should fetch the first and last elements for creating 1-ary and 2-ary IndexPath backing stores.\r\n\r\nThis resolves \r\nrdar://problem/32823736",
      "score": 1.2228808
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10455",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10455/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10455/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10455/events",
      "html_url": "https://github.com/apple/swift/pull/10455",
      "id": 237652056,
      "number": 10455,
      "title": "swift-api-digester: teach the tool to serialize/deserialize super class Usrs. rdar://32778228",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-21T20:17:39Z",
      "updated_at": "2017-06-22T02:47:11Z",
      "closed_at": "2017-06-22T02:47:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10455",
        "html_url": "https://github.com/apple/swift/pull/10455",
        "diff_url": "https://github.com/apple/swift/pull/10455.diff",
        "patch_url": "https://github.com/apple/swift/pull/10455.patch"
      },
      "body": "This can help us eliminate false positives when we report removed\r\ndeclarations are actually moved to a newly-introduced super class.",
      "score": 1.220362
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10456",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10456/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10456/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10456/events",
      "html_url": "https://github.com/apple/swift/pull/10456",
      "id": 237653109,
      "number": 10456,
      "title": "Prevent _swift_runtime_on_report from having its arguments optimized out",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 13,
      "created_at": "2017-06-21T20:21:58Z",
      "updated_at": "2017-06-22T20:50:55Z",
      "closed_at": "2017-06-21T23:54:55Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10456",
        "html_url": "https://github.com/apple/swift/pull/10456",
        "diff_url": "https://github.com/apple/swift/pull/10456.diff",
        "patch_url": "https://github.com/apple/swift/pull/10456.patch"
      },
      "body": "Prevent _swift_runtime_on_report from having its arguments optimized out.  Turns out an empty \"asm volatile\" isn't enough and we need to explicitly ask that the arguments are also not optimized out.",
      "score": 1.2248319
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10457",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10457/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10457/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10457/events",
      "html_url": "https://github.com/apple/swift/pull/10457",
      "id": 237654206,
      "number": 10457,
      "title": "[4.0] Prevent _swift_runtime_on_report from having its arguments optimized out.",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 3,
      "created_at": "2017-06-21T20:26:08Z",
      "updated_at": "2017-06-22T00:51:25Z",
      "closed_at": "2017-06-22T00:08:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10457",
        "html_url": "https://github.com/apple/swift/pull/10457",
        "diff_url": "https://github.com/apple/swift/pull/10457.diff",
        "patch_url": "https://github.com/apple/swift/pull/10457.patch"
      },
      "body": "Prevent _swift_runtime_on_report from having its arguments optimized out. Turns out an empty \"asm volatile\" isn't enough and we need to explicitly ask that the arguments are also not optimized out.\r\n\r\n• **Explanation**: The call to the Swift runtime issue reporting debugger hook can get optimized in a way that we don't pass the correct values to the debugger.  The fix forces the compiler not to optimize the arguments out.\r\n• **Scope**:  When the debugger is not attached, the bug doesn't affect anything.  With the LLDB  integration of Swift runtime issues, the bug can cause invalid data to be passed to the debugger.\r\n• **Radar**:  <rdar://problem/32905453>\r\n• **Risk**:  Very low risk.  The fix just prevents the compiler from optimizing arguments away.\r\n• **Testing**:  I verified that an optimized build of Swift standard library correctly passes the arguments and provides the info to the debugger.\r\n",
      "score": 1.219938
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10458",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10458/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10458/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10458/events",
      "html_url": "https://github.com/apple/swift/pull/10458",
      "id": 237657461,
      "number": 10458,
      "title": "[Parse] Provide better diagnostics for `func 1() {}`.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T20:38:53Z",
      "updated_at": "2017-06-21T23:40:07Z",
      "closed_at": "2017-06-21T22:55:59Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10458",
        "html_url": "https://github.com/apple/swift/pull/10458",
        "diff_url": "https://github.com/apple/swift/pull/10458.diff",
        "patch_url": "https://github.com/apple/swift/pull/10458.patch"
      },
      "body": "4.0 merge of https://github.com/apple/swift/pull/10426\r\n\r\nExplanation: Improves diagnostics for the common error among beginners of defining a function where the name is or starts with a number `func 1() {}`.\r\nScope of Issue: Targeted enhancement of some diagnostics that are hard to interpret for beginners.\r\nRisk: Minor, as it only changes error paths (adds a new branch that immediately emits an error diagnostic).\r\nReviewed By: Doug Gregor\r\nTesting: CI test suite\r\nDirections for QA: N/A\r\nRadar: rdar://problem/32316666",
      "score": 1.2195406
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10459",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10459/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10459/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10459/events",
      "html_url": "https://github.com/apple/swift/pull/10459",
      "id": 237658804,
      "number": 10459,
      "title": "benchmarks: fix ByteSwap benchmark",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T20:44:05Z",
      "updated_at": "2017-06-21T21:22:39Z",
      "closed_at": "2017-06-21T21:20:36Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10459",
        "html_url": "https://github.com/apple/swift/pull/10459",
        "diff_url": "https://github.com/apple/swift/pull/10459.diff",
        "patch_url": "https://github.com/apple/swift/pull/10459.patch"
      },
      "body": "*) Use getInt to prevent loop hoisting of the benchmark functions\r\n*) Reduce the overhead of CheckResult by moving it out of the loop\r\n*) Prevent inlining of the actual benchmark functions\r\n",
      "score": 1.2191814
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10461",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10461/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10461/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10461/events",
      "html_url": "https://github.com/apple/swift/pull/10461",
      "id": 237663121,
      "number": 10461,
      "title": "[swiftc (32 vs. 5565)] Add crasher in swift::TypeChecker::resolveWitness",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-21T21:00:34Z",
      "updated_at": "2017-06-21T23:23:18Z",
      "closed_at": "2017-06-21T23:23:18Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10461",
        "html_url": "https://github.com/apple/swift/pull/10461",
        "diff_url": "https://github.com/apple/swift/pull/10461.diff",
        "patch_url": "https://github.com/apple/swift/pull/10461.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::resolveWitness`.\n\nCurrent number of unresolved compiler crashers: 32 (5565 resolved)\n\nAssertion failure in [`lib/Sema/TypeCheckProtocol.cpp (line 2481)`](https://github.com/apple/swift/blob/93701535d1e6c5dc43e104d387265d89fa35836d/lib/Sema/TypeCheckProtocol.cpp#L2481):\n\n```\nAssertion `!Conformance->getWitness(requirement, nullptr).getDecl() && \"Already have a non-optional witness?\"' failed.\n\nWhen executing: void (anonymous namespace)::ConformanceChecker::recordInvalidWitness(swift::ValueDecl *)\n```\n\nAssertion context:\n\n```c++\n  assert(Conformance->isInvalid());\n\n  // If we already recorded this witness, don't do so again.\n  if (Conformance->hasWitness(requirement)) {\n    assert(!Conformance->getWitness(requirement, nullptr).getDecl() &&\n           \"Already have a non-optional witness?\");\n    return;\n  }\n\n  // Record that there is no witness.\n  Conformance->setWitness(requirement, Witness());\n```\nStack trace:\n\n```\n0 0x0000000003a7b018 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a7b018)\n1 0x0000000003a7b756 SignalHandler(int) (/path/to/swift/bin/swift+0x3a7b756)\n2 0x00007effb40e4390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007effb2609428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007effb260b02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007effb2601bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007effb2601c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000013c110a (/path/to/swift/bin/swift+0x13c110a)\n8 0x000000000139ed9b swift::TypeChecker::resolveWitness(swift::NormalProtocolConformance const*, swift::ValueDecl*) (/path/to/swift/bin/swift+0x139ed9b)\n9 0x00000000015bdcfd swift::NormalProtocolConformance::getWitness(swift::ValueDecl*, swift::LazyResolver*) const (/path/to/swift/bin/swift+0x15bdcfd)\n10 0x00000000015bdbcf swift::ProtocolConformance::getWitnessDecl(swift::ValueDecl*, swift::LazyResolver*) const (/path/to/swift/bin/swift+0x15bdbcf)\n11 0x000000000139be1f swift::TypeChecker::findWitnessedObjCRequirements(swift::ValueDecl const*, bool) (/path/to/swift/bin/swift+0x139be1f)\n12 0x000000000135e7f3 shouldMarkAsObjC(swift::TypeChecker&, swift::ValueDecl const*, bool) (/path/to/swift/bin/swift+0x135e7f3)\n13 0x000000000136caeb (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x136caeb)\n14 0x0000000001358464 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358464)\n15 0x000000000135a494 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135a494)\n16 0x0000000001358f22 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358f22)\n17 0x000000000136915b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x136915b)\n18 0x000000000135853e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135853e)\n19 0x0000000001358343 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1358343)\n20 0x00000000013e3344 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e3344)\n21 0x0000000000fa16cd swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa16cd)\n22 0x00000000004abe59 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe59)\n23 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n24 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n25 0x00007effb25f4830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n26 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2197782
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10462",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10462/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10462/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10462/events",
      "html_url": "https://github.com/apple/swift/pull/10462",
      "id": 237664254,
      "number": 10462,
      "title": "[4.0] [QoI] Improve diagnostics for single argument calls with trailing closures",
      "user": {
        "login": "xedin",
        "id": 21240,
        "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xedin",
        "html_url": "https://github.com/xedin",
        "followers_url": "https://api.github.com/users/xedin/followers",
        "following_url": "https://api.github.com/users/xedin/following{/other_user}",
        "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
        "organizations_url": "https://api.github.com/users/xedin/orgs",
        "repos_url": "https://api.github.com/users/xedin/repos",
        "events_url": "https://api.github.com/users/xedin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xedin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-21T21:04:48Z",
      "updated_at": "2017-06-22T17:17:07Z",
      "closed_at": "2017-06-22T17:17:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10462",
        "html_url": "https://github.com/apple/swift/pull/10462",
        "diff_url": "https://github.com/apple/swift/pull/10462.diff",
        "patch_url": "https://github.com/apple/swift/pull/10462.patch"
      },
      "body": "* Description: Calls involving single trailing closure arguments require special\r\nhandling because we don't have as much contextual information\r\nabout function/argument types as in with regular calls, which means\r\nthat diagnosing such situations only by `visitApplyExpr`\r\nyields subpar results.\r\n\r\n* Scope of the issue: diagnostic improvements for trailing closures.\r\n\r\n* Risk: Low.\r\n\r\n* Tested: New test cases added, Swift CI.\r\n\r\n* Reviewed by: Mark Lacey.\r\n\r\n* Resolves:\r\n  - [SR-4836](https://bugs.swift.org/browse/SR-4836)\r\n  - [SR-5199](https://bugs.swift.org/browse/SR-5199)\r\n  - rdar://problem/30106822\r\n  - rdar://problem/32433193\r\n  - rdar://problem/32490355\r\n  - rdar://problem/28004686\r\n  - rdar://problem/28012273\r\n  - rdar://problem/32191368\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.2242018
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10463",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10463/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10463/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10463/events",
      "html_url": "https://github.com/apple/swift/pull/10463",
      "id": 237669653,
      "number": 10463,
      "title": "[Migrator] Remove closure shorthand prefixing.",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-21T21:27:15Z",
      "updated_at": "2017-06-21T21:59:13Z",
      "closed_at": "2017-06-21T21:59:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10463",
        "html_url": "https://github.com/apple/swift/pull/10463",
        "diff_url": "https://github.com/apple/swift/pull/10463.diff",
        "patch_url": "https://github.com/apple/swift/pull/10463.patch"
      },
      "body": "In https://github.com/apple/swift/pull/10414, some SE-0110 features\r\nwere backed out, so the Migrator no longer needs to add `$0` shorthand\r\nprefixing.\r\n\r\nrdar://problem/32907276",
      "score": 1.21959
    }
  ]
}

