{
  "total_count": 445,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11184",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11184/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11184/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11184/events",
      "html_url": "https://github.com/apple/swift/pull/11184",
      "id": 245564966,
      "number": 11184,
      "title": "[4.0] [Clang importer] Map swift_objc_members attribute found on superclasses.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-07-25T23:35:05Z",
      "updated_at": "2017-07-26T05:14:17Z",
      "closed_at": "2017-07-26T01:05:41Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11184",
        "html_url": "https://github.com/apple/swift/pull/11184",
        "diff_url": "https://github.com/apple/swift/pull/11184.diff",
        "patch_url": "https://github.com/apple/swift/pull/11184.patch"
      },
      "body": "**Explanation**: Objective-C classes don't inherit the`swift_objc_members` attribute, which means that while Swift `XCTestCase` subclasses get `@objcMembers` as expected, if an Objective-C framework subclasses `XCTestCase` and that class is subclassed in Swift, we don't get the expected `@objcMembers`. Teach Swift to look up the class hierarchy to find `swift_objc_members`.\r\n**Scope**: This affects Realm, which has many clients.\r\n**Radar**:  rdar://problem/33514802\r\n**Risk**: Effectively zero. The Clang importer propagates an attribute further.\r\n**Reviewed By**: @jrose-apple \r\n**Testing**: Compiler regression tests.\r\n",
      "score": 1.8338225
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11186",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11186/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11186/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11186/events",
      "html_url": "https://github.com/apple/swift/pull/11186",
      "id": 245568916,
      "number": 11186,
      "title": "[swiftc (51 vs. 5582)] Add crasher in swift::constraints::ConstraintSystem::setMustBeMaterializableRecursive(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-26T00:01:58Z",
      "updated_at": "2017-07-26T20:28:00Z",
      "closed_at": "2017-07-26T01:42:06Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11186",
        "html_url": "https://github.com/apple/swift/pull/11186",
        "diff_url": "https://github.com/apple/swift/pull/11186.diff",
        "patch_url": "https://github.com/apple/swift/pull/11186.patch"
      },
      "body": "Add test case for crash triggered in `swift::constraints::ConstraintSystem::setMustBeMaterializableRecursive(...)`.\n\nCurrent number of unresolved compiler crashers: 51 (5582 resolved)\n\n/cc Chris Willmore - just wanted to let you know that this crasher caused an assertion failure for the assertion `type->isMaterializable() && \"argument to setMustBeMaterializableRecursive may not be inherently \" \"non-materializable\"` added on 2015-05-21 by you in commit df9136e0 :-)\n\nAssertion failure in [`lib/Sema/ConstraintSystem.cpp (line 181)`](https://github.com/apple/swift/blob/6d0679292ffb846b29e4c8bb07be8abd735b2b46/lib/Sema/ConstraintSystem.cpp#L181):\n\n```\nAssertion `type->isMaterializable() && \"argument to setMustBeMaterializableRecursive may not be inherently \" \"non-materializable\"' failed.\n\nWhen executing: void swift::constraints::ConstraintSystem::setMustBeMaterializableRecursive(swift::Type)\n```\n\nAssertion context:\n\n```c++\n\nvoid ConstraintSystem::setMustBeMaterializableRecursive(Type type)\n{\n  assert(type->isMaterializable() &&\n         \"argument to setMustBeMaterializableRecursive may not be inherently \"\n         \"non-materializable\");\n  type = getFixedTypeRecursive(type, /*wantRValue=*/false);\n  type = type->lookThroughAllAnyOptionalTypes();\n\n  if (auto typeVar = type->getAs<TypeVariableType>()) {\n    typeVar->getImpl().setMustBeMaterializable(getSavedBindings());\n```\nStack trace:\n\n```\n0 0x0000000003aeda68 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3aeda68)\n1 0x0000000003aee1a6 SignalHandler(int) (/path/to/swift/bin/swift+0x3aee1a6)\n2 0x00007fd58d755390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fd58bc7a428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fd58bc7c02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fd58bc72bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fd58bc72c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000011a8732 swift::constraints::ConstraintSystem::setMustBeMaterializableRecursive(swift::Type) (/path/to/swift/bin/swift+0x11a8732)\n8 0x00000000011a86e3 swift::constraints::ConstraintSystem::setMustBeMaterializableRecursive(swift::Type) (/path/to/swift/bin/swift+0x11a86e3)\n9 0x00000000011723fc swift::constraints::ConstraintSystem::matchTypes(swift::Type, swift::Type, swift::constraints::ConstraintKind, swift::OptionSet<swift::constraints::ConstraintSystem::TypeMatchFlags, unsigned int>, swift::constraints::ConstraintLocatorBuilder) (/path/to/swift/bin/swift+0x11723fc)\n10 0x0000000001181ee8 swift::constraints::ConstraintSystem::addConstraintImpl(swift::constraints::ConstraintKind, swift::Type, swift::Type, swift::constraints::ConstraintLocatorBuilder, bool) (/path/to/swift/bin/swift+0x1181ee8)\n11 0x0000000001178aed swift::constraints::ConstraintSystem::addConstraint(swift::constraints::ConstraintKind, swift::Type, swift::Type, swift::constraints::ConstraintLocatorBuilder, bool) (/path/to/swift/bin/swift+0x1178aed)\n12 0x0000000001189648 swift::constraints::ConstraintSystem::tryTypeVariableBindings(unsigned int, swift::TypeVariableType*, llvm::ArrayRef<swift::constraints::ConstraintSystem::PotentialBinding>, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x1189648)\n13 0x000000000118d5a4 swift::constraints::ConstraintSystem::solveSimplified(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118d5a4)\n14 0x0000000001189c33 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x1189c33)\n15 0x000000000118969c swift::constraints::ConstraintSystem::tryTypeVariableBindings(unsigned int, swift::TypeVariableType*, llvm::ArrayRef<swift::constraints::ConstraintSystem::PotentialBinding>, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118969c)\n16 0x000000000118d5a4 swift::constraints::ConstraintSystem::solveSimplified(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118d5a4)\n17 0x0000000001189c33 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x1189c33)\n18 0x000000000118b6b8 swift::constraints::ConstraintSystem::solve(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118b6b8)\n19 0x000000000118d253 swift::constraints::ConstraintSystem::solve(swift::Expr*&, swift::Type, swift::ExprTypeCheckListener*, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118d253)\n20 0x00000000011c0ca7 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11c0ca7)\n21 0x00000000011c4b15 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x11c4b15)\n22 0x000000000124c170 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x124c170)\n23 0x000000000124b976 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x124b976)\n24 0x000000000126a030 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x126a030)\n25 0x0000000000fb6477 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb6477)\n26 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n27 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n28 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n29 0x00007fd58bc65830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n30 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8403819
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11188",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11188/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11188/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11188/events",
      "html_url": "https://github.com/apple/swift/pull/11188",
      "id": 245581040,
      "number": 11188,
      "title": "Add support for borrowing rvalues",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-26T01:37:43Z",
      "updated_at": "2017-07-26T05:47:30Z",
      "closed_at": "2017-07-26T04:15:53Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11188",
        "html_url": "https://github.com/apple/swift/pull/11188",
        "diff_url": "https://github.com/apple/swift/pull/11188.diff",
        "patch_url": "https://github.com/apple/swift/pull/11188.patch"
      },
      "body": "[silgen] Add support for borrowing an RValue.\r\n\r\nrdar://33358110\r\n",
      "score": 1.8365997
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11189",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11189/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11189/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11189/events",
      "html_url": "https://github.com/apple/swift/pull/11189",
      "id": 245581789,
      "number": 11189,
      "title": "[swiftc (52 vs. 5582)] Add crasher in swift::TypeBase::getSuperclassForDecl",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T01:43:43Z",
      "updated_at": "2017-07-26T03:09:46Z",
      "closed_at": "2017-07-26T03:09:46Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11189",
        "html_url": "https://github.com/apple/swift/pull/11189",
        "diff_url": "https://github.com/apple/swift/pull/11189.diff",
        "patch_url": "https://github.com/apple/swift/pull/11189.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getSuperclassForDecl`.\n\nCurrent number of unresolved compiler crashers: 52 (5582 resolved)\n\nStack trace:\n\n```\n0 0x0000000003aee658 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3aee658)\n1 0x0000000003aeed96 SignalHandler(int) (/path/to/swift/bin/swift+0x3aeed96)\n2 0x00007f2ad12b5390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f2acf7da428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f2acf7dc02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x0000000003a8b3dd llvm::llvm_unreachable_internal(char const*, char const*, unsigned int) (/path/to/swift/bin/swift+0x3a8b3dd)\n6 0x0000000001609a5c swift::TypeBase::getSuperclassForDecl(swift::ClassDecl const*) (/path/to/swift/bin/swift+0x1609a5c)\n7 0x000000000125a68d swift::TypeChecker::substMemberTypeWithBase(swift::ModuleDecl*, swift::TypeDecl*, swift::Type) (/path/to/swift/bin/swift+0x125a68d)\n8 0x0000000001212724 swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x1212724)\n9 0x000000000125c46e resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125c46e)\n10 0x000000000125bbda swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125bbda)\n11 0x000000000125c997 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x125c997)\n12 0x000000000125c89c swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125c89c)\n13 0x000000000125b250 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125b250)\n14 0x000000000120c9a6 checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x120c9a6)\n15 0x000000000120c509 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x120c509)\n16 0x00000000011f1957 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x11f1957)\n17 0x00000000011dc824 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc824)\n18 0x00000000011ee34b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x11ee34b)\n19 0x00000000011dc8fe (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc8fe)\n20 0x00000000011ef53b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ef53b)\n21 0x00000000011dc804 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc804)\n22 0x00000000011edbdb (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11edbdb)\n23 0x00000000011dc834 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc834)\n24 0x00000000011ee34b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x11ee34b)\n25 0x00000000011dc8fe (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc8fe)\n26 0x00000000011ee34b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x11ee34b)\n27 0x00000000011dc8fe (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dc8fe)\n28 0x00000000011dc703 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11dc703)\n29 0x000000000126a764 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x126a764)\n30 0x0000000000fb6787 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb6787)\n31 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n32 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n33 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n34 0x00007f2acf7c5830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n35 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8358068
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11190",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11190/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11190/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11190/events",
      "html_url": "https://github.com/apple/swift/pull/11190",
      "id": 245587111,
      "number": 11190,
      "title": "Large Loadable Types: Use old ABI for block calling convention",
      "user": {
        "login": "shajrawi",
        "id": 17753158,
        "avatar_url": "https://avatars3.githubusercontent.com/u/17753158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shajrawi",
        "html_url": "https://github.com/shajrawi",
        "followers_url": "https://api.github.com/users/shajrawi/followers",
        "following_url": "https://api.github.com/users/shajrawi/following{/other_user}",
        "gists_url": "https://api.github.com/users/shajrawi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shajrawi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shajrawi/subscriptions",
        "organizations_url": "https://api.github.com/users/shajrawi/orgs",
        "repos_url": "https://api.github.com/users/shajrawi/repos",
        "events_url": "https://api.github.com/users/shajrawi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shajrawi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-07-26T02:23:21Z",
      "updated_at": "2017-07-27T00:24:29Z",
      "closed_at": "2017-07-26T18:28:03Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11190",
        "html_url": "https://github.com/apple/swift/pull/11190",
        "diff_url": "https://github.com/apple/swift/pull/11190.diff",
        "patch_url": "https://github.com/apple/swift/pull/11190.patch"
      },
      "body": "radar rdar://problem/28680453\r\n\r\nIgnores debug instructions when re-creating function_ref instructions + makes sure that convention block functions / instructions use the old ABI",
      "score": 1.8431365
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11191",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11191/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11191/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11191/events",
      "html_url": "https://github.com/apple/swift/pull/11191",
      "id": 245592669,
      "number": 11191,
      "title": "[stdlib] Fix bug in Substring's _persistentContent",
      "user": {
        "login": "milseman",
        "id": 235334,
        "avatar_url": "https://avatars0.githubusercontent.com/u/235334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/milseman",
        "html_url": "https://github.com/milseman",
        "followers_url": "https://api.github.com/users/milseman/followers",
        "following_url": "https://api.github.com/users/milseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/milseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/milseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milseman/subscriptions",
        "organizations_url": "https://api.github.com/users/milseman/orgs",
        "repos_url": "https://api.github.com/users/milseman/repos",
        "events_url": "https://api.github.com/users/milseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/milseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T03:03:13Z",
      "updated_at": "2017-07-26T19:49:40Z",
      "closed_at": "2017-07-26T15:57:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11191",
        "html_url": "https://github.com/apple/swift/pull/11191",
        "diff_url": "https://github.com/apple/swift/pull/11191.diff",
        "patch_url": "https://github.com/apple/swift/pull/11191.patch"
      },
      "body": "<!-- What's in this pull request? -->\r\nSubstring's _persistentContent has a fast path that avoids a copy when\r\nthe Substring represents the entire outer String. It correctly\r\ndetected situations where the wrapped _StringCore was not itself a\r\nslice, but was omitting the extra checks to make sure the Substring's\r\nown range covered the entire String.\r\n\r\nTest added.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->",
      "score": 1.8407861
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11192",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11192/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11192/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11192/events",
      "html_url": "https://github.com/apple/swift/pull/11192",
      "id": 245593663,
      "number": 11192,
      "title": "[swiftc (53 vs. 5582)] Add crasher in swift::Substitution::Substitution",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T03:10:48Z",
      "updated_at": "2017-07-26T04:36:28Z",
      "closed_at": "2017-07-26T04:36:28Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11192",
        "html_url": "https://github.com/apple/swift/pull/11192",
        "diff_url": "https://github.com/apple/swift/pull/11192.diff",
        "patch_url": "https://github.com/apple/swift/pull/11192.patch"
      },
      "body": "Add test case for crash triggered in `swift::Substitution::Substitution`.\n\nCurrent number of unresolved compiler crashers: 53 (5582 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `Replacement->isMaterializable() && \"cannot substitute with a non-materializable type\"` added on 2016-09-08 by you in commit 9cba638c :-)\n\nAssertion failure in [`lib/AST/Substitution.cpp (line 43)`](https://github.com/apple/swift/blob/9c9db59c97e069b3645ae9669959d9a506abb014/lib/AST/Substitution.cpp#L43):\n\n```\nAssertion `Replacement->isMaterializable() && \"cannot substitute with a non-materializable type\"' failed.\n\nWhen executing: swift::Substitution::Substitution(swift::Type, ArrayRef<swift::ProtocolConformanceRef>)\n```\n\nAssertion context:\n\n```c++\n                           ArrayRef<ProtocolConformanceRef> Conformance)\n  : Replacement(Replacement), Conformance(Conformance)\n{\n  // The replacement type must be materializable.\n  assert(Replacement->isMaterializable()\n         && \"cannot substitute with a non-materializable type\");\n}\n\nbool Substitution::isCanonical() const {\n  if (!getReplacement()->isCanonical())\n    return false;\n```\nStack trace:\n\n```\n0 0x0000000003aee658 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3aee658)\n1 0x0000000003aeed96 SignalHandler(int) (/path/to/swift/bin/swift+0x3aeed96)\n2 0x00007f2813f88390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f28124ad428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f28124af02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f28124a5bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f28124a5c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015fb4ee swift::Substitution::Substitution(swift::Type, llvm::ArrayRef<swift::ProtocolConformanceRef>) (/path/to/swift/bin/swift+0x15fb4ee)\n8 0x000000000159f633 bool llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>::callback_fn<swift::GenericSignature::getSubstitutions(swift::SubstitutionMap const&, llvm::SmallVectorImpl<swift::Substitution>&) const::$_8>(long, swift::Type, llvm::ArrayRef<swift::Requirement>) (/path/to/swift/bin/swift+0x159f633)\n9 0x000000000159d363 swift::GenericSignature::enumeratePairedRequirements(llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>) const::$_4::operator()(swift::CanType) const (/path/to/swift/bin/swift+0x159d363)\n10 0x000000000159bf61 swift::GenericSignature::enumeratePairedRequirements(llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>) const (/path/to/swift/bin/swift+0x159bf61)\n11 0x000000000159d532 swift::GenericSignature::getSubstitutions(swift::SubstitutionMap const&, llvm::SmallVectorImpl<swift::Substitution>&) const (/path/to/swift/bin/swift+0x159d532)\n12 0x00000000014d0655 swift::ASTContext::getSpecializedConformance(swift::Type, swift::ProtocolConformance*, swift::SubstitutionMap const&) (/path/to/swift/bin/swift+0x14d0655)\n13 0x00000000015d4dd5 swift::ModuleDecl::lookupConformance(swift::Type, swift::ProtocolDecl*, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15d4dd5)\n14 0x000000000121ca41 swift::TypeChecker::conformsToProtocol(swift::Type, swift::ProtocolDecl*, swift::DeclContext*, swift::OptionSet<swift::ConformanceCheckFlags, unsigned int>, swift::SourceLoc) (/path/to/swift/bin/swift+0x121ca41)\n15 0x0000000001178e2e swift::constraints::ConstraintSystem::simplifyConformsToConstraint(swift::Type, swift::ProtocolDecl*, swift::constraints::ConstraintKind, swift::constraints::ConstraintLocatorBuilder, swift::OptionSet<swift::constraints::ConstraintSystem::TypeMatchFlags, unsigned int>) (/path/to/swift/bin/swift+0x1178e2e)\n16 0x0000000001179b2a swift::constraints::ConstraintSystem::simplifyConformsToConstraint(swift::Type, swift::Type, swift::constraints::ConstraintKind, swift::constraints::ConstraintLocatorBuilder, swift::OptionSet<swift::constraints::ConstraintSystem::TypeMatchFlags, unsigned int>) (/path/to/swift/bin/swift+0x1179b2a)\n17 0x0000000001182c72 swift::constraints::ConstraintSystem::simplifyConstraint(swift::constraints::Constraint const&) (/path/to/swift/bin/swift+0x1182c72)\n18 0x0000000001186db9 swift::constraints::ConstraintSystem::simplify(bool) (/path/to/swift/bin/swift+0x1186db9)\n19 0x000000000118a1d2 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118a1d2)\n20 0x0000000001189d3c swift::constraints::ConstraintSystem::tryTypeVariableBindings(unsigned int, swift::TypeVariableType*, llvm::ArrayRef<swift::constraints::ConstraintSystem::PotentialBinding>, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x1189d3c)\n21 0x000000000118dc44 swift::constraints::ConstraintSystem::solveSimplified(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118dc44)\n22 0x000000000118a2d3 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118a2d3)\n23 0x0000000001189d3c swift::constraints::ConstraintSystem::tryTypeVariableBindings(unsigned int, swift::TypeVariableType*, llvm::ArrayRef<swift::constraints::ConstraintSystem::PotentialBinding>, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x1189d3c)\n24 0x000000000118dc44 swift::constraints::ConstraintSystem::solveSimplified(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118dc44)\n25 0x000000000118a2d3 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118a2d3)\n26 0x000000000118e385 swift::constraints::ConstraintSystem::solveSimplified(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118e385)\n27 0x000000000118a2d3 swift::constraints::ConstraintSystem::solveRec(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118a2d3)\n28 0x000000000118bd58 swift::constraints::ConstraintSystem::solve(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118bd58)\n29 0x000000000118d8f3 swift::constraints::ConstraintSystem::solve(swift::Expr*&, swift::Type, swift::ExprTypeCheckListener*, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118d8f3)\n30 0x00000000011c1387 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11c1387)\n31 0x00000000011c51f5 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x11c51f5)\n32 0x000000000124c910 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x124c910)\n33 0x000000000124c116 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x124c116)\n34 0x000000000126a7d0 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x126a7d0)\n35 0x0000000000fb6787 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb6787)\n36 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n37 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n38 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n39 0x00007f2812498830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n40 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8371662
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11193",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11193/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11193/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11193/events",
      "html_url": "https://github.com/apple/swift/pull/11193",
      "id": 245593813,
      "number": 11193,
      "title": "[stdlib] Conform fixed-width integer types to LosslessStringConvertible",
      "user": {
        "login": "xwu",
        "id": 13952,
        "avatar_url": "https://avatars2.githubusercontent.com/u/13952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xwu",
        "html_url": "https://github.com/xwu",
        "followers_url": "https://api.github.com/users/xwu/followers",
        "following_url": "https://api.github.com/users/xwu/following{/other_user}",
        "gists_url": "https://api.github.com/users/xwu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xwu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xwu/subscriptions",
        "organizations_url": "https://api.github.com/users/xwu/orgs",
        "repos_url": "https://api.github.com/users/xwu/repos",
        "events_url": "https://api.github.com/users/xwu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xwu/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 16,
      "created_at": "2017-07-26T03:12:02Z",
      "updated_at": "2017-07-29T04:23:35Z",
      "closed_at": "2017-07-29T03:10:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11193",
        "html_url": "https://github.com/apple/swift/pull/11193",
        "diff_url": "https://github.com/apple/swift/pull/11193.diff",
        "patch_url": "https://github.com/apple/swift/pull/11193.patch"
      },
      "body": "As approved in [SE-0089](https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md), `Int` and its friends should conform to `LosslessStringConvertible`.\r\n\r\nSince `init?(_:radix:)` is now implemented on `FixedWidthInteger`, this PR adopts the following design:\r\n\r\n1. `FixedWidthInteger` now refines `LosslessStringConvertible`\r\n2. The required initializer `init?(_:)` has a default implementation that calls `init?(_:radix:)`.\r\n\r\nThere's clearly a test that can be added to test this conformance. What's going to be even more critical is assuring source compatibility.\r\n\r\n> Note: Currently, a method `foo(x: Int, y: Int = 42)` cannot satisfy a protocol requirement for `foo(x: Int)`; however, both can co-exist without the compiler complaining about ambiguity.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->",
      "score": 1.8603855
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11194",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11194/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11194/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11194/events",
      "html_url": "https://github.com/apple/swift/pull/11194",
      "id": 245603720,
      "number": 11194,
      "title": "Propagate \"-O\" to Clang (as \"-Os\")",
      "user": {
        "login": "rjmccall",
        "id": 793869,
        "avatar_url": "https://avatars1.githubusercontent.com/u/793869?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjmccall",
        "html_url": "https://github.com/rjmccall",
        "followers_url": "https://api.github.com/users/rjmccall/followers",
        "following_url": "https://api.github.com/users/rjmccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjmccall/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjmccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjmccall/subscriptions",
        "organizations_url": "https://api.github.com/users/rjmccall/orgs",
        "repos_url": "https://api.github.com/users/rjmccall/repos",
        "events_url": "https://api.github.com/users/rjmccall/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjmccall/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-07-26T04:34:47Z",
      "updated_at": "2017-07-26T23:51:32Z",
      "closed_at": "2017-07-26T05:00:05Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11194",
        "html_url": "https://github.com/apple/swift/pull/11194",
        "diff_url": "https://github.com/apple/swift/pull/11194.diff",
        "patch_url": "https://github.com/apple/swift/pull/11194.patch"
      },
      "body": "It affects Clang IRGen, among other things.",
      "score": 1.8443011
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11195",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11195/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11195/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11195/events",
      "html_url": "https://github.com/apple/swift/pull/11195",
      "id": 245611626,
      "number": 11195,
      "title": "[silgen] Assert that rvalues always have consistent ownership and cle…",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-07-26T05:39:47Z",
      "updated_at": "2017-07-26T17:40:25Z",
      "closed_at": "2017-07-26T17:40:21Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11195",
        "html_url": "https://github.com/apple/swift/pull/11195",
        "diff_url": "https://github.com/apple/swift/pull/11195.diff",
        "patch_url": "https://github.com/apple/swift/pull/11195.patch"
      },
      "body": "…anups.\r\n\r\nThis means that all non-trivial ManagedValues must:\r\n\r\n1. All have a cleanup or all not have a cleanup.\r\n2. Have the same ValueOwnershipKind.\r\n\r\nSemantic SIL requires this of tuple values. So it makes sense to catch this bug\r\nas early as possible.\r\n\r\nrdar://33358110",
      "score": 1.8429453
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11196",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11196/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11196/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11196/events",
      "html_url": "https://github.com/apple/swift/pull/11196",
      "id": 245612106,
      "number": 11196,
      "title": "Ensure RawSyntax macro parameters are the same with NDEBUG",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 12,
      "created_at": "2017-07-26T05:43:11Z",
      "updated_at": "2017-07-26T21:41:10Z",
      "closed_at": "2017-07-26T16:59:58Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11196",
        "html_url": "https://github.com/apple/swift/pull/11196",
        "diff_url": "https://github.com/apple/swift/pull/11196.diff",
        "patch_url": "https://github.com/apple/swift/pull/11196.patch"
      },
      "body": "(@harlanhaskins committing with @CodaFi's account -- thanks!)\r\n\r\nI forgot to reset the macro parameters after converting them to\r\nvarargs, which didn't get caught running PR testing.\r\n\r\nThis patch ensures they're all the same, and fixes the bots.\r\n\r\nrdar://33531765",
      "score": 1.844291
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11199",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11199/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11199/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11199/events",
      "html_url": "https://github.com/apple/swift/pull/11199",
      "id": 245701632,
      "number": 11199,
      "title": "[SE-0182][Lexer] Diagnose escaped newline at the end of the last line in multiline string",
      "user": {
        "login": "rintaro",
        "id": 142081,
        "avatar_url": "https://avatars1.githubusercontent.com/u/142081?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rintaro",
        "html_url": "https://github.com/rintaro",
        "followers_url": "https://api.github.com/users/rintaro/followers",
        "following_url": "https://api.github.com/users/rintaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/rintaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rintaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rintaro/subscriptions",
        "organizations_url": "https://api.github.com/users/rintaro/orgs",
        "repos_url": "https://api.github.com/users/rintaro/repos",
        "events_url": "https://api.github.com/users/rintaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rintaro/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-26T12:14:17Z",
      "updated_at": "2017-07-26T18:26:09Z",
      "closed_at": "2017-07-26T18:24:36Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11199",
        "html_url": "https://github.com/apple/swift/pull/11199",
        "diff_url": "https://github.com/apple/swift/pull/11199.diff",
        "patch_url": "https://github.com/apple/swift/pull/11199.patch"
      },
      "body": "Implement [SE-0182](https://github.com/apple/swift-evolution/blob/master/proposals/0182-newline-escape-in-strings.md) rule:\r\n> An escape character at the end of the last line of a literal is an error, as no newlines follow.\r\n\r\nwith fix-it.\r\n\r\n\r\n\r\nAlso, added test cases for normalizing newline characters (`CR`, `LF`, `CR+LF`) to `\\n` multiline string literals.\r\n",
      "score": 1.8472358
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11200",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11200/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11200/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11200/events",
      "html_url": "https://github.com/apple/swift/pull/11200",
      "id": 245716021,
      "number": 11200,
      "title": "[stdlib] Fix warnings in non-ObjC platforms.",
      "user": {
        "login": "rintaro",
        "id": 142081,
        "avatar_url": "https://avatars1.githubusercontent.com/u/142081?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rintaro",
        "html_url": "https://github.com/rintaro",
        "followers_url": "https://api.github.com/users/rintaro/followers",
        "following_url": "https://api.github.com/users/rintaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/rintaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rintaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rintaro/subscriptions",
        "organizations_url": "https://api.github.com/users/rintaro/orgs",
        "repos_url": "https://api.github.com/users/rintaro/repos",
        "events_url": "https://api.github.com/users/rintaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rintaro/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T13:07:41Z",
      "updated_at": "2017-07-26T13:42:59Z",
      "closed_at": "2017-07-26T13:42:56Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11200",
        "html_url": "https://github.com/apple/swift/pull/11200",
        "diff_url": "https://github.com/apple/swift/pull/11200.diff",
        "patch_url": "https://github.com/apple/swift/pull/11200.patch"
      },
      "body": "Fix warnings introduced in #10966 ",
      "score": 1.8462541
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11201",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11201/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11201/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11201/events",
      "html_url": "https://github.com/apple/swift/pull/11201",
      "id": 245772652,
      "number": 11201,
      "title": "[4.0] [stdlib] Fix bug in Substring's _persistentContent",
      "user": {
        "login": "milseman",
        "id": 235334,
        "avatar_url": "https://avatars0.githubusercontent.com/u/235334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/milseman",
        "html_url": "https://github.com/milseman",
        "followers_url": "https://api.github.com/users/milseman/followers",
        "following_url": "https://api.github.com/users/milseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/milseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/milseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milseman/subscriptions",
        "organizations_url": "https://api.github.com/users/milseman/orgs",
        "repos_url": "https://api.github.com/users/milseman/repos",
        "events_url": "https://api.github.com/users/milseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/milseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-26T16:01:43Z",
      "updated_at": "2017-07-26T19:49:28Z",
      "closed_at": "2017-07-26T19:49:23Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11201",
        "html_url": "https://github.com/apple/swift/pull/11201",
        "diff_url": "https://github.com/apple/swift/pull/11201.diff",
        "patch_url": "https://github.com/apple/swift/pull/11201.patch"
      },
      "body": "(this is a 4.0 cherry-pick of https://github.com/apple/swift/pull/11191)\r\n\r\nCCC\r\nExplanation: This fixes a bug in Substring, where some modifications would fail to recognize when the Substring represented the entire String. This change fixes that recognition logic.\r\nScope: Small, limited to Substring's append(contentsOf:)\r\nSR: https://bugs.swift.org/browse/SR-5530\r\nRisk: Low. Change is specifically to avoid an optimization when it might trigger incorrect behavior\r\nTesting: Full CI testing.\r\n\r\n----\r\n\r\n(from original PR)\r\n\r\nSubstring's _persistentContent has a fast path that avoids a copy when\r\nthe Substring represents the entire outer String. It correctly\r\ndetected situations where the wrapped _StringCore was not itself a\r\nslice, but was omitting the extra checks to make sure the Substring's\r\nown range covered the entire String.\r\n\r\nTest added.",
      "score": 1.8500403
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11202",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11202/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11202/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11202/events",
      "html_url": "https://github.com/apple/swift/pull/11202",
      "id": 245802308,
      "number": 11202,
      "title": "[test] Disable pointer_conversion.swift with an unoptimized stdlib.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-26T17:50:25Z",
      "updated_at": "2017-07-26T18:42:57Z",
      "closed_at": "2017-07-26T18:34:41Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11202",
        "html_url": "https://github.com/apple/swift/pull/11202",
        "diff_url": "https://github.com/apple/swift/pull/11202.diff",
        "patch_url": "https://github.com/apple/swift/pull/11202.patch"
      },
      "body": "I looked at trying to make the matches more flexible, but there are actually some suspicious bits that I'm not so sure about. I'll just disable the test for now.\r\n\r\nrdar://problem/33531741",
      "score": 1.8507557
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11204",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11204/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11204/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11204/events",
      "html_url": "https://github.com/apple/swift/pull/11204",
      "id": 245821028,
      "number": 11204,
      "title": "[4.0] [SE-0182][Lexer] Diagnose escaped newline at the end of the last line in multiline string",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 9,
      "created_at": "2017-07-26T18:58:34Z",
      "updated_at": "2017-07-27T00:30:01Z",
      "closed_at": "2017-07-27T00:28:04Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11204",
        "html_url": "https://github.com/apple/swift/pull/11204",
        "diff_url": "https://github.com/apple/swift/pull/11204.diff",
        "patch_url": "https://github.com/apple/swift/pull/11204.patch"
      },
      "body": "**Explanation**: Follow-on for the implementation of SE-0182 (escaped newlines in multiline string literals) that diagnoses escaped newlines at the end of a multiline string literal.\r\n**Scope**: Minor tightening of a feature that is new in Swift 4 and hasn't gone out in a beta yet.\r\n**Radar**: rdar://problem/33548820\r\n**Risk**: Effectively zero.\r\n**Reviewed By**: @rintaro implemented it, I reviewed it\r\n**Testing**: Compiler regression tests",
      "score": 1.8533847
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11205",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11205/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11205/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11205/events",
      "html_url": "https://github.com/apple/swift/pull/11205",
      "id": 245836311,
      "number": 11205,
      "title": "Remove subsumed CFunctionPointer/ObjCMethod/Block in large loadable types",
      "user": {
        "login": "shajrawi",
        "id": 17753158,
        "avatar_url": "https://avatars3.githubusercontent.com/u/17753158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shajrawi",
        "html_url": "https://github.com/shajrawi",
        "followers_url": "https://api.github.com/users/shajrawi/followers",
        "following_url": "https://api.github.com/users/shajrawi/following{/other_user}",
        "gists_url": "https://api.github.com/users/shajrawi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shajrawi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shajrawi/subscriptions",
        "organizations_url": "https://api.github.com/users/shajrawi/orgs",
        "repos_url": "https://api.github.com/users/shajrawi/repos",
        "events_url": "https://api.github.com/users/shajrawi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shajrawi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T19:57:18Z",
      "updated_at": "2017-07-26T20:43:12Z",
      "closed_at": "2017-07-26T20:43:09Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11205",
        "html_url": "https://github.com/apple/swift/pull/11205",
        "diff_url": "https://github.com/apple/swift/pull/11205.diff",
        "patch_url": "https://github.com/apple/swift/pull/11205.patch"
      },
      "body": "radar rdar://problem/28680453\r\n\r\nRemoves subsumed CFunctionPointer/ObjCMethod/Block in large loadable types + adds new test for a old-calling-convetions corner case.",
      "score": 1.8527665
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11206",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11206/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11206/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11206/events",
      "html_url": "https://github.com/apple/swift/pull/11206",
      "id": 245836475,
      "number": 11206,
      "title": "[silgen] Add RValue::isPlus{One,Zero} to distinguish +0 from +1 rvalues.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-26T19:57:55Z",
      "updated_at": "2017-07-26T21:00:19Z",
      "closed_at": "2017-07-26T20:34:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11206",
        "html_url": "https://github.com/apple/swift/pull/11206",
        "diff_url": "https://github.com/apple/swift/pull/11206.diff",
        "patch_url": "https://github.com/apple/swift/pull/11206.patch"
      },
      "body": "I already in a previous commit forced all rvalues to have consistent cleanups\r\nand consistent value ownership kinds. Now that we know all constructed RValues\r\nare consistent, we can safely query that information.\r\n\r\nrdar://33358110",
      "score": 1.8527237
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11208",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11208/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11208/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11208/events",
      "html_url": "https://github.com/apple/swift/pull/11208",
      "id": 245852703,
      "number": 11208,
      "title": "Report nested inout paren types as non-materializable",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-07-26T20:59:05Z",
      "updated_at": "2017-07-26T22:19:26Z",
      "closed_at": "2017-07-26T22:19:24Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11208",
        "html_url": "https://github.com/apple/swift/pull/11208",
        "diff_url": "https://github.com/apple/swift/pull/11208.diff",
        "patch_url": "https://github.com/apple/swift/pull/11208.patch"
      },
      "body": "Workaround for a corner case wherein types such as\r\n\r\n```\r\n(tuple_type num_elements=2\r\n  (tuple_type_elt\r\n    (metatype_type\r\n      (struct_type decl=Swift.(file).Int)))\r\n  (tuple_type_elt\r\n    (tuple_type num_elements=1\r\n      (tuple_type_elt name=t\r\n        (inout_type\r\n          (type_variable_type id=0))))))\r\n```\r\n\r\nwere being reported as materializable.  Because this is effectively a TupleType of a ParenType, look through to its underlying element flags for materializability information.",
      "score": 1.85393
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11209",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11209/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11209/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11209/events",
      "html_url": "https://github.com/apple/swift/pull/11209",
      "id": 245864875,
      "number": 11209,
      "title": "[silgen] Clean up RValue::isPlus{One,Zero}().",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-07-26T21:48:22Z",
      "updated_at": "2017-07-27T07:00:59Z",
      "closed_at": "2017-07-27T07:00:59Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11209",
        "html_url": "https://github.com/apple/swift/pull/11209",
        "diff_url": "https://github.com/apple/swift/pull/11209.diff",
        "patch_url": "https://github.com/apple/swift/pull/11209.patch"
      },
      "body": "rdar://33358110",
      "score": 1.8572863
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11210",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11210/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11210/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11210/events",
      "html_url": "https://github.com/apple/swift/pull/11210",
      "id": 245870201,
      "number": 11210,
      "title": "Irgen use runtime function attributes",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-07-26T22:12:19Z",
      "updated_at": "2017-07-27T19:36:07Z",
      "closed_at": "2017-07-27T19:36:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11210",
        "html_url": "https://github.com/apple/swift/pull/11210",
        "diff_url": "https://github.com/apple/swift/pull/11210.diff",
        "patch_url": "https://github.com/apple/swift/pull/11210.patch"
      },
      "body": "* Add some ZExt function attributes on functions returning bool\r\n* swift_dynamicCast is not readonly as it writes to the 'dest' buffer\r\n* Fix tail_alloc.sil test\r\n\r\nrdar://20802330",
      "score": 1.8616699
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11211",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11211/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11211/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11211/events",
      "html_url": "https://github.com/apple/swift/pull/11211",
      "id": 245876448,
      "number": 11211,
      "title": "[master-next] Finish getting the importer over to using clang::ModuleMacro",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2017-07-26T22:45:17Z",
      "updated_at": "2017-07-27T01:28:14Z",
      "closed_at": "2017-07-27T01:28:12Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11211",
        "html_url": "https://github.com/apple/swift/pull/11211",
        "diff_url": "https://github.com/apple/swift/pull/11211.diff",
        "patch_url": "https://github.com/apple/swift/pull/11211.patch"
      },
      "body": "Second half of #10519, fixing issues with redeclarations and macros defined in terms of other macros. Fixes *almost* all the remaining master-next issues.",
      "score": 1.8560592
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11212",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11212/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11212/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11212/events",
      "html_url": "https://github.com/apple/swift/pull/11212",
      "id": 245880188,
      "number": 11212,
      "title": "[stdlib] Give Substring its own views",
      "user": {
        "login": "milseman",
        "id": 235334,
        "avatar_url": "https://avatars0.githubusercontent.com/u/235334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/milseman",
        "html_url": "https://github.com/milseman",
        "followers_url": "https://api.github.com/users/milseman/followers",
        "following_url": "https://api.github.com/users/milseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/milseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/milseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milseman/subscriptions",
        "organizations_url": "https://api.github.com/users/milseman/orgs",
        "repos_url": "https://api.github.com/users/milseman/repos",
        "events_url": "https://api.github.com/users/milseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/milseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2017-07-26T23:06:19Z",
      "updated_at": "2017-07-28T18:01:55Z",
      "closed_at": "2017-07-28T03:36:52Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11212",
        "html_url": "https://github.com/apple/swift/pull/11212",
        "diff_url": "https://github.com/apple/swift/pull/11212.diff",
        "patch_url": "https://github.com/apple/swift/pull/11212.patch"
      },
      "body": "<!-- What's in this pull request? -->\r\nThis is a rebase, squash, and refactoring of https://github.com/apple/swift/pull/11088\r\n\r\nSubstring now has distinct views inside of it. String's view's SubSequences are the same as Substring's respective views, lending a consistent API that also encourages/enforces thinking about slices holding onto memory.\r\n\r\nIncluded are some compatibility additions, extra sanity checks, updated tests, and a few miscellaneous fixes exposed by this change.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->",
      "score": 1.8696442
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11213",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11213/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11213/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11213/events",
      "html_url": "https://github.com/apple/swift/pull/11213",
      "id": 245881655,
      "number": 11213,
      "title": "Compute the expression range correctly for substring-to-string fixits",
      "user": {
        "login": "rjmccall",
        "id": 793869,
        "avatar_url": "https://avatars1.githubusercontent.com/u/793869?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjmccall",
        "html_url": "https://github.com/rjmccall",
        "followers_url": "https://api.github.com/users/rjmccall/followers",
        "following_url": "https://api.github.com/users/rjmccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjmccall/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjmccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjmccall/subscriptions",
        "organizations_url": "https://api.github.com/users/rjmccall/orgs",
        "repos_url": "https://api.github.com/users/rjmccall/repos",
        "events_url": "https://api.github.com/users/rjmccall/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjmccall/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-26T23:15:25Z",
      "updated_at": "2017-07-27T02:18:42Z",
      "closed_at": "2017-07-27T02:18:39Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11213",
        "html_url": "https://github.com/apple/swift/pull/11213",
        "diff_url": "https://github.com/apple/swift/pull/11213.diff",
        "patch_url": "https://github.com/apple/swift/pull/11213.patch"
      },
      "body": "rdar://33474838",
      "score": 1.856647
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11214",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11214/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11214/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11214/events",
      "html_url": "https://github.com/apple/swift/pull/11214",
      "id": 245886285,
      "number": 11214,
      "title": "[4.0] [stdlib] Give Substring its own views",
      "user": {
        "login": "milseman",
        "id": 235334,
        "avatar_url": "https://avatars0.githubusercontent.com/u/235334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/milseman",
        "html_url": "https://github.com/milseman",
        "followers_url": "https://api.github.com/users/milseman/followers",
        "following_url": "https://api.github.com/users/milseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/milseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/milseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milseman/subscriptions",
        "organizations_url": "https://api.github.com/users/milseman/orgs",
        "repos_url": "https://api.github.com/users/milseman/repos",
        "events_url": "https://api.github.com/users/milseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/milseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-07-26T23:45:05Z",
      "updated_at": "2017-07-28T17:51:34Z",
      "closed_at": "2017-07-28T03:35:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11214",
        "html_url": "https://github.com/apple/swift/pull/11214",
        "diff_url": "https://github.com/apple/swift/pull/11214.diff",
        "patch_url": "https://github.com/apple/swift/pull/11214.patch"
      },
      "body": "(this is a cherry-pick of https://github.com/apple/swift/pull/11212)\r\n\r\nCCC:\r\n* Explanation: Prior to this, String's various views were their own SubSequence type, allowing accidental leaks (similar to pre-Swift 4 String being its own SubSequence type). Also, Substring's views are not distinct types, leading to more entanglement. This introduces new view types for Substring, and makes them be the SubSequence type of the respective String views.\r\n* Scope: This is a source-breaking language change. It establishes new types for Substring's views and makes String.*View.SubSequence equal to Substring's views, rather than letting the views be their own slice type.\r\n* Radar (and possibly SR Issue): <rdar://problem/33280489>\r\n* Risk: Moderate. While I believe the changes land us in a more correct and less buggy state, there are a lot of changes. Most of those changes are in relatively obscure corners of String/Substring, though.\r\n* Testing: Full CI validation testing.\r\n\r\n\r\n\r\n\r\n----\r\n\r\n(from the original PR)\r\n\r\nSubstring now has distinct views inside of it. String's view's SubSequences are the same as Substring's respective views, lending a consistent API that also encourages/enforces thinking about slices holding onto memory.\r\n\r\nIncluded are some compatibility additions, extra sanity checks, updated tests, and a few miscellaneous fixes exposed by this change.\r\n\r\n<!-- What's in this pull request? -->\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.8699889
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11216",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11216/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11216/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11216/events",
      "html_url": "https://github.com/apple/swift/pull/11216",
      "id": 245887432,
      "number": 11216,
      "title": "Pass optimization options to the -emit-pch job",
      "user": {
        "login": "rjmccall",
        "id": 793869,
        "avatar_url": "https://avatars1.githubusercontent.com/u/793869?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjmccall",
        "html_url": "https://github.com/rjmccall",
        "followers_url": "https://api.github.com/users/rjmccall/followers",
        "following_url": "https://api.github.com/users/rjmccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjmccall/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjmccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjmccall/subscriptions",
        "organizations_url": "https://api.github.com/users/rjmccall/orgs",
        "repos_url": "https://api.github.com/users/rjmccall/repos",
        "events_url": "https://api.github.com/users/rjmccall/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjmccall/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 18,
      "created_at": "2017-07-26T23:50:53Z",
      "updated_at": "2017-07-27T15:36:37Z",
      "closed_at": "2017-07-27T15:36:32Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11216",
        "html_url": "https://github.com/apple/swift/pull/11216",
        "diff_url": "https://github.com/apple/swift/pull/11216.diff",
        "patch_url": "https://github.com/apple/swift/pull/11216.patch"
      },
      "body": "Now that the Clang importer honors and expects -O, make sure we pass it to the PCH job.\r\n\r\nrdar://33541306",
      "score": 1.8613775
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11217",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11217/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11217/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11217/events",
      "html_url": "https://github.com/apple/swift/pull/11217",
      "id": 245887502,
      "number": 11217,
      "title": "[SE-0157] Enable recursive protocol constraints",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-07-26T23:51:22Z",
      "updated_at": "2017-07-27T07:48:28Z",
      "closed_at": "2017-07-27T04:49:01Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11217",
        "html_url": "https://github.com/apple/swift/pull/11217",
        "diff_url": "https://github.com/apple/swift/pull/11217.diff",
        "patch_url": "https://github.com/apple/swift/pull/11217.patch"
      },
      "body": "Optimize the `GenericSignatureBuilder`'s reprocessing of requirements by only reprocessing delayed requirements that are likely to be resolvable. The scheme is fairly simple:\r\n\r\n* We only delay the processing of a requirement when we refuse to create a new type in the type graph (i.e., we refuse to create a new `PotentialArchetype` that is a nested type of another, parent `PotentialArchetype`). In these cases, record the delayed requirement in the `EquivalenceClass` of the parent `PotentialArchetype` for later processing.\r\n* All modifications due to processing a requirement change an `EquivalenceClass`. When a modification occurs, move all of the delayed requirements from the `EquivalenceClass` to the global delayed-requirements queue.\r\n* `processDelayedRequirements` looks at the global delayed-requirements queue, only. These are delayed requirements that have a chance of being resolved now.\r\n\r\nWith this change, type-checking the standard library is 4% faster than it was prior to this patch series, because the number of reprocessed-but-still-unresolved requirements has been drastically reduced: from 225M (with `-enable-recursive-constraints`) and 191k (without `-enable-recursive-constraints`) before this PR to 57k after this PR (where recursive constraints are always enabled).",
      "score": 1.8588206
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11218",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11218/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11218/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11218/events",
      "html_url": "https://github.com/apple/swift/pull/11218",
      "id": 245891993,
      "number": 11218,
      "title": "Large Types IRGen Pass: fix test failure + small bug fix",
      "user": {
        "login": "shajrawi",
        "id": 17753158,
        "avatar_url": "https://avatars3.githubusercontent.com/u/17753158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shajrawi",
        "html_url": "https://github.com/shajrawi",
        "followers_url": "https://api.github.com/users/shajrawi/followers",
        "following_url": "https://api.github.com/users/shajrawi/following{/other_user}",
        "gists_url": "https://api.github.com/users/shajrawi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shajrawi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shajrawi/subscriptions",
        "organizations_url": "https://api.github.com/users/shajrawi/orgs",
        "repos_url": "https://api.github.com/users/shajrawi/repos",
        "events_url": "https://api.github.com/users/shajrawi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shajrawi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-27T00:23:23Z",
      "updated_at": "2017-07-27T01:43:31Z",
      "closed_at": "2017-07-27T01:43:29Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11218",
        "html_url": "https://github.com/apple/swift/pull/11218",
        "diff_url": "https://github.com/apple/swift/pull/11218.diff",
        "patch_url": "https://github.com/apple/swift/pull/11218.patch"
      },
      "body": "radar rdar://problem/28680453\r\n\r\nRequire x86_64 for new Large Type’s SIL test-cases now (to avoid 32bit-target problem)\r\n\r\nSupport indirectly returning large loadable types for type-parmater returns - forgot to map the type into context",
      "score": 1.8571597
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11219",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11219/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11219/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11219/events",
      "html_url": "https://github.com/apple/swift/pull/11219",
      "id": 245893868,
      "number": 11219,
      "title": "[Frontend] Emit tbd as an extra output, not a frontend action.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-07-27T00:37:58Z",
      "updated_at": "2017-08-01T01:46:05Z",
      "closed_at": "2017-08-01T01:46:03Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11219",
        "html_url": "https://github.com/apple/swift/pull/11219",
        "diff_url": "https://github.com/apple/swift/pull/11219.diff",
        "patch_url": "https://github.com/apple/swift/pull/11219.patch"
      },
      "body": "This means it can be emitted during an -emit-module frontend job, which is the\r\nmost common place it will be used, so reusing work like this is important for\r\nperformance.\r\n",
      "score": 1.897421
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11220",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11220/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11220/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11220/events",
      "html_url": "https://github.com/apple/swift/pull/11220",
      "id": 245896143,
      "number": 11220,
      "title": "[sil-opaque-values] SILGen/ownership support for protocol thunks.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-27T00:56:00Z",
      "updated_at": "2017-07-27T06:45:09Z",
      "closed_at": "2017-07-27T06:45:09Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11220",
        "html_url": "https://github.com/apple/swift/pull/11220",
        "diff_url": "https://github.com/apple/swift/pull/11220.diff",
        "patch_url": "https://github.com/apple/swift/pull/11220.patch"
      },
      "body": "\r\n",
      "score": 1.8591452
    }
  ]
}

