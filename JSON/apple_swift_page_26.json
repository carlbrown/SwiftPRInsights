{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10498",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10498/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10498/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10498/events",
      "html_url": "https://github.com/apple/swift/pull/10498",
      "id": 237915876,
      "number": 10498,
      "title": "Adjust the expression type checker timeout to 10 minutes.",
      "user": {
        "login": "rudkx",
        "id": 162784,
        "avatar_url": "https://avatars1.githubusercontent.com/u/162784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rudkx",
        "html_url": "https://github.com/rudkx",
        "followers_url": "https://api.github.com/users/rudkx/followers",
        "following_url": "https://api.github.com/users/rudkx/following{/other_user}",
        "gists_url": "https://api.github.com/users/rudkx/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rudkx/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rudkx/subscriptions",
        "organizations_url": "https://api.github.com/users/rudkx/orgs",
        "repos_url": "https://api.github.com/users/rudkx/repos",
        "events_url": "https://api.github.com/users/rudkx/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rudkx/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T17:20:11Z",
      "updated_at": "2017-06-22T17:54:31Z",
      "closed_at": "2017-06-22T17:49:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10498",
        "html_url": "https://github.com/apple/swift/pull/10498",
        "diff_url": "https://github.com/apple/swift/pull/10498.diff",
        "patch_url": "https://github.com/apple/swift/pull/10498.patch"
      },
      "body": "The old threshold was sometimes being reached on an ASAN bot.\r\n\r\nAlso fix a spot where I missed passing in the override value from the\r\ncommand-line.\r\n\r\nrdar://problem/32925008\r\n",
      "score": 1.2314332
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10499",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10499/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10499/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10499/events",
      "html_url": "https://github.com/apple/swift/pull/10499",
      "id": 237918697,
      "number": 10499,
      "title": "[Foundation] Prevent incorrect slice access when dropping elements",
      "user": {
        "login": "phausler",
        "id": 278470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/278470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phausler",
        "html_url": "https://github.com/phausler",
        "followers_url": "https://api.github.com/users/phausler/followers",
        "following_url": "https://api.github.com/users/phausler/following{/other_user}",
        "gists_url": "https://api.github.com/users/phausler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phausler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phausler/subscriptions",
        "organizations_url": "https://api.github.com/users/phausler/orgs",
        "repos_url": "https://api.github.com/users/phausler/repos",
        "events_url": "https://api.github.com/users/phausler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phausler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T17:31:20Z",
      "updated_at": "2017-06-22T22:42:17Z",
      "closed_at": "2017-06-22T22:42:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10499",
        "html_url": "https://github.com/apple/swift/pull/10499",
        "diff_url": "https://github.com/apple/swift/pull/10499.diff",
        "patch_url": "https://github.com/apple/swift/pull/10499.patch"
      },
      "body": "Cherry pick of pr #10454\r\n\r\nIndexPath initialization from slices incorrectly assumed that array slices would be indexed starting at 0, instead it should fetch the first and last elements for creating 1-ary and 2-ary IndexPath backing stores.\r\n\r\nThis resolves\r\nrdar://problem/32823736\r\n\r\nExplanation:\r\nThe previous refactor of IndexPath incorrectly accessed slices of arrays by counting indexes instead of indexes offset from the startIndex. This commit corrects that to utilize the first and last element of the slice.\r\n\r\nScope:\r\nThis is just runtime behavior of IndexPath\r\n\r\nRadar (and possibly SR Issue):\r\nrdar://problem/32926028\r\n\r\nRisk:\r\nThese are newly introduced behaviors that have no current adoption other than the initial seeds.\r\n\r\nTesting:\r\nUnit tests were added to validate the behavior of slicing specifically in the reported case of dropFirst.",
      "score": 1.232704
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10500",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10500/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10500/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10500/events",
      "html_url": "https://github.com/apple/swift/pull/10500",
      "id": 237920919,
      "number": 10500,
      "title": "[swiftc (41 vs. 5565)] Add crasher in swift::Type::subst",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T17:40:24Z",
      "updated_at": "2017-06-22T19:16:54Z",
      "closed_at": "2017-06-22T19:16:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10500",
        "html_url": "https://github.com/apple/swift/pull/10500",
        "diff_url": "https://github.com/apple/swift/pull/10500.diff",
        "patch_url": "https://github.com/apple/swift/pull/10500.patch"
      },
      "body": "Add test case for crash triggered in `swift::Type::subst`.\n\nCurrent number of unresolved compiler crashers: 41 (5565 resolved)\n\nStack trace:\n\n```\n0 0x0000000003a7b018 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a7b018)\n1 0x0000000003a7b756 SignalHandler(int) (/path/to/swift/bin/swift+0x3a7b756)\n2 0x00007f8bda53e390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00000000015cef48 swift::Type::subst(swift::SubstitutionMap const&, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cef48)\n4 0x000000000157d91e swift::GenericSignatureBuilder::addRequirement(swift::RequirementRepr const*, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::SubstitutionMap const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x157d91e)\n5 0x000000000157bd6f swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x157bd6f)\n6 0x000000000157fc55 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x157fc55)\n7 0x0000000001590d41 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x1590d41)\n8 0x0000000001589522 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_59>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1589522)\n9 0x000000000157b6a1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x157b6a1)\n10 0x000000000157b9c5 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x157b9c5)\n11 0x000000000157fc55 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x157fc55)\n12 0x0000000001590d41 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x1590d41)\n13 0x0000000001589522 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_59>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1589522)\n14 0x000000000157b6a1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x157b6a1)\n15 0x000000000157b4be swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x157b4be)\n16 0x0000000001385a22 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385a22)\n17 0x0000000001389004 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x1389004)\n18 0x0000000001389429 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x1389429)\n19 0x000000000135a200 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135a200)\n20 0x00000000014596a6 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x14596a6)\n21 0x000000000145976b swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145976b)\n22 0x000000000145976b swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145976b)\n23 0x000000000135366d swift::TypeChecker::validateDeclForNameLookup(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135366d)\n24 0x00000000015b259c swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b259c)\n25 0x00000000015b0c47 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, bool, swift::SourceLoc, bool, bool, bool) (/path/to/swift/bin/swift+0x15b0c47)\n26 0x000000000138b607 swift::TypeChecker::lookupUnqualifiedType(swift::DeclContext*, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138b607)\n27 0x00000000013dad5d resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13dad5d)\n28 0x00000000013d52b3 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d52b3)\n29 0x00000000013d4c89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4c89)\n30 0x00000000013d59f8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d59f8)\n31 0x00000000013d58fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d58fc)\n32 0x00000000013d4300 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4300)\n33 0x0000000001385c30 swift::TypeChecker::validateRequirement(swift::SourceLoc, swift::RequirementRepr&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385c30)\n34 0x00000000013506d8 swift::TypeChecker::validateWhereClauses(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13506d8)\n35 0x0000000001353678 swift::TypeChecker::validateDeclForNameLookup(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1353678)\n36 0x00000000015b0b91 swift::UnqualifiedLookup::UnqualifiedLookup(swift::DeclName, swift::DeclContext*, swift::LazyResolver*, bool, swift::SourceLoc, bool, bool, bool) (/path/to/swift/bin/swift+0x15b0b91)\n37 0x000000000138b607 swift::TypeChecker::lookupUnqualifiedType(swift::DeclContext*, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138b607)\n38 0x00000000013dad5d resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13dad5d)\n39 0x00000000013d52b3 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d52b3)\n40 0x00000000013d4c89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4c89)\n41 0x00000000013d59f8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d59f8)\n42 0x00000000013d58fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d58fc)\n43 0x00000000013d4300 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d4300)\n44 0x0000000001385b69 swift::TypeChecker::validateRequirement(swift::SourceLoc, swift::RequirementRepr&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1385b69)\n45 0x00000000013506d8 swift::TypeChecker::validateWhereClauses(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13506d8)\n46 0x0000000001369ecb (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x1369ecb)\n47 0x0000000001358444 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1358444)\n48 0x0000000001358343 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1358343)\n49 0x00000000013e3344 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e3344)\n50 0x0000000000fa16cd swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa16cd)\n51 0x00000000004abe59 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe59)\n52 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n53 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n54 0x00007f8bd8a4e830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n55 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2319125
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10501",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10501/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10501/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10501/events",
      "html_url": "https://github.com/apple/swift/pull/10501",
      "id": 237921109,
      "number": 10501,
      "title": "[4.0] IRGen: Use LLVM's alloc size to compute padding between types",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T17:41:09Z",
      "updated_at": "2017-06-22T23:53:03Z",
      "closed_at": "2017-06-22T23:53:03Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10501",
        "html_url": "https://github.com/apple/swift/pull/10501",
        "diff_url": "https://github.com/apple/swift/pull/10501.diff",
        "patch_url": "https://github.com/apple/swift/pull/10501.patch"
      },
      "body": "We need to subtract alignment padding when doing type layout in terms of llvm types.\r\n\r\n• Explanation: We miscalculated padding between types that have different llvm allocation and store size in the swift calling convention. The patch uses the alloc size when computing the necessary padding for physical types.\r\n\r\nThis leads to wrong answers for types such as a pair of ( <3xfloat>, i64) because the offset for the second element is wrong.\r\n\r\n• Scope of Issue: This gets exposed in code that uses simd  types on x86-64 such as <3 x float>\r\n\r\n• Risk: Low. This only affects code that uses the swift calling convention and only has an effect if llvm’s storesize != llvm’s alloc size.\r\n\r\n• Testing: Swift regression test was added.\r\n\r\nrdar://32618125\r\nSR-5137\r\n\r\n\r\n",
      "score": 1.2330533
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10502",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10502/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10502/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10502/events",
      "html_url": "https://github.com/apple/swift/pull/10502",
      "id": 237923121,
      "number": 10502,
      "title": "[4.0] NSKeyedUnarchiver methods should take Data (instead of just NSData)",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-06-22T17:48:46Z",
      "updated_at": "2017-06-23T01:10:02Z",
      "closed_at": "2017-06-23T01:10:02Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10502",
        "html_url": "https://github.com/apple/swift/pull/10502",
        "diff_url": "https://github.com/apple/swift/pull/10502.diff",
        "patch_url": "https://github.com/apple/swift/pull/10502.patch"
      },
      "body": "**What's in this pull request?**\r\nCherry-picks #10474 and #10515 to `swift-4.0-branch`.\r\n\r\n**Explanation:** We missed a few `NSKeyedUnarchiver` methods during our original renaming for Swift — some of these methods still take `NSData` when they can take `Data`. We can add `Data` variants which bridge to `NSData` to fix this in a backwards-compatible way.\r\n**Scope:** Affects those who want to use the proper top-level unarchiving methods in Swift.\r\n**Radar:** rdar://problem/32177014\r\n**Risk:** Low\r\n**Testing:** Manual verification; this adds a new overload to a method we already have with the proper parameter.",
      "score": 1.2334154
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10503",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10503/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10503/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10503/events",
      "html_url": "https://github.com/apple/swift/pull/10503",
      "id": 237926851,
      "number": 10503,
      "title": "Strengthen an assertion in AccessSummaryAnalysis.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-22T18:03:18Z",
      "updated_at": "2017-06-22T19:06:18Z",
      "closed_at": "2017-06-22T19:06:18Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10503",
        "html_url": "https://github.com/apple/swift/pull/10503",
        "diff_url": "https://github.com/apple/swift/pull/10503.diff",
        "patch_url": "https://github.com/apple/swift/pull/10503.patch"
      },
      "body": "Mark Lacey caught this bug in the assertion logic that looks for expected SIL\r\npatterns involving non-escaping closures. I broadened it to allow multiple use,\r\nbut it was only verifying the first use. This is NFC w.r.t. our automated\r\ntesting because that never hits the multiple-use case.\r\n",
      "score": 1.2320039
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10504",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10504/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10504/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10504/events",
      "html_url": "https://github.com/apple/swift/pull/10504",
      "id": 237933582,
      "number": 10504,
      "title": "[build-script] Add support for compiling swift with leaks sanitizer.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-22T18:30:07Z",
      "updated_at": "2017-06-22T20:58:04Z",
      "closed_at": "2017-06-22T20:24:18Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10504",
        "html_url": "https://github.com/apple/swift/pull/10504",
        "diff_url": "https://github.com/apple/swift/pull/10504.diff",
        "patch_url": "https://github.com/apple/swift/pull/10504.patch"
      },
      "body": "This only enables the swift compiler (not its output) to be used with leaks\r\nsanitizer on linux.\r\n\r\nSome important notes: On Linux, right now we are not completely leak clean. I\r\nwas only able to get a -Onone build of the stdlib without triggering lsan (I was\r\nunable to run the optimizer and the tests successfully). Additionally even at\r\n-Onone, I had to suppress some leaks in the driver. The point of this though is\r\nto prevent any further -Onone leaks from being committed to the tree since\r\n-Onone leaks that are not bounded (unlike the driver bugs) could cause SourceKit\r\nto leak memory. Since SourceKit is a long running process... such a type of leak\r\nwould be bad.\r\n\r\nrdar://32876901\r\n",
      "score": 1.2326218
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10505",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10505/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10505/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10505/events",
      "html_url": "https://github.com/apple/swift/pull/10505",
      "id": 237947868,
      "number": 10505,
      "title": "Fixing grammar in error messages.",
      "user": {
        "login": "cheshire",
        "id": 348959,
        "avatar_url": "https://avatars0.githubusercontent.com/u/348959?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cheshire",
        "html_url": "https://github.com/cheshire",
        "followers_url": "https://api.github.com/users/cheshire/followers",
        "following_url": "https://api.github.com/users/cheshire/following{/other_user}",
        "gists_url": "https://api.github.com/users/cheshire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cheshire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cheshire/subscriptions",
        "organizations_url": "https://api.github.com/users/cheshire/orgs",
        "repos_url": "https://api.github.com/users/cheshire/repos",
        "events_url": "https://api.github.com/users/cheshire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cheshire/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 14,
      "created_at": "2017-06-22T19:23:50Z",
      "updated_at": "2017-06-26T20:33:31Z",
      "closed_at": "2017-06-26T20:33:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10505",
        "html_url": "https://github.com/apple/swift/pull/10505",
        "diff_url": "https://github.com/apple/swift/pull/10505.diff",
        "patch_url": "https://github.com/apple/swift/pull/10505.patch"
      },
      "body": "\"is obsoleted\" is only used in context of \"X is obsoleted by Y\".\r\nWhen used as a rough synonym of \"deprecated\" the proper grammar is \"is\r\nobsolete\".",
      "score": 1.2569281
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10506",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10506/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10506/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10506/events",
      "html_url": "https://github.com/apple/swift/pull/10506",
      "id": 237950112,
      "number": 10506,
      "title": "Speculative fix for test output race conditions",
      "user": {
        "login": "dabrahams",
        "id": 44065,
        "avatar_url": "https://avatars1.githubusercontent.com/u/44065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dabrahams",
        "html_url": "https://github.com/dabrahams",
        "followers_url": "https://api.github.com/users/dabrahams/followers",
        "following_url": "https://api.github.com/users/dabrahams/following{/other_user}",
        "gists_url": "https://api.github.com/users/dabrahams/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dabrahams/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dabrahams/subscriptions",
        "organizations_url": "https://api.github.com/users/dabrahams/orgs",
        "repos_url": "https://api.github.com/users/dabrahams/repos",
        "events_url": "https://api.github.com/users/dabrahams/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dabrahams/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-06-22T19:32:33Z",
      "updated_at": "2017-06-25T20:16:21Z",
      "closed_at": "2017-06-25T20:16:16Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10506",
        "html_url": "https://github.com/apple/swift/pull/10506",
        "diff_url": "https://github.com/apple/swift/pull/10506.diff",
        "patch_url": "https://github.com/apple/swift/pull/10506.patch"
      },
      "body": "Sometimes two tests will simultaneously try to write the same file in the temporary directory. This change tries to prevent that problem.\r\n",
      "score": 1.2508097
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10507",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10507/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10507/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10507/events",
      "html_url": "https://github.com/apple/swift/pull/10507",
      "id": 237951872,
      "number": 10507,
      "title": "swift-api-digester: more strict when detecting moved declarations.",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T19:39:20Z",
      "updated_at": "2017-06-22T20:00:32Z",
      "closed_at": "2017-06-22T20:00:32Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10507",
        "html_url": "https://github.com/apple/swift/pull/10507",
        "diff_url": "https://github.com/apple/swift/pull/10507.diff",
        "patch_url": "https://github.com/apple/swift/pull/10507.patch"
      },
      "body": "We've witnessed high positive rate in this case.\r\nrdar://31694080",
      "score": 1.2327935
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10508",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10508/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10508/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10508/events",
      "html_url": "https://github.com/apple/swift/pull/10508",
      "id": 237957667,
      "number": 10508,
      "title": "Add a utility script for checking for hex constants in IR tests.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-22T20:02:25Z",
      "updated_at": "2017-06-22T21:21:43Z",
      "closed_at": "2017-06-22T21:21:43Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10508",
        "html_url": "https://github.com/apple/swift/pull/10508",
        "diff_url": "https://github.com/apple/swift/pull/10508.diff",
        "patch_url": "https://github.com/apple/swift/pull/10508.patch"
      },
      "body": "LLVM always prints IR constants as signed decimal, which is not ideal when looking for packed bit patterns in tests. Add a little filter script that turns hex constants of the form `<iNN 0xNNNNN>` into the decimal output we'd expect from the LLVM printer.",
      "score": 1.2332637
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10509",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10509/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10509/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10509/events",
      "html_url": "https://github.com/apple/swift/pull/10509",
      "id": 237958715,
      "number": 10509,
      "title": "buildscript: Let cpio command handle symlinks in the workspace path",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T20:06:32Z",
      "updated_at": "2017-06-22T22:50:33Z",
      "closed_at": "2017-06-22T21:01:39Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10509",
        "html_url": "https://github.com/apple/swift/pull/10509",
        "diff_url": "https://github.com/apple/swift/pull/10509.diff",
        "patch_url": "https://github.com/apple/swift/pull/10509.patch"
      },
      "body": "",
      "score": 1.2332054
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10510",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10510/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10510/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10510/events",
      "html_url": "https://github.com/apple/swift/pull/10510",
      "id": 237959012,
      "number": 10510,
      "title": "[CMake] iOS simulator should still build 32-bit by default.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-22T20:07:42Z",
      "updated_at": "2017-06-23T17:58:31Z",
      "closed_at": "2017-06-23T17:26:58Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10510",
        "html_url": "https://github.com/apple/swift/pull/10510",
        "diff_url": "https://github.com/apple/swift/pull/10510.diff",
        "patch_url": "https://github.com/apple/swift/pull/10510.patch"
      },
      "body": "Accidentally deleted and never noticed because all of the package builds configure this explicitly.",
      "score": 1.2384024
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10511",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10511/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10511/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10511/events",
      "html_url": "https://github.com/apple/swift/pull/10511",
      "id": 237963213,
      "number": 10511,
      "title": "We also need to pass a min-vers string to the ClangImporter when running under the embed-bitcode mode",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T20:23:56Z",
      "updated_at": "2017-06-22T21:57:58Z",
      "closed_at": "2017-06-22T21:57:58Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10511",
        "html_url": "https://github.com/apple/swift/pull/10511",
        "diff_url": "https://github.com/apple/swift/pull/10511.diff",
        "patch_url": "https://github.com/apple/swift/pull/10511.patch"
      },
      "body": "\r\nOtherwise, it will return the wrong triple when queried.\r\n\r\nrdar://32863670\r\n",
      "score": 1.2335399
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10513",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10513/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10513/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10513/events",
      "html_url": "https://github.com/apple/swift/pull/10513",
      "id": 237966782,
      "number": 10513,
      "title": "[Foundation] Add fast paths for Data initialization for common sequences",
      "user": {
        "login": "phausler",
        "id": 278470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/278470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phausler",
        "html_url": "https://github.com/phausler",
        "followers_url": "https://api.github.com/users/phausler/followers",
        "following_url": "https://api.github.com/users/phausler/following{/other_user}",
        "gists_url": "https://api.github.com/users/phausler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phausler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phausler/subscriptions",
        "organizations_url": "https://api.github.com/users/phausler/orgs",
        "repos_url": "https://api.github.com/users/phausler/repos",
        "events_url": "https://api.github.com/users/phausler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phausler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2017-06-22T20:37:33Z",
      "updated_at": "2017-07-06T16:55:27Z",
      "closed_at": "2017-07-06T16:45:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10513",
        "html_url": "https://github.com/apple/swift/pull/10513",
        "diff_url": "https://github.com/apple/swift/pull/10513.diff",
        "patch_url": "https://github.com/apple/swift/pull/10513.patch"
      },
      "body": "There were some unfortunate slower than expected initializers on Data that were inherited from Collection adoption. This allows Data initialization to take the fast path in a select group of initializations; previously it would create a Data and then iterate byte by byte appending. Albeit that was relatively quick, we have faster options available.\r\n\r\nThis addresses the issue:\r\nrdar://problem/32359974",
      "score": 1.3201805
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10514",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10514/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10514/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10514/events",
      "html_url": "https://github.com/apple/swift/pull/10514",
      "id": 237967857,
      "number": 10514,
      "title": "We also need to pass a min-vers string to the ClangImporter when running under the embed-bitcode mode",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T20:41:47Z",
      "updated_at": "2017-06-22T23:56:00Z",
      "closed_at": "2017-06-22T23:56:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10514",
        "html_url": "https://github.com/apple/swift/pull/10514",
        "diff_url": "https://github.com/apple/swift/pull/10514.diff",
        "patch_url": "https://github.com/apple/swift/pull/10514.patch"
      },
      "body": "Otherwise, it will return the wrong triple when queried.\r\n\r\nrdar://32863670\r\n\r\n• Explanation: We recently added code to query the ClangImporter for the target triple. This code is on the swift-4.0-branch. Unfortunately, this leads to a bug where the clang importer returns the wrong triple when invoked with the -embed-bitcode option.\r\nThis patch fixes this.\r\n\r\nThis leads to object files that contain a linker minimum version for iOS instead of tvOS which prevents the swift compiler toolchain from building with bitcode embedded.\r\n\r\n• Origination: The problem exists in the swift-4.0-branch.\r\n\r\n• Risk: Low. This should only affect the -embed-bitcode option that now gets a clang-importer with the correct triple.\r\n\r\n• Testing: A Swift regression test was added.\r\n",
      "score": 1.2341313
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10515",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10515/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10515/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10515/events",
      "html_url": "https://github.com/apple/swift/pull/10515",
      "id": 237979221,
      "number": 10515,
      "title": "Change NSKeyedUnarchiver method instead of adding overloads",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-22T21:27:23Z",
      "updated_at": "2017-06-22T22:54:49Z",
      "closed_at": "2017-06-22T22:54:49Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10515",
        "html_url": "https://github.com/apple/swift/pull/10515",
        "diff_url": "https://github.com/apple/swift/pull/10515.diff",
        "patch_url": "https://github.com/apple/swift/pull/10515.patch"
      },
      "body": "**What's in this pull request?**\r\nReverts and modifies the changes made in #10474. We'd prefer to take a different approach here.\r\n\r\nThe `unarchiveTopLevelObjectWithData` which returns `Any?` (instead of `AnyObject?`) was added in Swift 4 and has only shipped in the betas so far. Instead of adding new overloads which take different types, we should just fix this one and call it a day.",
      "score": 1.2341489
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10516",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10516/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10516/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10516/events",
      "html_url": "https://github.com/apple/swift/pull/10516",
      "id": 237988855,
      "number": 10516,
      "title": "Two really tiny fixes from code review feedback",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T22:12:58Z",
      "updated_at": "2017-06-22T22:49:26Z",
      "closed_at": "2017-06-22T22:49:26Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10516",
        "html_url": "https://github.com/apple/swift/pull/10516",
        "diff_url": "https://github.com/apple/swift/pull/10516.diff",
        "patch_url": "https://github.com/apple/swift/pull/10516.patch"
      },
      "body": "Thanks @jrose-apple. Changes should be NFC.",
      "score": 1.2343962
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10517",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10517/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10517/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10517/events",
      "html_url": "https://github.com/apple/swift/pull/10517",
      "id": 237990070,
      "number": 10517,
      "title": "[NFC] Improve some code clarity in SIL and TBDGen.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T22:19:05Z",
      "updated_at": "2017-06-23T22:05:52Z",
      "closed_at": "2017-06-23T22:05:50Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10517",
        "html_url": "https://github.com/apple/swift/pull/10517",
        "diff_url": "https://github.com/apple/swift/pull/10517.diff",
        "patch_url": "https://github.com/apple/swift/pull/10517.patch"
      },
      "body": "",
      "score": 1.2402043
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10518",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10518/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10518/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10518/events",
      "html_url": "https://github.com/apple/swift/pull/10518",
      "id": 237994799,
      "number": 10518,
      "title": "[4.0] Static exclusivity diagnostics handling of non-escaping closures passed as blocks.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-22T22:45:53Z",
      "updated_at": "2017-06-23T16:55:19Z",
      "closed_at": "2017-06-23T16:55:19Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10518",
        "html_url": "https://github.com/apple/swift/pull/10518",
        "diff_url": "https://github.com/apple/swift/pull/10518.diff",
        "patch_url": "https://github.com/apple/swift/pull/10518.patch"
      },
      "body": "CCC Info:\r\n\r\nExplanation: Static exclusivity diagnostics and its supporting analysis whitelist SIL patterns to ensure the diagnostic is sound. This needed to be expanded to handle the unusual case of nested non-escaping closures passed as blocks.\r\n\r\nScope of Issue: This broadens an assert that was recently added on the 4.0 branch. It avoids compiler crashes caused by that assert.\r\n\r\nRadar: <rdar://problem/32928233> [Exclusivity] Fix static diagnostics to handle non-escaping '@convention(block)' arguments.\r\n\r\nRisk: This change strictly decreases risk of compiler crashes. The risk is that code that breaks the exclusivity model could now pass diagnostics, but this possibility is almost inconceivable.\r\n\r\nTesting: All usual tests on swift-4.0-branch. Benchmarks. Source compatibility. Other.\r\n",
      "score": 1.2390753
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10519",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10519/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10519/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10519/events",
      "html_url": "https://github.com/apple/swift/pull/10519",
      "id": 237994957,
      "number": 10519,
      "title": "WIP getting master-next up and running with clang::ModuleMacro",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 12,
      "created_at": "2017-06-22T22:46:52Z",
      "updated_at": "2017-07-25T22:09:21Z",
      "closed_at": "2017-06-30T21:52:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10519",
        "html_url": "https://github.com/apple/swift/pull/10519",
        "diff_url": "https://github.com/apple/swift/pull/10519.diff",
        "patch_url": "https://github.com/apple/swift/pull/10519.patch"
      },
      "body": "For pre-review purposes, mostly. The interesting commit is the one about ModuleMacro, though really we should be able to apply that to regular-master when it's ready.",
      "score": 1.2833729
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10520",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10520/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10520/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10520/events",
      "html_url": "https://github.com/apple/swift/pull/10520",
      "id": 237996639,
      "number": 10520,
      "title": "Allow Codable classes to share an Encoder with superclass",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T22:57:13Z",
      "updated_at": "2017-06-23T19:48:15Z",
      "closed_at": "2017-06-23T19:48:09Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10520",
        "html_url": "https://github.com/apple/swift/pull/10520",
        "diff_url": "https://github.com/apple/swift/pull/10520.diff",
        "patch_url": "https://github.com/apple/swift/pull/10520.patch"
      },
      "body": "**What's in this pull request?**\r\nAddresses [SR-5277](https://bugs.swift.org/browse/SR-5277).\r\n\r\nOn encode, we previously treated every container request as a push; instead, we should allow the same container type to be requested multiple times so a class can pass its Encoder directly to its superclass if it needs to.",
      "score": 1.2398587
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10521",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10521/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10521/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10521/events",
      "html_url": "https://github.com/apple/swift/pull/10521",
      "id": 237996688,
      "number": 10521,
      "title": "[overlay] Fix availability in INSearchCallHistoryIntent",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T22:57:29Z",
      "updated_at": "2017-06-23T18:06:13Z",
      "closed_at": "2017-06-23T18:06:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10521",
        "html_url": "https://github.com/apple/swift/pull/10521",
        "diff_url": "https://github.com/apple/swift/pull/10521.diff",
        "patch_url": "https://github.com/apple/swift/pull/10521.patch"
      },
      "body": "",
      "score": 1.2394376
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10522",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10522/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10522/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10522/events",
      "html_url": "https://github.com/apple/swift/pull/10522",
      "id": 237999187,
      "number": 10522,
      "title": "[4.0] [ConstraintSolver] Use a flag to prevent solver from removing possible solutions",
      "user": {
        "login": "xedin",
        "id": 21240,
        "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xedin",
        "html_url": "https://github.com/xedin",
        "followers_url": "https://api.github.com/users/xedin/followers",
        "following_url": "https://api.github.com/users/xedin/following{/other_user}",
        "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
        "organizations_url": "https://api.github.com/users/xedin/orgs",
        "repos_url": "https://api.github.com/users/xedin/repos",
        "events_url": "https://api.github.com/users/xedin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xedin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-22T23:13:40Z",
      "updated_at": "2017-06-23T16:42:17Z",
      "closed_at": "2017-06-23T16:42:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10522",
        "html_url": "https://github.com/apple/swift/pull/10522",
        "diff_url": "https://github.com/apple/swift/pull/10522.diff",
        "patch_url": "https://github.com/apple/swift/pull/10522.patch"
      },
      "body": "* Description: In some situations e.g. while trying to shrink domains of the type\r\nvariables before attempting search, use a flag to tell constraint\r\nsystem to retain all of the viable solutions otherwise solver could\r\nloose some of the information required to produce complete solution.\r\n\r\n* Scope of the issue: Type Checker changes to allow `shrink` to be more precise.\r\n\r\n* Risk: Low.\r\n\r\n* Tested: New test cases added, Swift CI.\r\n\r\n* Reviewed by: Mark Lacey.\r\n\r\n* Resolves: rdar://problem/32726044\r\n\r\n(cherry picked from commit 6231f85be946bb28c56f8eeb78697ed5630a3138)\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.2391857
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10523",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10523/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10523/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10523/events",
      "html_url": "https://github.com/apple/swift/pull/10523",
      "id": 238004106,
      "number": 10523,
      "title": "Change the signature of reportToDebugger and _swift_runtime_on_report to avoid using 'bool'",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-22T23:48:49Z",
      "updated_at": "2017-06-23T04:22:27Z",
      "closed_at": "2017-06-23T04:22:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10523",
        "html_url": "https://github.com/apple/swift/pull/10523",
        "diff_url": "https://github.com/apple/swift/pull/10523.diff",
        "patch_url": "https://github.com/apple/swift/pull/10523.patch"
      },
      "body": "Change the signature of reportToDebugger and _swift_runtime_on_report to avoid using 'bool'. It's much easier to work with native-width integers only in LLDB.",
      "score": 1.2363356
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10524",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10524/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10524/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10524/events",
      "html_url": "https://github.com/apple/swift/pull/10524",
      "id": 238009924,
      "number": 10524,
      "title": "[Markup] Print Tags in documentation comment XML",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-23T00:33:49Z",
      "updated_at": "2017-06-23T20:39:32Z",
      "closed_at": "2017-06-23T20:39:30Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10524",
        "html_url": "https://github.com/apple/swift/pull/10524",
        "diff_url": "https://github.com/apple/swift/pull/10524.diff",
        "patch_url": "https://github.com/apple/swift/pull/10524.patch"
      },
      "body": "This information needs to be picked up through SourceKit. It might be\r\nuseful as both metadata for sorting/filtering as well as presentation,\r\nso it makes sense to print it in the normal XML inside CommentParts.\r\n\r\nrdar://problem/32877771",
      "score": 1.2406435
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10525",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10525/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10525/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10525/events",
      "html_url": "https://github.com/apple/swift/pull/10525",
      "id": 238030498,
      "number": 10525,
      "title": "[4.0] [ClangImporter] Fix indirection mismatch surrounding swift_newtype",
      "user": {
        "login": "milseman",
        "id": 235334,
        "avatar_url": "https://avatars0.githubusercontent.com/u/235334?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/milseman",
        "html_url": "https://github.com/milseman",
        "followers_url": "https://api.github.com/users/milseman/followers",
        "following_url": "https://api.github.com/users/milseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/milseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/milseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/milseman/subscriptions",
        "organizations_url": "https://api.github.com/users/milseman/orgs",
        "repos_url": "https://api.github.com/users/milseman/repos",
        "events_url": "https://api.github.com/users/milseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/milseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-23T03:23:00Z",
      "updated_at": "2017-06-23T21:02:49Z",
      "closed_at": "2017-06-23T16:41:03Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10525",
        "html_url": "https://github.com/apple/swift/pull/10525",
        "diff_url": "https://github.com/apple/swift/pull/10525.diff",
        "patch_url": "https://github.com/apple/swift/pull/10525.patch"
      },
      "body": "<!-- What's in this pull request? -->\r\n4.0 cherry-pick version of https://github.com/apple/swift/pull/10254.\r\n\r\nCCC\r\nExplanation: We were passing swift_newtype-ed typedefs with a wrong level of indirection when passed as inout self, as we were trying to model value semantics of the pointee rather the pointer. This fixes that and simplifies SILGen a little.\r\nScope: Limited, as it is in the intersection of swift_newtype and import-as-member. However, when it does come up, it's disastrous.\r\nRadar (and possibly SR Issue): rdar://problem/26899737\r\nRisk: Low, has limited scope. There is a chance someone could of been relying on the broken behavior, but that's unlikely.\r\nTesting: Full CI testing.\r\n",
      "score": 1.2406582
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10527",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10527/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10527/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10527/events",
      "html_url": "https://github.com/apple/swift/pull/10527",
      "id": 238040618,
      "number": 10527,
      "title": "[Syntax] [NFC] Remove subclasses of SyntaxData and move validation logic into Syntax",
      "user": {
        "login": "harlanhaskins",
        "id": 853032,
        "avatar_url": "https://avatars1.githubusercontent.com/u/853032?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harlanhaskins",
        "html_url": "https://github.com/harlanhaskins",
        "followers_url": "https://api.github.com/users/harlanhaskins/followers",
        "following_url": "https://api.github.com/users/harlanhaskins/following{/other_user}",
        "gists_url": "https://api.github.com/users/harlanhaskins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/harlanhaskins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/harlanhaskins/subscriptions",
        "organizations_url": "https://api.github.com/users/harlanhaskins/orgs",
        "repos_url": "https://api.github.com/users/harlanhaskins/repos",
        "events_url": "https://api.github.com/users/harlanhaskins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/harlanhaskins/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-23T04:55:37Z",
      "updated_at": "2017-06-23T22:44:24Z",
      "closed_at": "2017-06-23T22:34:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10527",
        "html_url": "https://github.com/apple/swift/pull/10527",
        "diff_url": "https://github.com/apple/swift/pull/10527.diff",
        "patch_url": "https://github.com/apple/swift/pull/10527.patch"
      },
      "body": "This flattens SyntaxData into a single final class and makes assertions/structural validation an explicit part of Syntax.\r\n\r\nIt also generalizes the behavior of lazily instantiating children of SyntaxData nodes and simplifies node creation in general.",
      "score": 1.2426723
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10528",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10528/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10528/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10528/events",
      "html_url": "https://github.com/apple/swift/pull/10528",
      "id": 238043263,
      "number": 10528,
      "title": "[4.0] Improve reporting of @objc inference issues from the Swift runtime",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-23T05:19:50Z",
      "updated_at": "2017-06-23T17:05:21Z",
      "closed_at": "2017-06-23T17:05:21Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10528",
        "html_url": "https://github.com/apple/swift/pull/10528",
        "diff_url": "https://github.com/apple/swift/pull/10528.diff",
        "patch_url": "https://github.com/apple/swift/pull/10528.patch"
      },
      "body": "Extend Swift runtime issue reporting for @objc inference to include details about the declaration of the method (that is missing the @objc annotation) and a suggested fix-it. This changes the ABI of RuntimeErrorDetails, so we're also bumping the version.\r\n\r\n• Explanation: Swift runtime issues for Obj-C implicit entrypoint are not pointing to the declaration where the @objc attribute needs to be added.\r\n• Scope of Issue:  Users who have bugs due to implicit Obj-C entrypoints might now easily find out where is the declaration that is missing the @objc attribute.\r\n• Radar:  <rdar://problem/32933687>\r\n• Risk:  Low.  We're only touching the codepaths that are triggered when Swift generates a runtime issue.\r\n• Testing:  I verified that with the patch, LLDB sees the note properly (and the LLDB PR has a test for it).\r\n",
      "score": 1.2414526
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10529",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10529/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10529/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10529/events",
      "html_url": "https://github.com/apple/swift/pull/10529",
      "id": 238043818,
      "number": 10529,
      "title": "[4.0] Change the signature of reportToDebugger and _swift_runtime_on_report to avoid using 'bool'",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-23T05:24:02Z",
      "updated_at": "2017-06-23T14:56:16Z",
      "closed_at": "2017-06-23T14:56:16Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10529",
        "html_url": "https://github.com/apple/swift/pull/10529",
        "diff_url": "https://github.com/apple/swift/pull/10529.diff",
        "patch_url": "https://github.com/apple/swift/pull/10529.patch"
      },
      "body": "Change the signature of reportToDebugger and _swift_runtime_on_report to avoid using 'bool'. It's much easier to work with native-width integers only in LLDB.",
      "score": 1.240943
    }
  ]
}

