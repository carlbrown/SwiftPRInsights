{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10742",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10742/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10742/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10742/events",
      "html_url": "https://github.com/apple/swift/pull/10742",
      "id": 239926989,
      "number": 10742,
      "title": "[GSB] Eliminate the ridiculous ad hoc recursion-breaking code.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-01T04:51:49Z",
      "updated_at": "2017-07-01T06:34:08Z",
      "closed_at": "2017-07-01T05:12:30Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10742",
        "html_url": "https://github.com/apple/swift/pull/10742",
        "diff_url": "https://github.com/apple/swift/pull/10742.diff",
        "patch_url": "https://github.com/apple/swift/pull/10742.patch"
      },
      "body": "We're now properly delaying all recursive requirements, so we no\r\nlonger need to compute `grossCount`.",
      "score": 1.3605763
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10743",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10743/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10743/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10743/events",
      "html_url": "https://github.com/apple/swift/pull/10743",
      "id": 239927247,
      "number": 10743,
      "title": "[viewcfg] Reformulate, expand the docs on viewcfg.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-07-01T04:58:41Z",
      "updated_at": "2017-07-17T20:08:28Z",
      "closed_at": "2017-07-17T18:52:20Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10743",
        "html_url": "https://github.com/apple/swift/pull/10743",
        "diff_url": "https://github.com/apple/swift/pull/10743.diff",
        "patch_url": "https://github.com/apple/swift/pull/10743.patch"
      },
      "body": "Specifically, I tried to make it clearer that viewcfg does not rely on any type\r\ninformation or declarations (i.e. it can dump raw textual CFGs). This also means\r\nthat it can be used in an editor to dump CFGs at your cursor?!\r\n\r\nThanks Erik for showing me this!",
      "score": 1.4733125
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10744",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10744/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10744/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10744/events",
      "html_url": "https://github.com/apple/swift/pull/10744",
      "id": 239944327,
      "number": 10744,
      "title": "Diagnostic adjustment DeclBaseName -> Identifier",
      "user": {
        "login": "ahoppen",
        "id": 4062178,
        "avatar_url": "https://avatars3.githubusercontent.com/u/4062178?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ahoppen",
        "html_url": "https://github.com/ahoppen",
        "followers_url": "https://api.github.com/users/ahoppen/followers",
        "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
        "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
        "organizations_url": "https://api.github.com/users/ahoppen/orgs",
        "repos_url": "https://api.github.com/users/ahoppen/repos",
        "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ahoppen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-01T11:38:59Z",
      "updated_at": "2017-07-12T14:12:14Z",
      "closed_at": "2017-07-06T11:26:35Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10744",
        "html_url": "https://github.com/apple/swift/pull/10744",
        "diff_url": "https://github.com/apple/swift/pull/10744.diff",
        "patch_url": "https://github.com/apple/swift/pull/10744.patch"
      },
      "body": "This addresses the outstanding change from https://github.com/apple/swift/pull/9976#pullrequestreview-43264141",
      "score": 1.3974602
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10745",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10745/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10745/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10745/events",
      "html_url": "https://github.com/apple/swift/pull/10745",
      "id": 239944350,
      "number": 10745,
      "title": "[Diag] Change function diagnostics to take a DeclName parameter",
      "user": {
        "login": "ahoppen",
        "id": 4062178,
        "avatar_url": "https://avatars3.githubusercontent.com/u/4062178?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ahoppen",
        "html_url": "https://github.com/ahoppen",
        "followers_url": "https://api.github.com/users/ahoppen/followers",
        "following_url": "https://api.github.com/users/ahoppen/following{/other_user}",
        "gists_url": "https://api.github.com/users/ahoppen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ahoppen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ahoppen/subscriptions",
        "organizations_url": "https://api.github.com/users/ahoppen/orgs",
        "repos_url": "https://api.github.com/users/ahoppen/repos",
        "events_url": "https://api.github.com/users/ahoppen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ahoppen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-01T11:39:45Z",
      "updated_at": "2017-07-12T14:12:30Z",
      "closed_at": "2017-07-06T11:26:57Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10745",
        "html_url": "https://github.com/apple/swift/pull/10745",
        "diff_url": "https://github.com/apple/swift/pull/10745.diff",
        "patch_url": "https://github.com/apple/swift/pull/10745.patch"
      },
      "body": "The second commit changes several diagnostic parameters from `Identifier` or `DeclBaseName` to `DeclName` so that they provide richer error messages that include the function's parameters. @jrose-apple and me composed the list of diagnostics to change during a WWDC lab.",
      "score": 1.397467
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10746",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10746/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10746/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10746/events",
      "html_url": "https://github.com/apple/swift/pull/10746",
      "id": 240031527,
      "number": 10746,
      "title": "[4.0] [QoI] Improve the fix-it for out-of-order arguments",
      "user": {
        "login": "xedin",
        "id": 21240,
        "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xedin",
        "html_url": "https://github.com/xedin",
        "followers_url": "https://api.github.com/users/xedin/followers",
        "following_url": "https://api.github.com/users/xedin/following{/other_user}",
        "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
        "organizations_url": "https://api.github.com/users/xedin/orgs",
        "repos_url": "https://api.github.com/users/xedin/repos",
        "events_url": "https://api.github.com/users/xedin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xedin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-02T20:07:24Z",
      "updated_at": "2017-07-03T02:05:01Z",
      "closed_at": "2017-07-03T02:05:01Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10746",
        "html_url": "https://github.com/apple/swift/pull/10746",
        "diff_url": "https://github.com/apple/swift/pull/10746.diff",
        "patch_url": "https://github.com/apple/swift/pull/10746.patch"
      },
      "body": "* Description: Change the fix-it to move the argument to its correct location in one go.\r\nThis happens by removing it from one location and inserting it in the other\r\n(as opposed to the original implementation which swapped one argument with\r\nthe preceding one). The commas separating the arguments are adjusted\r\nto match the moved argument.\r\n\r\n* Scope of the issue: diagnostic improvements for fix-its related to out-of-order arguments.\r\n\r\n* Risk: Low.\r\n\r\n* Tested: Added new tests for reordering regular arguments, variadic arguments, and function arguments, Swift CI.\r\n\r\n* Reviewed by: Pavel Yaskevich, Mark Lacey.\r\n\r\n* Resolves: rdar://problem/31849281\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.3887198
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10748",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10748/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10748/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10748/events",
      "html_url": "https://github.com/apple/swift/pull/10748",
      "id": 240105102,
      "number": 10748,
      "title": "[swiftc (41 vs. 5577)] Add crasher in swift::TypeAliasDecl::getUnboundGenericType(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T08:45:40Z",
      "updated_at": "2017-07-03T10:35:24Z",
      "closed_at": "2017-07-03T10:35:24Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10748",
        "html_url": "https://github.com/apple/swift/pull/10748",
        "diff_url": "https://github.com/apple/swift/pull/10748.diff",
        "patch_url": "https://github.com/apple/swift/pull/10748.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeAliasDecl::getUnboundGenericType(...)`.\n\nCurrent number of unresolved compiler crashers: 41 (5577 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `getGenericParams()` added on 2016-12-15 by you in commit 2c6b9f71 :-)\n\nAssertion failure in [`lib/AST/Decl.cpp (line 2410)`](https://github.com/apple/swift/blob/dacbb8750fa1e074e9bdea055201975cd1e7c2ec/lib/AST/Decl.cpp#L2410):\n\n```\nAssertion `getGenericParams()' failed.\n\nWhen executing: swift::UnboundGenericType *swift::TypeAliasDecl::getUnboundGenericType() const\n```\n\nAssertion context:\n\n```c++\n  // Set the interface type of this declaration.\n  setInterfaceType(MetatypeType::get(aliasTy, Ctx));\n}\n\nUnboundGenericType *TypeAliasDecl::getUnboundGenericType() const {\n  assert(getGenericParams());\n  return UnboundGenericType::get(\n      const_cast<TypeAliasDecl *>(this),\n      getDeclContext()->getDeclaredTypeOfContext(),\n      getASTContext());\n}\n```\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f6b83957390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f6b81e7c428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f6b81e7e02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f6b81e74bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f6b81e74c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x0000000001557feb swift::TypeAliasDecl::getUnboundGenericType() const (/path/to/swift/bin/swift+0x1557feb)\n8 0x0000000001443557 noteArchetypeSource(swift::TypeLoc const&, swift::ArchetypeType*, swift::constraints::ConstraintSystem&) (/path/to/swift/bin/swift+0x1443557)\n9 0x00000000014432be (anonymous namespace)::FailureDiagnosis::diagnoseUnboundArchetype(swift::ArchetypeType*, swift::Expr*) (/path/to/swift/bin/swift+0x14432be)\n10 0x000000000141d903 (anonymous namespace)::FailureDiagnosis::diagnoseAmbiguity(swift::Expr*) (/path/to/swift/bin/swift+0x141d903)\n11 0x000000000141a723 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141a723)\n12 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n13 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n14 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n15 0x0000000001354234 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*, bool) (/path/to/swift/bin/swift+0x1354234)\n16 0x0000000001354496 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int, bool) (/path/to/swift/bin/swift+0x1354496)\n17 0x000000000136c508 validatePatternBindingEntries(swift::TypeChecker&, swift::PatternBindingDecl*) (/path/to/swift/bin/swift+0x136c508)\n18 0x00000000013668dd (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13668dd)\n19 0x000000000137749b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x137749b)\n20 0x000000000136698e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x136698e)\n21 0x0000000001366793 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1366793)\n22 0x00000000013f0fb4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f0fb4)\n23 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n24 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n25 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n26 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n27 0x00007f6b81e67830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n28 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.396311
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10749",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10749/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10749/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10749/events",
      "html_url": "https://github.com/apple/swift/pull/10749",
      "id": 240133430,
      "number": 10749,
      "title": "[swiftc (42 vs. 5577)] Add crasher in swift::GenericSignature::enumeratePairedRequirements",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T10:37:23Z",
      "updated_at": "2017-07-03T12:11:00Z",
      "closed_at": "2017-07-03T12:11:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10749",
        "html_url": "https://github.com/apple/swift/pull/10749",
        "diff_url": "https://github.com/apple/swift/pull/10749.diff",
        "patch_url": "https://github.com/apple/swift/pull/10749.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignature::enumeratePairedRequirements`.\n\nCurrent number of unresolved compiler crashers: 42 (5577 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f54410ef390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x000000000157bec8 swift::GenericSignature::enumeratePairedRequirements(llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>) const (/path/to/swift/bin/swift+0x157bec8)\n4 0x000000000157d75f swift::GenericSignature::getSubstitutionMap(llvm::ArrayRef<swift::Substitution>) const (/path/to/swift/bin/swift+0x157d75f)\n5 0x00000000015cc9d7 swift::SpecializedProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cc9d7)\n6 0x00000000015cc2a2 swift::ProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cc2a2)\n7 0x00000000015cbcb9 swift::ProtocolConformance::getTypeWitness(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cbcb9)\n8 0x00000000015e259f getMemberForBaseType(llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::Type, swift::Type, swift::AssociatedTypeDecl*, swift::Identifier, swift::SubstOptions) (/path/to/swift/bin/swift+0x15e259f)\n9 0x00000000015e7143 llvm::Optional<swift::Type> llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>::callback_fn<substType(swift::Type, llvm::function_ref<swift::Type (swift::SubstitutableType*)>, llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::SubstOptions)::$_18>(long, swift::TypeBase*) (/path/to/swift/bin/swift+0x15e7143)\n10 0x00000000015e3489 swift::Type::transformRec(llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>) const (/path/to/swift/bin/swift+0x15e3489)\n11 0x00000000015de735 swift::Type::subst(swift::SubstitutionMap const&, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15de735)\n12 0x00000000015ccaf6 swift::SpecializedProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15ccaf6)\n13 0x00000000015cc2a2 swift::ProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cc2a2)\n14 0x00000000015cbcb9 swift::ProtocolConformance::getTypeWitness(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15cbcb9)\n15 0x0000000001588d01 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x1588d01)\n16 0x000000000159160b swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x159160b)\n17 0x000000000159108c swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x159108c)\n18 0x0000000001588d90 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x1588d90)\n19 0x000000000159160b swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x159160b)\n20 0x000000000159108c swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x159108c)\n21 0x0000000001587e06 swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance(llvm::PointerUnion<swift::AssociatedTypeDecl*, swift::TypeDecl*>, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x1587e06)\n22 0x00000000015872b3 swift::GenericSignatureBuilder::PotentialArchetype::getNestedArchetypeAnchor(swift::Identifier, swift::GenericSignatureBuilder&, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x15872b3)\n23 0x00000000015956e3 getLocalAnchor(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x15956e3)\n24 0x000000000159428c swift::GenericSignatureBuilder::checkSameTypeConstraints(llvm::ArrayRef<swift::GenericTypeParamType*>, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x159428c)\n25 0x00000000015920ba swift::GenericSignatureBuilder::finalize(swift::SourceLoc, llvm::ArrayRef<swift::GenericTypeParamType*>, bool) (/path/to/swift/bin/swift+0x15920ba)\n26 0x0000000001597ff3 swift::GenericSignatureBuilder::computeGenericSignature(swift::SourceLoc, bool) (/path/to/swift/bin/swift+0x1597ff3)\n27 0x000000000155b6f8 swift::ProtocolDecl::computeRequirementSignature() (/path/to/swift/bin/swift+0x155b6f8)\n28 0x00000000013977c8 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x13977c8)\n29 0x00000000013686c0 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x13686c0)\n30 0x000000000137821f (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x137821f)\n31 0x0000000001366894 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1366894)\n32 0x0000000001376d3b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x1376d3b)\n33 0x00000000013668c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13668c4)\n34 0x0000000001366793 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1366793)\n35 0x00000000013f0fb4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f0fb4)\n36 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n37 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n38 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n39 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n40 0x00007f543f5ff830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n41 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.3975255
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10750",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10750/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10750/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10750/events",
      "html_url": "https://github.com/apple/swift/pull/10750",
      "id": 240154741,
      "number": 10750,
      "title": "[swiftc (43 vs. 5577)] Add crasher in swift::lookupVisibleMemberDecls",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T12:14:11Z",
      "updated_at": "2017-07-03T13:56:32Z",
      "closed_at": "2017-07-03T13:56:32Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10750",
        "html_url": "https://github.com/apple/swift/pull/10750",
        "diff_url": "https://github.com/apple/swift/pull/10750.diff",
        "patch_url": "https://github.com/apple/swift/pull/10750.patch"
      },
      "body": "Add test case for crash triggered in `swift::lookupVisibleMemberDecls`.\n\nCurrent number of unresolved compiler crashers: 43 (5577 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `!BaseTy->hasUnboundGenericType()` added on 2017-03-20 by you in commit 573e832f :-)\n\nAssertion failure in [`lib/AST/LookupVisibleDecls.cpp (line 784)`](https://github.com/apple/swift/blob/f0d485c8339f84f707113f800c526fea4c5b7f3d/lib/AST/LookupVisibleDecls.cpp#L784):\n\n```\nAssertion `!BaseTy->hasUnboundGenericType()' failed.\n\nWhen executing: virtual void (anonymous namespace)::OverrideFilteringConsumer::foundDecl(swift::ValueDecl *, swift::DeclVisibilityKind)\n```\n\nAssertion context:\n\n```c++\n\n    // Does it make sense to substitute types?\n\n    // Don't pass UnboundGenericType here. If you see this assertion\n    // being hit, fix the caller, don't remove it.\n    assert(!BaseTy->hasUnboundGenericType());\n\n    // If the base type is AnyObject, we might be doing a dynamic\n    // lookup, so the base type won't match the type of the member's\n    // context type.\n    //\n```\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f6cbf54b390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f6cbda70428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f6cbda7202a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f6cbda68bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f6cbda68c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015aa1a2 (anonymous namespace)::OverrideFilteringConsumer::foundDecl(swift::ValueDecl*, swift::DeclVisibilityKind) (/path/to/swift/bin/swift+0x15aa1a2)\n8 0x00000000015ab3f0 lookupTypeMembers(swift::Type, swift::Type, swift::VisibleDeclConsumer&, swift::DeclContext const*, (anonymous namespace)::LookupState, swift::DeclVisibilityKind, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15ab3f0)\n9 0x00000000015a8e40 lookupVisibleMemberDeclsImpl(swift::Type, swift::VisibleDeclConsumer&, swift::DeclContext const*, (anonymous namespace)::LookupState, swift::DeclVisibilityKind, swift::LazyResolver*, swift::GenericSignatureBuilder*, llvm::SmallPtrSet<swift::TypeDecl*, 8u>&) (/path/to/swift/bin/swift+0x15a8e40)\n10 0x00000000015a8604 lookupVisibleMemberDecls(swift::Type, swift::VisibleDeclConsumer&, swift::DeclContext const*, (anonymous namespace)::LookupState, swift::DeclVisibilityKind, swift::LazyResolver*, swift::GenericSignatureBuilder*) (/path/to/swift/bin/swift+0x15a8604)\n11 0x00000000015a8754 swift::lookupVisibleMemberDecls(swift::VisibleDeclConsumer&, swift::Type, swift::DeclContext const*, swift::LazyResolver*, bool, swift::GenericSignatureBuilder*) (/path/to/swift/bin/swift+0x15a8754)\n12 0x000000000139a9c9 swift::TypeChecker::performTypoCorrection(swift::DeclContext*, swift::DeclRefKind, swift::Type, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>, swift::LookupResult&, swift::GenericSignatureBuilder*, unsigned int) (/path/to/swift/bin/swift+0x139a9c9)\n13 0x000000000143408a (anonymous namespace)::FailureDiagnosis::diagnoseUnviableLookupResults(swift::constraints::MemberLookupResult&, swift::Type, swift::Expr*, swift::DeclName, swift::DeclNameLoc, swift::SourceLoc) (/path/to/swift/bin/swift+0x143408a)\n14 0x0000000001428dae (anonymous namespace)::FailureDiagnosis::diagnoseMemberFailures(swift::Expr*, swift::Expr*, swift::constraints::ConstraintKind, swift::DeclName, swift::FunctionRefKind, swift::constraints::ConstraintLocator*, llvm::Optional<std::function<bool (llvm::ArrayRef<swift::constraints::OverloadChoice>)> >, bool) (/path/to/swift/bin/swift+0x1428dae)\n15 0x000000000141f76b swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x141f76b)\n16 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n17 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n18 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n19 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n20 0x0000000001422f3a (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet<TCCFlags, unsigned int>, swift::ExprTypeCheckListener*, bool) (/path/to/swift/bin/swift+0x1422f3a)\n21 0x0000000001439438 (anonymous namespace)::FailureDiagnosis::diagnoseClosureExpr(swift::ClosureExpr*, swift::Type, std::function<bool (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x1439438)\n22 0x000000000142006c swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x142006c)\n23 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n24 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n25 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n26 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n27 0x0000000001422f3a (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet<TCCFlags, unsigned int>, swift::ExprTypeCheckListener*, bool) (/path/to/swift/bin/swift+0x1422f3a)\n28 0x0000000001439438 (anonymous namespace)::FailureDiagnosis::diagnoseClosureExpr(swift::ClosureExpr*, swift::Type, std::function<bool (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x1439438)\n29 0x000000000142006c swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x142006c)\n30 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n31 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n32 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n33 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n34 0x00000000013d3016 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13d3016)\n35 0x00000000013d2836 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13d2836)\n36 0x00000000013f1020 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f1020)\n37 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n38 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n39 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n40 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n41 0x00007f6cbda5b830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n42 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.3986809
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10751",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10751/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10751/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10751/events",
      "html_url": "https://github.com/apple/swift/pull/10751",
      "id": 240181023,
      "number": 10751,
      "title": "[swiftc (44 vs. 5577)] Add crasher in swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T13:57:57Z",
      "updated_at": "2017-07-03T15:24:47Z",
      "closed_at": "2017-07-03T15:24:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10751",
        "html_url": "https://github.com/apple/swift/pull/10751",
        "diff_url": "https://github.com/apple/swift/pull/10751.diff",
        "patch_url": "https://github.com/apple/swift/pull/10751.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(...)`.\n\nCurrent number of unresolved compiler crashers: 44 (5577 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f93e4adb390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x0000000001583779 formProtocolRelativeType(swift::ProtocolDecl*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x1583779)\n4 0x0000000001583790 formProtocolRelativeType(swift::ProtocolDecl*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x1583790)\n5 0x00000000015835c6 swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(swift::GenericSignatureBuilder::PotentialArchetype*) const (/path/to/swift/bin/swift+0x15835c6)\n6 0x000000000158f9d0 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x158f9d0)\n7 0x000000000158da4b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x158da4b)\n8 0x00000000015993bd swift::GenericSignatureBuilder::InferRequirementsWalker::walkToTypePost(swift::Type) (/path/to/swift/bin/swift+0x15993bd)\n9 0x00000000015ef278 swift::Type::walk(swift::TypeWalker&) const (/path/to/swift/bin/swift+0x15ef278)\n10 0x000000000159f97e swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_22>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x159f97e)\n11 0x0000000001599202 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_54>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1599202)\n12 0x000000000158b9b1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x158b9b1)\n13 0x000000000158bcde swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x158bcde)\n14 0x000000000158fa95 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x158fa95)\n15 0x000000000158da4b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x158da4b)\n16 0x000000000158bc43 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x158bc43)\n17 0x000000000158fa95 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x158fa95)\n18 0x000000000158da4b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x158da4b)\n19 0x0000000001597e5d swift::GenericSignatureBuilder::addGenericSignature(swift::GenericSignature*) (/path/to/swift/bin/swift+0x1597e5d)\n20 0x0000000001393d7a swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1393d7a)\n21 0x0000000001394bd1 checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1394bd1)\n22 0x0000000001394889 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x1394889)\n23 0x000000000137a9a9 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x137a9a9)\n24 0x00000000013668b4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13668b4)\n25 0x000000000137853b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x137853b)\n26 0x0000000001366894 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1366894)\n27 0x0000000001376d3b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x1376d3b)\n28 0x00000000013668c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13668c4)\n29 0x0000000001366793 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1366793)\n30 0x00000000013f0fb4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f0fb4)\n31 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n32 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n33 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n34 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n35 0x00007f93e2feb830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n36 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.3998088
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10752",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10752/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10752/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10752/events",
      "html_url": "https://github.com/apple/swift/pull/10752",
      "id": 240205395,
      "number": 10752,
      "title": "[swiftc (45 vs. 5577)] Add crasher in swift::CompleteGenericTypeResolver::resolveDependentMemberType",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T15:27:55Z",
      "updated_at": "2017-07-03T16:55:12Z",
      "closed_at": "2017-07-03T16:55:12Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10752",
        "html_url": "https://github.com/apple/swift/pull/10752",
        "diff_url": "https://github.com/apple/swift/pull/10752.diff",
        "patch_url": "https://github.com/apple/swift/pull/10752.patch"
      },
      "body": "Add test case for crash triggered in `swift::CompleteGenericTypeResolver::resolveDependentMemberType`.\n\nCurrent number of unresolved compiler crashers: 45 (5577 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f115dae0390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f115c005428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f115c00702a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x0000000003a5f5cd llvm::llvm_unreachable_internal(char const*, char const*, unsigned int) (/path/to/swift/bin/swift+0x3a5f5cd)\n6 0x0000000001393ca0 swift::CompleteGenericTypeResolver::resolveDependentMemberType(swift::Type, swift::DeclContext*, swift::SourceRange, swift::ComponentIdentTypeRepr*) (/path/to/swift/bin/swift+0x1393ca0)\n7 0x00000000013e30af resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13e30af)\n8 0x00000000013e2e3f resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13e2e3f)\n9 0x00000000013e2a39 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13e2a39)\n10 0x00000000013e37a8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13e37a8)\n11 0x00000000013e36ac swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13e36ac)\n12 0x00000000013e20b0 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13e20b0)\n13 0x000000000139c67e validateParameterType(swift::ParamDecl*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&, swift::TypeChecker&) (/path/to/swift/bin/swift+0x139c67e)\n14 0x000000000139c519 swift::TypeChecker::typeCheckParameterList(swift::ParameterList*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x139c519)\n15 0x0000000001394c8d checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1394c8d)\n16 0x0000000001394908 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x1394908)\n17 0x0000000001379174 (anonymous namespace)::DeclChecker::visitConstructorDecl(swift::ConstructorDecl*) (/path/to/swift/bin/swift+0x1379174)\n18 0x00000000013668a4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13668a4)\n19 0x000000000137853b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x137853b)\n20 0x0000000001366894 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1366894)\n21 0x0000000001366793 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1366793)\n22 0x00000000013f0fb4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f0fb4)\n23 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n24 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n25 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n26 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n27 0x00007f115bff0830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n28 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.40085
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10753",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10753/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10753/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10753/events",
      "html_url": "https://github.com/apple/swift/pull/10753",
      "id": 240225240,
      "number": 10753,
      "title": "[swiftc (46 vs. 5577)] Add crasher in swift::TypeBase::getDesugaredType(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T16:58:06Z",
      "updated_at": "2017-07-03T18:26:08Z",
      "closed_at": "2017-07-03T18:26:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10753",
        "html_url": "https://github.com/apple/swift/pull/10753",
        "diff_url": "https://github.com/apple/swift/pull/10753.diff",
        "patch_url": "https://github.com/apple/swift/pull/10753.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getDesugaredType(...)`.\n\nCurrent number of unresolved compiler crashers: 46 (5577 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007f48e24bf390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00000000015dd970 swift::TypeBase::getDesugaredType() (/path/to/swift/bin/swift+0x15dd970)\n4 0x0000000000ff53fb swift::TypeBase::mayHaveMembers() (/path/to/swift/bin/swift+0xff53fb)\n5 0x00000000014400b6 (anonymous namespace)::CalleeCandidateInfo::collectCalleeCandidates(swift::Expr*, bool) (/path/to/swift/bin/swift+0x14400b6)\n6 0x000000000143be81 (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x143be81)\n7 0x000000000141f532 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x141f532)\n8 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n9 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n10 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n11 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n12 0x0000000001422f3a (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet<TCCFlags, unsigned int>, swift::ExprTypeCheckListener*, bool) (/path/to/swift/bin/swift+0x1422f3a)\n13 0x0000000001421df3 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x1421df3)\n14 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n15 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n16 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n17 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n18 0x00000000013d3016 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13d3016)\n19 0x00000000013d2836 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13d2836)\n20 0x00000000013f1020 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f1020)\n21 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n22 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n23 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n24 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n25 0x00007f48e09cf830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n26 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.401896
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10754",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10754/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10754/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10754/events",
      "html_url": "https://github.com/apple/swift/pull/10754",
      "id": 240235150,
      "number": 10754,
      "title": "SIL Mode Fixes/Improvements",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-03T17:56:20Z",
      "updated_at": "2017-07-03T18:30:08Z",
      "closed_at": "2017-07-03T18:30:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10754",
        "html_url": "https://github.com/apple/swift/pull/10754",
        "diff_url": "https://github.com/apple/swift/pull/10754.diff",
        "patch_url": "https://github.com/apple/swift/pull/10754.patch"
      },
      "body": "Just some small sil-mode fixes:\r\n\r\n1. Someone changed release_value -> retain_value in the font-lock array, so we were not highlighting release_value.\r\n2. Some small comment fixes.\r\n3. I added support for running viewcfg on a partial CFG.",
      "score": 1.4023255
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10756",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10756/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10756/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10756/events",
      "html_url": "https://github.com/apple/swift/pull/10756",
      "id": 240467076,
      "number": 10756,
      "title": "[swiftc (47 vs. 5577)] Add crasher in swift::ASTVisitor",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-04T16:49:19Z",
      "updated_at": "2017-07-04T18:38:53Z",
      "closed_at": "2017-07-04T18:38:53Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10756",
        "html_url": "https://github.com/apple/swift/pull/10756",
        "diff_url": "https://github.com/apple/swift/pull/10756.diff",
        "patch_url": "https://github.com/apple/swift/pull/10756.patch"
      },
      "body": "Add test case for crash triggered in `swift::ASTVisitor`.\n\nCurrent number of unresolved compiler crashers: 47 (5577 resolved)\n\n/cc @rudkx - just wanted to let you know that this crasher caused an assertion failure for the assertion `hasType(E) && \"Expected type to have been set!\"` added on 2016-12-11 by you in commit 1139f872 :-)\n\nAssertion failure in [`lib/Sema/ConstraintSystem.h (line 1544)`](https://github.com/apple/swift/blob/1a0aa2f33277a77519ef0329763c37e6a2cd46f5/lib/Sema/ConstraintSystem.h#L1544):\n\n```\nAssertion `hasType(E) && \"Expected type to have been set!\"' failed.\n\nWhen executing: swift::Type swift::constraints::ConstraintSystem::getType(const swift::Expr *) const\n```\n\nAssertion context:\n\n```c++\n    return ExprTypes.find(E) != ExprTypes.end();\n  }\n\n  /// Get the type for an expression.\n  Type getType(const Expr *E) const {\n    assert(hasType(E) && \"Expected type to have been set!\");\n    // FIXME: lvalue differences\n    //    assert((!E->getType() ||\n    //            E->getType()->isEqual(ExprTypes.find(E)->second)) &&\n    //           \"Mismatched types!\");\n    return ExprTypes.find(E)->second;\n```\nStack trace:\n\n```\n0 0x0000000003ac2848 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ac2848)\n1 0x0000000003ac2f86 SignalHandler(int) (/path/to/swift/bin/swift+0x3ac2f86)\n2 0x00007fcbaa67d390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fcba8ba2428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fcba8ba402a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fcba8b9abd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fcba8b9ac82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000012f1807 (/path/to/swift/bin/swift+0x12f1807)\n8 0x000000000143b32d (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x143b32d)\n9 0x000000000141f532 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x141f532)\n10 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n11 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n12 0x00000000013577d6 swift::TypeChecker::convertToType(swift::Expr*&, swift::Type, swift::DeclContext*, llvm::Optional<swift::Pattern*>) (/path/to/swift/bin/swift+0x13577d6)\n13 0x0000000001411d5f (anonymous namespace)::ExprRewriter::visitCoerceExpr(swift::CoerceExpr*, llvm::Optional<unsigned int>) (/path/to/swift/bin/swift+0x1411d5f)\n14 0x0000000001406c35 swift::ASTVisitor<(anonymous namespace)::ExprRewriter, swift::Expr*, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x1406c35)\n15 0x00000000013f9834 (anonymous namespace)::ExprRewriter::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x13f9834)\n16 0x00000000013ff2f1 (anonymous namespace)::ExprWalker::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x13ff2f1)\n17 0x0000000001533c2c swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x1533c2c)\n18 0x00000000013f67c0 swift::constraints::ConstraintSystem::applySolution(swift::constraints::Solution&, swift::Expr*, swift::Type, bool, bool, bool) (/path/to/swift/bin/swift+0x13f67c0)\n19 0x000000000134fe51 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fe51)\n20 0x0000000001422f3a (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet<TCCFlags, unsigned int>, swift::ExprTypeCheckListener*, bool) (/path/to/swift/bin/swift+0x1422f3a)\n21 0x000000000141f895 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x141f895)\n22 0x000000000141923b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x141923b)\n23 0x000000000141ef69 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x141ef69)\n24 0x000000000134c348 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x134c348)\n25 0x000000000134fd6f swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x134fd6f)\n26 0x00000000013d3016 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13d3016)\n27 0x00000000013d2836 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13d2836)\n28 0x00000000013f1020 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13f1020)\n29 0x0000000000fa6707 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa6707)\n30 0x00000000004ad858 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad858)\n31 0x00000000004abe41 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abe41)\n32 0x00000000004656b7 main (/path/to/swift/bin/swift+0x4656b7)\n33 0x00007fcba8b8d830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n34 0x0000000000462d59 _start (/path/to/swift/bin/swift+0x462d59)\n```",
      "score": 1.4186565
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10757",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10757/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10757/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10757/events",
      "html_url": "https://github.com/apple/swift/pull/10757",
      "id": 240535915,
      "number": 10757,
      "title": "[docs] Add some useful lit commandline flags to the Testing documentation.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-07-05T04:36:49Z",
      "updated_at": "2017-07-05T06:22:50Z",
      "closed_at": "2017-07-05T06:07:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10757",
        "html_url": "https://github.com/apple/swift/pull/10757",
        "diff_url": "https://github.com/apple/swift/pull/10757.diff",
        "patch_url": "https://github.com/apple/swift/pull/10757.patch"
      },
      "body": "[docs] Add some useful lit commandline flags to the Testing documentation.\r\n\r\nThe main thing that inspired me to make this change was I discovered the \"-a\" flag (which dumps command lines). Really useful when combined with the --filter command.",
      "score": 1.4268911
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10758",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10758/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10758/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10758/events",
      "html_url": "https://github.com/apple/swift/pull/10758",
      "id": 240551035,
      "number": 10758,
      "title": "[gardening] Convert Testing.rst to markdown and rename to Testing.md",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-05T06:33:39Z",
      "updated_at": "2017-07-05T06:53:54Z",
      "closed_at": "2017-07-05T06:53:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10758",
        "html_url": "https://github.com/apple/swift/pull/10758",
        "diff_url": "https://github.com/apple/swift/pull/10758.diff",
        "patch_url": "https://github.com/apple/swift/pull/10758.patch"
      },
      "body": "[gardening] Convert Testing.rst to markdown and rename to Testing.md",
      "score": 1.4279473
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10759",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10759/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10759/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10759/events",
      "html_url": "https://github.com/apple/swift/pull/10759",
      "id": 240566371,
      "number": 10759,
      "title": "Guaranteed ownership transforming terminators",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-07-05T07:49:29Z",
      "updated_at": "2017-07-05T08:57:24Z",
      "closed_at": "2017-07-05T08:51:39Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10759",
        "html_url": "https://github.com/apple/swift/pull/10759",
        "diff_url": "https://github.com/apple/swift/pull/10759.diff",
        "patch_url": "https://github.com/apple/swift/pull/10759.patch"
      },
      "body": "This PR teaches the ownership-verifier how to handle guaranteed arguments with values provided by a switch_enum or a checked_cast_br.\r\n\r\nThe specific properties that the verifier checks is that the argument's ownership kind is the same as the ownership of the terminators argument. For the owned case, we verify the users of the argument separately from the users of the operand. But in the case of guaranteed parameters, we add the end_borrow_argument instruction of the guaranteed argument to the \"must live\" set of the terminator's operand. This means that the guaranteed value must live as long as the argument does implying that all uses of the guaranteed argument must be within that liveness region.",
      "score": 1.4290342
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10761",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10761/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10761/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10761/events",
      "html_url": "https://github.com/apple/swift/pull/10761",
      "id": 240745917,
      "number": 10761,
      "title": "Master next fixes",
      "user": {
        "login": "bob-wilson",
        "id": 15724724,
        "avatar_url": "https://avatars1.githubusercontent.com/u/15724724?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bob-wilson",
        "html_url": "https://github.com/bob-wilson",
        "followers_url": "https://api.github.com/users/bob-wilson/followers",
        "following_url": "https://api.github.com/users/bob-wilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/bob-wilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bob-wilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bob-wilson/subscriptions",
        "organizations_url": "https://api.github.com/users/bob-wilson/orgs",
        "repos_url": "https://api.github.com/users/bob-wilson/repos",
        "events_url": "https://api.github.com/users/bob-wilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bob-wilson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2017-07-05T19:03:38Z",
      "updated_at": "2017-07-05T19:04:01Z",
      "closed_at": "2017-07-05T19:03:58Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10761",
        "html_url": "https://github.com/apple/swift/pull/10761",
        "diff_url": "https://github.com/apple/swift/pull/10761.diff",
        "patch_url": "https://github.com/apple/swift/pull/10761.patch"
      },
      "body": "This PR includes various small fixes to get the master-next branch to build with recent Clang/LLVM changes. I still haven't gotten all the tests to pass.\r\n",
      "score": 1.4367423
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10762",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10762/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10762/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10762/events",
      "html_url": "https://github.com/apple/swift/pull/10762",
      "id": 240760235,
      "number": 10762,
      "title": "[SourceKit] Declaring locally used UIdent static so that we don't need to create them in every request. NFC",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-05T20:02:36Z",
      "updated_at": "2017-07-05T20:44:06Z",
      "closed_at": "2017-07-05T20:44:04Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10762",
        "html_url": "https://github.com/apple/swift/pull/10762",
        "diff_url": "https://github.com/apple/swift/pull/10762.diff",
        "patch_url": "https://github.com/apple/swift/pull/10762.patch"
      },
      "body": "This addresses @@benlangmuir's code review comments.",
      "score": 1.4376318
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10763",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10763/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10763/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10763/events",
      "html_url": "https://github.com/apple/swift/pull/10763",
      "id": 240763912,
      "number": 10763,
      "title": "Document @swift-ci smoke benchmark.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-05T20:16:39Z",
      "updated_at": "2017-07-05T21:37:14Z",
      "closed_at": "2017-07-05T21:37:14Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10763",
        "html_url": "https://github.com/apple/swift/pull/10763",
        "diff_url": "https://github.com/apple/swift/pull/10763.diff",
        "patch_url": "https://github.com/apple/swift/pull/10763.patch"
      },
      "body": "",
      "score": 1.4379781
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10764",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10764/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10764/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10764/events",
      "html_url": "https://github.com/apple/swift/pull/10764",
      "id": 240764112,
      "number": 10764,
      "title": "Add a little tiny comment to AccessEnforcementSelection.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-05T20:17:25Z",
      "updated_at": "2017-07-05T21:19:29Z",
      "closed_at": "2017-07-05T21:10:06Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10764",
        "html_url": "https://github.com/apple/swift/pull/10764",
        "diff_url": "https://github.com/apple/swift/pull/10764.diff",
        "patch_url": "https://github.com/apple/swift/pull/10764.patch"
      },
      "body": "@swift-ci smoke test and merge.",
      "score": 1.4379025
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10765",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10765/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10765/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10765/events",
      "html_url": "https://github.com/apple/swift/pull/10765",
      "id": 240772895,
      "number": 10765,
      "title": "[4.0] Avoid building conformance lookup tables when we don't have to.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-05T20:53:07Z",
      "updated_at": "2017-07-05T22:52:54Z",
      "closed_at": "2017-07-05T22:52:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10765",
        "html_url": "https://github.com/apple/swift/pull/10765",
        "diff_url": "https://github.com/apple/swift/pull/10765.diff",
        "patch_url": "https://github.com/apple/swift/pull/10765.patch"
      },
      "body": "- **Explanation**: Checking of the `objc` attribute is very involved, but in multiple cases it was doing much more work than it needed to. In particularly bad cases (including the issues listed below), that would lead to eagerly deserializing protocol conformances, which could result in a circular dependency and crash in deserialization (like #10737). Adding small, clearly-correct early exits avoids this pitfall.\r\n- **Scope**: Very broad: affects all class members marked `@objc`. However, there should be no change in the behavior of anything that was working correctly; the compiler will just do work less eagerly.\r\n- **Issue**: [SR-5330](https://bugs.swift.org/browse/SR-5330) / rdar://problem/32677610\r\n- **Reviewed by**: @DougGregor  \r\n- **Risk**: Medium, due to the broad scope. We definitely want to test this against the compatibility suite.\r\n- **Testing**: Verified that this fixed the original test case.",
      "score": 1.4385916
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10766",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10766/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10766/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10766/events",
      "html_url": "https://github.com/apple/swift/pull/10766",
      "id": 240777058,
      "number": 10766,
      "title": "JSONEncoder conditional conformance workarounds",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 12,
      "created_at": "2017-07-05T21:09:53Z",
      "updated_at": "2017-07-07T20:20:59Z",
      "closed_at": "2017-07-07T20:20:55Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10766",
        "html_url": "https://github.com/apple/swift/pull/10766",
        "diff_url": "https://github.com/apple/swift/pull/10766.diff",
        "patch_url": "https://github.com/apple/swift/pull/10766.patch"
      },
      "body": "**What's in this pull request?**\r\nAddresses [SR-5206](https://bugs.swift.org/browse/SR-5206) for `JSONEncoder` and `JSONDecoder`.\r\n\r\nOne of the limitations of not having conditional conformance at the moment is that the implementation of `init(from:)` and `encode(to:)` on types which require it is that failure to cast dependent types to `Encodable` or `Decodable` is a runtime failure. There is no way to statically guarantee that the wrapped type is `Encodable` or `Decodable`.\r\n\r\nAs such, in those implementations, at best we can directly call `(element as! Encodable).encode(to: encoder)`, or similar. However, this encodes the element directly into an encoder, without giving the encoder a chance to intercept the type. This is problematic for `JSONEncoder` because it cannot apply a strategy if it doesn't get to intercept the type.\r\n\r\nThis gives a temporary workaround for JSON strategies because of internal Foundation knowledge.",
      "score": 1.4513158
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10767",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10767/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10767/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10767/events",
      "html_url": "https://github.com/apple/swift/pull/10767",
      "id": 240777631,
      "number": 10767,
      "title": "[NFC] Light refactoring of ParamDecl",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-07-05T21:12:14Z",
      "updated_at": "2017-07-06T00:03:57Z",
      "closed_at": "2017-07-05T22:21:50Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10767",
        "html_url": "https://github.com/apple/swift/pull/10767",
        "diff_url": "https://github.com/apple/swift/pull/10767.diff",
        "patch_url": "https://github.com/apple/swift/pull/10767.patch"
      },
      "body": "The calm before the storm.\r\n\r\nThis patch involves 3 simple transformations:\r\n\r\n- Now that we have a richer representation of parameter specifiers, code synthesis can run through the same argument creation path without fear of boolean blindness.\r\n\r\n- `Specifier::None` is renamed to `Specifier::Owned` in anticipation of staging\r\n\r\n - `setLet` is replaced by the more general `setSpecifier`",
      "score": 1.4390568
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10768",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10768/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10768/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10768/events",
      "html_url": "https://github.com/apple/swift/pull/10768",
      "id": 240779430,
      "number": 10768,
      "title": "[Gardening] Import the value of a subscript setter as owned",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-05T21:19:55Z",
      "updated_at": "2017-07-06T00:03:08Z",
      "closed_at": "2017-07-05T23:03:57Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10768",
        "html_url": "https://github.com/apple/swift/pull/10768",
        "diff_url": "https://github.com/apple/swift/pull/10768.diff",
        "patch_url": "https://github.com/apple/swift/pull/10768.patch"
      },
      "body": "The translation from a bit to the specifiers exposed this instance\r\nin the Clang importer where we hooked up a parameter as mutable\r\nbut never reflected that in the interface type.\r\n\r\nA future patch requires that this parameter be immutable.\r\n\r\nDepends on #10767",
      "score": 1.4388387
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10770",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10770/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10770/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10770/events",
      "html_url": "https://github.com/apple/swift/pull/10770",
      "id": 240792423,
      "number": 10770,
      "title": "Cleanup AccessMarkerElimination.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-05T22:19:28Z",
      "updated_at": "2017-07-05T22:46:18Z",
      "closed_at": "2017-07-05T22:45:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10770",
        "html_url": "https://github.com/apple/swift/pull/10770",
        "diff_url": "https://github.com/apple/swift/pull/10770.diff",
        "patch_url": "https://github.com/apple/swift/pull/10770.patch"
      },
      "body": "In raw SIL, access markers are unconditionally retained. In canonical SIL,\r\nmarkers are still removed prior to optimization.\r\n\r\nA new flag, -sil-optimized-access-markers, allows testing access markers in\r\noptimized builds, but it is not yet fully supported.\r\n",
      "score": 1.4391886
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10771",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10771/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10771/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10771/events",
      "html_url": "https://github.com/apple/swift/pull/10771",
      "id": 240794449,
      "number": 10771,
      "title": "Large Types IRGen Pass: add support for transforming return of large types into indirect returns",
      "user": {
        "login": "shajrawi",
        "id": 17753158,
        "avatar_url": "https://avatars3.githubusercontent.com/u/17753158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shajrawi",
        "html_url": "https://github.com/shajrawi",
        "followers_url": "https://api.github.com/users/shajrawi/followers",
        "following_url": "https://api.github.com/users/shajrawi/following{/other_user}",
        "gists_url": "https://api.github.com/users/shajrawi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shajrawi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shajrawi/subscriptions",
        "organizations_url": "https://api.github.com/users/shajrawi/orgs",
        "repos_url": "https://api.github.com/users/shajrawi/repos",
        "events_url": "https://api.github.com/users/shajrawi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shajrawi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-05T22:30:42Z",
      "updated_at": "2017-07-06T17:34:04Z",
      "closed_at": "2017-07-05T23:50:13Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10771",
        "html_url": "https://github.com/apple/swift/pull/10771",
        "diff_url": "https://github.com/apple/swift/pull/10771.diff",
        "patch_url": "https://github.com/apple/swift/pull/10771.patch"
      },
      "body": "radar rdar://problem/28680453\r\n\r\nThis PR improves the new IRGen pass by adding support for result types.\r\n\r\nResult types that are Large loadable types are replaced by empty tuples.\r\n\r\nAt the call site, we add a new stack allocation and pass said allocated space as a new `inout` argument to the apply site. After the call is executed this new argument will contain a pointer to the previously returned result.",
      "score": 1.4444617
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10772",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10772/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10772/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10772/events",
      "html_url": "https://github.com/apple/swift/pull/10772",
      "id": 240794567,
      "number": 10772,
      "title": "Sema: Simplifying a KeyPathExpr's type should *bind* to the specific type, not accept a subtype constraint.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-05T22:31:22Z",
      "updated_at": "2017-07-06T04:05:34Z",
      "closed_at": "2017-07-06T04:05:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10772",
        "html_url": "https://github.com/apple/swift/pull/10772",
        "diff_url": "https://github.com/apple/swift/pull/10772.diff",
        "patch_url": "https://github.com/apple/swift/pull/10772.patch"
      },
      "body": "We want the type of a KeyPathExpr to be the specific *KeyPath<T, U> subclass appropriate for the literal, with upcasts to a more general contextual type, since we rely on that invariant elsewhere to extract the base and projected value types. Fixes SR-5008 | rdar://problem/32395076.",
      "score": 1.4407458
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10773",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10773/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10773/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10773/events",
      "html_url": "https://github.com/apple/swift/pull/10773",
      "id": 240795665,
      "number": 10773,
      "title": "[4.0] Sema: Simplifying a KeyPathExpr's type should *bind* to the specific type, not accept a subtype constraint.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 16,
      "created_at": "2017-07-05T22:37:22Z",
      "updated_at": "2017-07-09T18:19:09Z",
      "closed_at": "2017-07-09T18:19:09Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10773",
        "html_url": "https://github.com/apple/swift/pull/10773",
        "diff_url": "https://github.com/apple/swift/pull/10773.diff",
        "patch_url": "https://github.com/apple/swift/pull/10773.patch"
      },
      "body": "Explanation: The compiler would crash when a key path literal was used in an expression with `Any` or `AnyObject` contextual type.\r\n\r\nScope: Affects users trying to `print` key paths or use them in `Mirror`s.\r\n\r\nIssue: SR-5008 | rdar://problem/32395076.\r\n\r\nRisk: Low, only impacts key paths.\r\n\r\nTesting: Swift CI",
      "score": 1.4648992
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10774",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10774/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10774/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10774/events",
      "html_url": "https://github.com/apple/swift/pull/10774",
      "id": 240796331,
      "number": 10774,
      "title": "[Markup] Actually collect multiple - Tag fields",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-05T22:41:12Z",
      "updated_at": "2017-07-06T05:36:22Z",
      "closed_at": "2017-07-06T05:36:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10774",
        "html_url": "https://github.com/apple/swift/pull/10774",
        "diff_url": "https://github.com/apple/swift/pull/10774.diff",
        "patch_url": "https://github.com/apple/swift/pull/10774.patch"
      },
      "body": "This was erasing the set of tags each time a - Tag simple field\r\nwas encountered.\r\n\r\nrdar://problem/32877771",
      "score": 1.4412345
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10775",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10775/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10775/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10775/events",
      "html_url": "https://github.com/apple/swift/pull/10775",
      "id": 240800735,
      "number": 10775,
      "title": "Hack: allow dropping noescape-ness when overriding ObjC methods",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-05T23:08:42Z",
      "updated_at": "2017-07-10T23:03:40Z",
      "closed_at": "2017-07-10T23:03:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10775",
        "html_url": "https://github.com/apple/swift/pull/10775",
        "diff_url": "https://github.com/apple/swift/pull/10775.diff",
        "patch_url": "https://github.com/apple/swift/pull/10775.patch"
      },
      "body": "In today's Swift, only non-optional function parameters can be non-escaping (and are by default). An optional function parameter uses a function type as a generic argument to Optional, and like any other generics that's considered an opaque and therefore possibly escaping use of the type. This is certainly unfortunate since it means a function parameter cannot be both Optional and non-escaping.\r\n\r\nHowever, this \"unfortunate\" becomes a concrete problem when dealing with Objective-C, which *does* allow applying its `noescape` attribute to a callback block marked `nullable`. This is fine for *uses* of methods with such parameters, but prevents anyone from *overriding* these methods.\r\n\r\nThis patch pokes a very narrow hole into the override checking to accomodate this: if a declaration comes from Objective-C, and it has an optional, non-escaping closure parameter, it's okay to override it in Swift with an optional, escaping closure parameter. This isn't strictly safe because a caller could be relying on the non-escaping-ness, but we don't have anything better for now. (This behavior will probably be deprecated in the future.)\r\n\r\n(Some people have noted that the old `noescape` type attribute in Swift still works, albeit with a warning. That's not something people should have to type, though—we want to remove it from the language, as described in [SE-0103](https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md).)\r\n\r\nrdar://problem/32903155",
      "score": 1.4733253
    }
  ]
}

