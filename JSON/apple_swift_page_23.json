{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10398",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10398/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10398/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10398/events",
      "html_url": "https://github.com/apple/swift/pull/10398",
      "id": 237099173,
      "number": 10398,
      "title": "[GSB] Record unresolved potential archetypes as delayed requirements.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T05:49:53Z",
      "updated_at": "2017-06-20T20:01:20Z",
      "closed_at": "2017-06-20T13:56:13Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10398",
        "html_url": "https://github.com/apple/swift/pull/10398",
        "diff_url": "https://github.com/apple/swift/pull/10398.diff",
        "patch_url": "https://github.com/apple/swift/pull/10398.patch"
      },
      "body": "Whenever we form a potential archetype that is unresolved (because it\r\nnames a member wasn't known at the time the potential archetype was\r\nformed), create a corresponding delayed requirement to resolve the\r\npotential archetype. This ensures that all potential archetypes get a\r\nchance to be resolve, fixing the\r\n\r\n    nested type should have matched associated type\r\n\r\nassertion in rdar://problem/31401161 (and others). Fold typo correction into this scheme, fixing rdar://problem/31048352 and rdar://problem/32077627.",
      "score": 1.1981564
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10399",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10399/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10399/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10399/events",
      "html_url": "https://github.com/apple/swift/pull/10399",
      "id": 237099618,
      "number": 10399,
      "title": "[semantic-sil] BeginUnpairedAccess always returns an address... so it has trivial ownership.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T05:53:07Z",
      "updated_at": "2017-06-20T06:31:10Z",
      "closed_at": "2017-06-20T06:31:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10399",
        "html_url": "https://github.com/apple/swift/pull/10399",
        "diff_url": "https://github.com/apple/swift/pull/10399.diff",
        "patch_url": "https://github.com/apple/swift/pull/10399.patch"
      },
      "body": "[semantic-sil] BeginUnpairedAccess always returns an address... so it has trivial ownership.\r\n",
      "score": 1.1963801
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10400",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10400/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10400/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10400/events",
      "html_url": "https://github.com/apple/swift/pull/10400",
      "id": 237119351,
      "number": 10400,
      "title": "[4.0] Dynamic exclusivity enforcement for non-escaping closures.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-06-20T07:40:56Z",
      "updated_at": "2017-06-22T21:21:42Z",
      "closed_at": "2017-06-22T21:21:42Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10400",
        "html_url": "https://github.com/apple/swift/pull/10400",
        "diff_url": "https://github.com/apple/swift/pull/10400.diff",
        "patch_url": "https://github.com/apple/swift/pull/10400.patch"
      },
      "body": "Add support for dynamic exclusivity enforcement of non-escaping closures.\r\n\r\nThis is enabled in Swift 4 mode.\r\n\r\nThis triggers a runtime trap when exclusivity is violated in a way\r\nthat isn't apparent statically. For example, the non-escaping closure\r\npassed to `performNoEscape` below requires a dynamic access check\r\nbefore passing `x` as `inout`.\r\n\r\n```\r\n  func performNoEscape(_ closure: () -> ()) { closure() }\r\n  \r\n  func modifyAndPerform(_ var: inout Int, closure: () ->()) {\r\n    var = 42\r\n    closure()\r\n  }\r\n\r\n  var x = 3\r\n  let c = { x = 7 } // x has escaped via an escaping closure.\r\n\r\n  // The following non-escaping closure passes `x` inout.\r\n  // This requires dynamic enforcement since `x` has already escaped.\r\n  performNoEscape { modifyAndPerform(&x, closure: c) }\r\n```\r\nTracked as:\r\n<rdar://problem/32061282> [Exclusivity] Enforcement selection for noescape closure captures.",
      "score": 1.2123396
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10401",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10401/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10401/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10401/events",
      "html_url": "https://github.com/apple/swift/pull/10401",
      "id": 237223558,
      "number": 10401,
      "title": "[swiftc (27 vs. 5563)] Add crasher in swift::ProtocolCompositionType::get",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T14:10:55Z",
      "updated_at": "2017-06-20T15:34:38Z",
      "closed_at": "2017-06-20T15:34:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10401",
        "html_url": "https://github.com/apple/swift/pull/10401",
        "diff_url": "https://github.com/apple/swift/pull/10401.diff",
        "patch_url": "https://github.com/apple/swift/pull/10401.patch"
      },
      "body": "Add test case for crash triggered in `swift::ProtocolCompositionType::get`.\n\nCurrent number of unresolved compiler crashers: 27 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `(!Superclass || Superclass->isEqual(T)) && \"Should have diagnosed multiple superclasses by now\"` added on 2017-04-09 by you in commit 32a75058 :-)\n\nAssertion failure in [`lib/AST/Type.cpp (line 911)`](https://github.com/apple/swift/blob/ffcca776a22f71bc7e39dccc5b97c7ad91efaf8b/lib/AST/Type.cpp#L911):\n\n```\nAssertion `(!Superclass || Superclass->isEqual(T)) && \"Should have diagnosed multiple superclasses by now\"' failed.\n\nWhen executing: void addProtocols(swift::Type, SmallVectorImpl<swift::ProtocolDecl *> &, swift::Type &, bool &)\n```\n\nAssertion context:\n\n```c++\n  if (auto Proto = T->getAs<ProtocolType>()) {\n    auto KnownPos = Known.find(Proto->getDecl());\n    if (KnownPos != Known.end()) {\n      // We've come across a protocol that is in our original list. Zap it.\n      Protocols[KnownPos->second] = nullptr;\n      ZappedAny = true;\n    }\n\n    if (Visited.insert(Proto->getDecl()).second) {\n      Stack.push_back(Proto->getDecl());\n      for (auto Inherited : Proto->getDecl()->getInheritedProtocols())\n```\nStack trace:\n\n```\n0 0x0000000003a765e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a765e8)\n1 0x0000000003a76d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3a76d26)\n2 0x00007f305c203390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f305a728428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f305a72a02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f305a720bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f305a720c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015cde6b (/path/to/swift/bin/swift+0x15cde6b)\n8 0x00000000015c9951 swift::ProtocolCompositionType::get(swift::ASTContext const&, llvm::ArrayRef<swift::Type>, bool) (/path/to/swift/bin/swift+0x15c9951)\n9 0x00000000015c5715 swift::TypeBase::getCanonicalType() (/path/to/swift/bin/swift+0x15c5715)\n10 0x00000000012daff3 swift::ASTVisitor<(anonymous namespace)::ConstraintGenerator, swift::Type, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x12daff3)\n11 0x00000000012e0ff8 (anonymous namespace)::ConstraintWalker::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x12e0ff8)\n12 0x00000000015226f1 (anonymous namespace)::Traversal::visitCollectionExpr(swift::CollectionExpr*) (/path/to/swift/bin/swift+0x15226f1)\n13 0x000000000151f1cb swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x151f1cb)\n14 0x00000000012d7b71 swift::constraints::ConstraintSystem::generateConstraints(swift::Expr*) (/path/to/swift/bin/swift+0x12d7b71)\n15 0x00000000013017d6 swift::constraints::ConstraintSystem::solve(swift::Expr*&, swift::Type, swift::ExprTypeCheckListener*, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x13017d6)\n16 0x000000000133a724 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x133a724)\n17 0x000000000133e1f0 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x133e1f0)\n18 0x00000000013c24e5 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13c24e5)\n19 0x00000000013c1cf6 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13c1cf6)\n20 0x00000000013dff70 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13dff70)\n21 0x0000000000f9de7d swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf9de7d)\n22 0x00000000004abe79 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe79)\n23 0x00000000004aa419 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa419)\n24 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n25 0x00007f305a713830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n26 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2013965
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10402",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10402/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10402/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10402/events",
      "html_url": "https://github.com/apple/swift/pull/10402",
      "id": 237255428,
      "number": 10402,
      "title": "[swiftc (28 vs. 5563)] Add crasher in swift::GenericSignature::getConformanceAccessPath",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T15:37:21Z",
      "updated_at": "2017-06-20T19:55:42Z",
      "closed_at": "2017-06-20T18:54:16Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10402",
        "html_url": "https://github.com/apple/swift/pull/10402",
        "diff_url": "https://github.com/apple/swift/pull/10402.diff",
        "patch_url": "https://github.com/apple/swift/pull/10402.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignature::getConformanceAccessPath`.\n\nCurrent number of unresolved compiler crashers: 28 (5563 resolved)\n\n/cc @DougGregor - just wanted to let you know that this crasher caused an assertion failure for the assertion `hasConformanceInSignature(inProtocol->getRequirementSignature(), subjectType, conformingProto) && \"missing explicit conformance in requirement signature\"` added on 2017-03-08 by you in commit 1f8b0f9b :-)\n\nAssertion failure in [`lib/AST/GenericSignature.cpp (line 846)`](https://github.com/apple/swift/blob/36f689d1d20fac3c339bdc2657765c5349569ceb/lib/AST/GenericSignature.cpp#L846):\n\n```\nAssertion `hasConformanceInSignature(inProtocol->getRequirementSignature(), subjectType, conformingProto) && \"missing explicit conformance in requirement signature\"' failed.\n\nWhen executing: auto swift::GenericSignature::getConformanceAccessPath(swift::Type, swift::ProtocolDecl *, swift::ModuleDecl &)::(anonymous class)::operator()(swift::GenericSignature *, const RequirementSource *, swift::ProtocolDecl *, swift::Type) const\n```\n\nAssertion context:\n\n```c++\n          ->getCanonicalTypeInContext(subjectType,\n                                      *inProtocol->getParentModule());\n\n        assert(hasConformanceInSignature(inProtocol->getRequirementSignature(),\n                                         subjectType, conformingProto) &&\n               \"missing explicit conformance in requirement signature\");\n\n        // Record this step.\n        path.path.push_back({subjectType, conformingProto});\n        return;\n      }\n```\nStack trace:\n\n```\n0 0x0000000003a765e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a765e8)\n1 0x0000000003a76d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3a76d26)\n2 0x00007f54b7228390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f54b574d428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f54b574f02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f54b5745bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f54b5745c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000156a921 std::_Function_handler<void (swift::GenericSignature*, swift::GenericSignatureBuilder::RequirementSource const*, swift::ProtocolDecl*, swift::Type), swift::GenericSignature::getConformanceAccessPath(swift::Type, swift::ProtocolDecl*, swift::ModuleDecl&)::$_11>::_M_invoke(std::_Any_data const&, swift::GenericSignature*&&, swift::GenericSignatureBuilder::RequirementSource const*&&, swift::ProtocolDecl*&&, swift::Type&&) (/path/to/swift/bin/swift+0x156a921)\n8 0x000000000156abc3 std::_Function_handler<void (swift::GenericSignature*, swift::GenericSignatureBuilder::RequirementSource const*, swift::ProtocolDecl*, swift::Type), swift::GenericSignature::getConformanceAccessPath(swift::Type, swift::ProtocolDecl*, swift::ModuleDecl&)::$_11>::_M_invoke(std::_Any_data const&, swift::GenericSignature*&&, swift::GenericSignatureBuilder::RequirementSource const*&&, swift::ProtocolDecl*&&, swift::Type&&) (/path/to/swift/bin/swift+0x156abc3)\n9 0x0000000001569909 swift::GenericSignature::getConformanceAccessPath(swift::Type, swift::ProtocolDecl*, swift::ModuleDecl&) (/path/to/swift/bin/swift+0x1569909)\n10 0x00000000015c1b15 swift::SubstitutionMap::lookupConformance(swift::CanType, swift::ProtocolDecl*) const (/path/to/swift/bin/swift+0x15c1b15)\n11 0x000000000156a32e bool llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>::callback_fn<swift::GenericSignature::getSubstitutions(swift::SubstitutionMap const&, llvm::SmallVectorImpl<swift::Substitution>&) const::$_8>(long, swift::Type, llvm::ArrayRef<swift::Requirement>) (/path/to/swift/bin/swift+0x156a32e)\n12 0x00000000015671c7 swift::GenericSignature::enumeratePairedRequirements(llvm::function_ref<bool (swift::Type, llvm::ArrayRef<swift::Requirement>)>) const (/path/to/swift/bin/swift+0x15671c7)\n13 0x0000000001568732 swift::GenericSignature::getSubstitutions(swift::SubstitutionMap const&, llvm::SmallVectorImpl<swift::Substitution>&) const (/path/to/swift/bin/swift+0x1568732)\n14 0x00000000013e3059 swift::constraints::Solution::computeSubstitutions(swift::GenericSignature*, swift::constraints::ConstraintLocator*, llvm::SmallVectorImpl<swift::Substitution>&) const (/path/to/swift/bin/swift+0x13e3059)\n15 0x00000000013e9bd2 (anonymous namespace)::ExprRewriter::buildMemberRef(swift::Expr*, swift::Type, swift::SourceLoc, swift::ValueDecl*, swift::DeclNameLoc, swift::Type, swift::constraints::ConstraintLocatorBuilder, swift::constraints::ConstraintLocatorBuilder, bool, swift::FunctionRefKind, swift::AccessSemantics, bool) (/path/to/swift/bin/swift+0x13e9bd2)\n16 0x00000000013f6a4d swift::ASTVisitor<(anonymous namespace)::ExprRewriter, swift::Expr*, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x13f6a4d)\n17 0x00000000013e85d4 (anonymous namespace)::ExprRewriter::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x13e85d4)\n18 0x00000000013ee081 (anonymous namespace)::ExprWalker::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x13ee081)\n19 0x000000000151f1ec swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x151f1ec)\n20 0x00000000013e5560 swift::constraints::ConstraintSystem::applySolution(swift::constraints::Solution&, swift::Expr*, swift::Type, bool, bool, bool) (/path/to/swift/bin/swift+0x13e5560)\n21 0x000000000133e2df swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x133e2df)\n22 0x00000000013c3928 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13c3928)\n23 0x00000000013c2416 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13c2416)\n24 0x00000000013c07bd swift::TypeChecker::typeCheckFunctionBodyUntil(swift::FuncDecl*, swift::SourceLoc) (/path/to/swift/bin/swift+0x13c07bd)\n25 0x00000000013c062d swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) (/path/to/swift/bin/swift+0x13c062d)\n26 0x00000000013c133d swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x13c133d)\n27 0x00000000013df148 typeCheckFunctionsAndExternalDecls(swift::TypeChecker&) (/path/to/swift/bin/swift+0x13df148)\n28 0x00000000013dfffa swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13dfffa)\n29 0x0000000000f9de7d swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf9de7d)\n30 0x00000000004abe79 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe79)\n31 0x00000000004aa419 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa419)\n32 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n33 0x00007f54b5738830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n34 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2029438
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10403",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10403/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10403/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10403/events",
      "html_url": "https://github.com/apple/swift/pull/10403",
      "id": 237273906,
      "number": 10403,
      "title": " [4.0] IRGen: EmptyBoxType's representation cannot be nil because of a conflict with extra inhabitant assumption in indirect enums",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-20T16:38:42Z",
      "updated_at": "2017-06-21T22:28:47Z",
      "closed_at": "2017-06-21T22:28:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10403",
        "html_url": "https://github.com/apple/swift/pull/10403",
        "diff_url": "https://github.com/apple/swift/pull/10403.diff",
        "patch_url": "https://github.com/apple/swift/pull/10403.patch"
      },
      "body": "Use a singleton empty heap box representation instead of nil for EmptyBoxTypes. The nil representation that we used is not compatible with assumption we make about extra inhabitant bits we make in enums.\r\n\r\n• Explanation: Due to using an incompatible representation of empty box types and single reference enum payloads we can’t distinguish between the first empty payload case and the  payload case because both map to 0.\r\n\r\nenum Payload {\r\n    case c\r\n}\r\n\r\nindirect enum Test {\r\n    case a\r\n    case b(Payload)\r\n}\r\n\r\nTest.b(.c) // creates .a\r\n\r\n• Scope of Issue: This has not been working since at least Xcode 8.3.f\r\n\r\n• Risk: Low. The code path is the same for the rest of the compiler for handling reference counted payloads. This change therefore should not expose other bugs.\r\n\r\n• Testing: Existing and added Swift CI tests",
      "score": 1.2097678
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10404",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10404/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10404/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10404/events",
      "html_url": "https://github.com/apple/swift/pull/10404",
      "id": 237274647,
      "number": 10404,
      "title": "[4.0] Add Codable conformance to common CG types",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T16:41:22Z",
      "updated_at": "2017-06-20T18:39:35Z",
      "closed_at": "2017-06-20T18:39:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10404",
        "html_url": "https://github.com/apple/swift/pull/10404",
        "diff_url": "https://github.com/apple/swift/pull/10404.diff",
        "patch_url": "https://github.com/apple/swift/pull/10404.patch"
      },
      "body": "**What's in this pull request?**\r\nCherry-picks #10343 to `swift-4.0-branch`.\r\n\r\n**Explanation:** Give custom Codable implementations for CGAffineTransform, CGPoint, CGSize, CGRect, and CGVector, along with unit tests.\r\n**Scope:** Users of the `Codable` API who wish to encode these CG types should not have to add their own (potentially incompatible) conformance\r\n**Radar:** rdar://problem/32651486\r\n**Risk:** Low\r\n**Testing:** Adds unit tests to confirm expected behavior.",
      "score": 1.2030007
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10405",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10405/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10405/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10405/events",
      "html_url": "https://github.com/apple/swift/pull/10405",
      "id": 237286266,
      "number": 10405,
      "title": "[Syntax] Serialize top level decls as an array",
      "user": {
        "login": "harlanhaskins",
        "id": 853032,
        "avatar_url": "https://avatars1.githubusercontent.com/u/853032?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harlanhaskins",
        "html_url": "https://github.com/harlanhaskins",
        "followers_url": "https://api.github.com/users/harlanhaskins/followers",
        "following_url": "https://api.github.com/users/harlanhaskins/following{/other_user}",
        "gists_url": "https://api.github.com/users/harlanhaskins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/harlanhaskins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/harlanhaskins/subscriptions",
        "organizations_url": "https://api.github.com/users/harlanhaskins/orgs",
        "repos_url": "https://api.github.com/users/harlanhaskins/repos",
        "events_url": "https://api.github.com/users/harlanhaskins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/harlanhaskins/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T17:24:42Z",
      "updated_at": "2017-06-20T21:48:09Z",
      "closed_at": "2017-06-20T21:48:06Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10405",
        "html_url": "https://github.com/apple/swift/pull/10405",
        "diff_url": "https://github.com/apple/swift/pull/10405.diff",
        "patch_url": "https://github.com/apple/swift/pull/10405.patch"
      },
      "body": "Previously the syntax serialization test printed each top-level decl individually. This now prints them as an array of top-level decls.",
      "score": 1.2040107
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10406",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10406/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10406/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10406/events",
      "html_url": "https://github.com/apple/swift/pull/10406",
      "id": 237293590,
      "number": 10406,
      "title": "Improve reporting of @objc inference issues from the Swift runtime",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-20T17:53:30Z",
      "updated_at": "2017-06-23T04:35:49Z",
      "closed_at": "2017-06-23T04:35:49Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10406",
        "html_url": "https://github.com/apple/swift/pull/10406",
        "diff_url": "https://github.com/apple/swift/pull/10406.diff",
        "patch_url": "https://github.com/apple/swift/pull/10406.patch"
      },
      "body": "Extend Swift runtime issue reporting for @objc inference to include details about the declaration of the method (that is missing the @objc annotation) and a suggested fix-it. This changes the ABI of RuntimeErrorDetails, so we're also bumping the version.\r\n\r\nAn appropriate LLDB pull request will follow.",
      "score": 1.2176102
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10407",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10407/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10407/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10407/events",
      "html_url": "https://github.com/apple/swift/pull/10407",
      "id": 237310445,
      "number": 10407,
      "title": "[swiftc (29 vs. 5563)] Add crasher in swift::TypeChecker::validateGenericTypeSignature(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T18:55:14Z",
      "updated_at": "2017-06-20T20:26:52Z",
      "closed_at": "2017-06-20T20:26:52Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10407",
        "html_url": "https://github.com/apple/swift/pull/10407",
        "diff_url": "https://github.com/apple/swift/pull/10407.diff",
        "patch_url": "https://github.com/apple/swift/pull/10407.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::validateGenericTypeSignature(...)`.\n\nCurrent number of unresolved compiler crashers: 29 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `(GenericSigOrEnv.isNull() || getGenericSignature()->getCanonicalSignature() == genericEnv->getGenericSignature()->getCanonicalSignature()) && \"set a generic environment with a different generic signature\"` added on 2017-02-17 by you in commit ad78604e :-)\n\nAssertion failure in [`lib/AST/Decl.cpp (line 665)`](https://github.com/apple/swift/blob/531c2e8868d608e03af588c27eb6c479c861cf87/lib/AST/Decl.cpp#L665):\n\n```\nAssertion `(GenericSigOrEnv.isNull() || getGenericSignature()->getCanonicalSignature() == genericEnv->getGenericSignature()->getCanonicalSignature()) && \"set a generic environment with a different generic signature\"' failed.\n\nWhen executing: void swift::GenericContext::setGenericEnvironment(swift::GenericEnvironment *)\n```\n\nAssertion context:\n\n```c++\n\nvoid GenericContext::setGenericEnvironment(GenericEnvironment *genericEnv) {\n  assert((GenericSigOrEnv.isNull() ||\n          getGenericSignature()->getCanonicalSignature() ==\n            genericEnv->getGenericSignature()->getCanonicalSignature()) &&\n         \"set a generic environment with a different generic signature\");\n  this->GenericSigOrEnv = genericEnv;\n  if (genericEnv)\n    genericEnv->setOwningDeclContext(this);\n}\n\n```\nStack trace:\n\n```\n0 0x0000000003a765e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a765e8)\n1 0x0000000003a76d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3a76d26)\n2 0x00007f147faff390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f147e024428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f147e02602a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f147e01cbd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f147e01cc82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000153d04b (/path/to/swift/bin/swift+0x153d04b)\n8 0x0000000001386244 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x1386244)\n9 0x0000000001357050 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1357050)\n10 0x0000000001356ae9 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1356ae9)\n11 0x0000000001388bdd swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x1388bdd)\n12 0x00000000013d218b resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d218b)\n13 0x00000000013d1939 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d1939)\n14 0x00000000013d26a8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d26a8)\n15 0x00000000013d25ac swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d25ac)\n16 0x00000000013d0fb0 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d0fb0)\n17 0x000000000148c461 swift::IterativeTypeChecker::processResolveInheritedClauseEntry(std::pair<llvm::PointerUnion<swift::TypeDecl*, swift::ExtensionDecl*>, unsigned int>, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x148c461)\n18 0x0000000001455fc6 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x1455fc6)\n19 0x000000000134d699 swift::TypeChecker::resolveInheritanceClause(llvm::PointerUnion<swift::TypeDecl*, swift::ExtensionDecl*>) (/path/to/swift/bin/swift+0x134d699)\n20 0x0000000001576e24 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x1576e24)\n21 0x00000000015774f4 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15774f4)\n22 0x000000000157ae25 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x157ae25)\n23 0x000000000158c811 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x158c811)\n24 0x0000000001584ff2 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_60>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1584ff2)\n25 0x0000000001576f21 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x1576f21)\n26 0x00000000015774f4 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15774f4)\n27 0x000000000157ae25 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x157ae25)\n28 0x000000000158c811 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x158c811)\n29 0x0000000001584ff2 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_60>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1584ff2)\n30 0x0000000001576f21 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x1576f21)\n31 0x0000000001576d3e swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x1576d3e)\n32 0x0000000001382832 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1382832)\n33 0x0000000001385e14 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x1385e14)\n34 0x000000000135bf8c checkExtensionGenericParams(swift::TypeChecker&, swift::ExtensionDecl*, swift::Type, swift::GenericParamList*) (/path/to/swift/bin/swift+0x135bf8c)\n35 0x000000000134f56f swift::TypeChecker::validateExtension(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x134f56f)\n36 0x00000000013655eb (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x13655eb)\n37 0x00000000013552c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13552c4)\n38 0x0000000001355193 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1355193)\n39 0x00000000013dff04 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13dff04)\n40 0x0000000000f9de7d swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf9de7d)\n41 0x00000000004abe79 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe79)\n42 0x00000000004aa419 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa419)\n43 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n44 0x00007f147e00f830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n45 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2041982
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10408",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10408/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10408/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10408/events",
      "html_url": "https://github.com/apple/swift/pull/10408",
      "id": 237319979,
      "number": 10408,
      "title": "[4.0][SourceKit] If diagnostics are 'stale' for a particular snapshot then ignore them and only return the syntactic parser diagnostics",
      "user": {
        "login": "akyrtzi",
        "id": 46970,
        "avatar_url": "https://avatars2.githubusercontent.com/u/46970?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akyrtzi",
        "html_url": "https://github.com/akyrtzi",
        "followers_url": "https://api.github.com/users/akyrtzi/followers",
        "following_url": "https://api.github.com/users/akyrtzi/following{/other_user}",
        "gists_url": "https://api.github.com/users/akyrtzi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akyrtzi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akyrtzi/subscriptions",
        "organizations_url": "https://api.github.com/users/akyrtzi/orgs",
        "repos_url": "https://api.github.com/users/akyrtzi/repos",
        "events_url": "https://api.github.com/users/akyrtzi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akyrtzi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T19:32:28Z",
      "updated_at": "2017-06-20T20:43:37Z",
      "closed_at": "2017-06-20T20:43:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10408",
        "html_url": "https://github.com/apple/swift/pull/10408",
        "diff_url": "https://github.com/apple/swift/pull/10408.diff",
        "patch_url": "https://github.com/apple/swift/pull/10408.patch"
      },
      "body": "rdar://32769873\r\n\r\nmaster: https://github.com/apple/swift/pull/10388",
      "score": 1.2044786
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10409",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10409/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10409/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10409/events",
      "html_url": "https://github.com/apple/swift/pull/10409",
      "id": 237328195,
      "number": 10409,
      "title": "Sema: missing switch case fixits should print payload names explicitly instead of printing underscores. rdar://32121806",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T20:01:27Z",
      "updated_at": "2017-06-20T21:13:40Z",
      "closed_at": "2017-06-20T21:13:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10409",
        "html_url": "https://github.com/apple/swift/pull/10409",
        "diff_url": "https://github.com/apple/swift/pull/10409.diff",
        "patch_url": "https://github.com/apple/swift/pull/10409.patch"
      },
      "body": "",
      "score": 1.2047658
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10410",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10410/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10410/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10410/events",
      "html_url": "https://github.com/apple/swift/pull/10410",
      "id": 237330033,
      "number": 10410,
      "title": "[4.0] [GSB] Record unresolved potential archetypes as delayed requirements.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2017-06-20T20:08:09Z",
      "updated_at": "2017-06-21T05:01:24Z",
      "closed_at": "2017-06-21T00:18:06Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10410",
        "html_url": "https://github.com/apple/swift/pull/10410",
        "diff_url": "https://github.com/apple/swift/pull/10410.diff",
        "patch_url": "https://github.com/apple/swift/pull/10410.patch"
      },
      "body": "**Explanation**: Whenever we form a potential archetype that is unresolved, use the delayed-requirements mechanism to ensure that every such potential archetype gets resolved\r\n**Scope**: We've seen several different compiler crashers from this, several of which (but not all) involving typo correction within generic signatures.\r\n**Radar**: rdar://problem/31401161, rdar://problem/31048352, rdar://problem/32077627. \r\n**Risk**: Relatively low; uses existing mechanisms and is effectively a no-op where it wasn't needed.\r\n**Testing**: Compiler regression testing.",
      "score": 1.2066997
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10411",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10411/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10411/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10411/events",
      "html_url": "https://github.com/apple/swift/pull/10411",
      "id": 237335221,
      "number": 10411,
      "title": "[swiftc (30 vs. 5563)] Add crasher in swift::TypeChecker::resolveIdentifierType",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T20:28:14Z",
      "updated_at": "2017-06-20T21:54:35Z",
      "closed_at": "2017-06-20T21:54:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10411",
        "html_url": "https://github.com/apple/swift/pull/10411",
        "diff_url": "https://github.com/apple/swift/pull/10411.diff",
        "patch_url": "https://github.com/apple/swift/pull/10411.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::resolveIdentifierType`.\n\nCurrent number of unresolved compiler crashers: 30 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `memberType && \"Received null dependent member type\"` added on 2017-05-21 by you in commit 0eac6f017 :-)\n\nAssertion failure in [`lib/Sema/TypeCheckType.cpp (line 1389)`](https://github.com/apple/swift/blob/2808583c6af337325bcc791254c4d3b0a68d36b8/lib/Sema/TypeCheckType.cpp#L1389):\n\n```\nAssertion `memberType && \"Received null dependent member type\"' failed.\n\nWhen executing: swift::Type resolveNestedIdentTypeComponent(swift::TypeChecker &, swift::DeclContext *, swift::Type, swift::SourceRange, swift::ComponentIdentTypeRepr *, TypeResolutionOptions, bool, swift::GenericTypeResolver *, UnsatisfiedDependency *)\n```\n\nAssertion context:\n\n```c++\n  // If the parent is a type parameter, the member is a dependent member,\n  // and we skip much of the work below.\n  if (parentTy->isTypeParameter()) {\n    auto memberType = resolver->resolveDependentMemberType(parentTy, DC,\n                                                      parentRange, comp);\n    assert(memberType && \"Received null dependent member type\");\n    return memberType;\n  }\n\n  // Phase 2: If a declaration has already been bound, use it.\n  if (auto *typeDecl = comp->getBoundDecl()) {\n```\nStack trace:\n\n```\n0 0x0000000003a765e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a765e8)\n1 0x0000000003a76d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3a76d26)\n2 0x00007f6e95d11390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f6e94236428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f6e9423802a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f6e9422ebd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f6e9422ec82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000013d1fda resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d1fda)\n8 0x00000000013d1939 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d1939)\n9 0x00000000013d26a8 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d26a8)\n10 0x00000000013d25ac swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d25ac)\n11 0x00000000013d0fb0 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d0fb0)\n12 0x0000000001383737 checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1383737)\n13 0x00000000013832ec swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x13832ec)\n14 0x00000000013694ab (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x13694ab)\n15 0x00000000013552b4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13552b4)\n16 0x00000000013572e4 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x13572e4)\n17 0x0000000001355d72 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1355d72)\n18 0x000000000136704b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x136704b)\n19 0x0000000001355294 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1355294)\n20 0x0000000001355193 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1355193)\n21 0x00000000013dff04 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13dff04)\n22 0x0000000000f9de7d swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf9de7d)\n23 0x00000000004abe79 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe79)\n24 0x00000000004aa419 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa419)\n25 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n26 0x00007f6e94221830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n27 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2050844
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10412",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10412/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10412/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10412/events",
      "html_url": "https://github.com/apple/swift/pull/10412",
      "id": 237335723,
      "number": 10412,
      "title": "CursorInfo: silence a warning after recently introducing a new enum case.",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T20:29:56Z",
      "updated_at": "2017-06-20T22:32:28Z",
      "closed_at": "2017-06-20T22:32:28Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10412",
        "html_url": "https://github.com/apple/swift/pull/10412",
        "diff_url": "https://github.com/apple/swift/pull/10412.diff",
        "patch_url": "https://github.com/apple/swift/pull/10412.patch"
      },
      "body": "",
      "score": 1.2052475
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10413",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10413/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10413/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10413/events",
      "html_url": "https://github.com/apple/swift/pull/10413",
      "id": 237337740,
      "number": 10413,
      "title": "Use a cast instead of trying to rely on higher level APIs.",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 9,
      "created_at": "2017-06-20T20:37:21Z",
      "updated_at": "2017-06-22T23:41:33Z",
      "closed_at": "2017-06-22T23:12:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10413",
        "html_url": "https://github.com/apple/swift/pull/10413",
        "diff_url": "https://github.com/apple/swift/pull/10413.diff",
        "patch_url": "https://github.com/apple/swift/pull/10413.patch"
      },
      "body": "Use a cast instead of trying to rely on higher level APIs.\r\n\r\nI missed this problem due to a missing test case in initializers.swift. In a\r\nsubsequent commit, I am going to add the rest of the missing cases with some\r\nFileCheck tests for some of them. This is to ensure that the commit is easy to\r\nreview.\r\n\r\nrdar://32539006\r\n(cherry picked from commit cd55f466260b41b95cb0d113f9d7c6c86f6b0304)",
      "score": 1.2172139
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10414",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10414/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10414/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10414/events",
      "html_url": "https://github.com/apple/swift/pull/10414",
      "id": 237339408,
      "number": 10414,
      "title": "Roll back a portion of SE-0110",
      "user": {
        "login": "rudkx",
        "id": 162784,
        "avatar_url": "https://avatars1.githubusercontent.com/u/162784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rudkx",
        "html_url": "https://github.com/rudkx",
        "followers_url": "https://api.github.com/users/rudkx/followers",
        "following_url": "https://api.github.com/users/rudkx/following{/other_user}",
        "gists_url": "https://api.github.com/users/rudkx/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rudkx/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rudkx/subscriptions",
        "organizations_url": "https://api.github.com/users/rudkx/orgs",
        "repos_url": "https://api.github.com/users/rudkx/repos",
        "events_url": "https://api.github.com/users/rudkx/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rudkx/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 9,
      "created_at": "2017-06-20T20:43:51Z",
      "updated_at": "2017-06-21T02:57:56Z",
      "closed_at": "2017-06-21T02:57:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10414",
        "html_url": "https://github.com/apple/swift/pull/10414",
        "diff_url": "https://github.com/apple/swift/pull/10414.diff",
        "patch_url": "https://github.com/apple/swift/pull/10414.patch"
      },
      "body": "As described in:\r\n> https://lists.swift.org/pipermail/swift-evolution-announce/2017-June/000386.html\r\n\r\nSpecifically allow an N-ary argument function to be passed as an\r\nargument in a place where a function of a single N-tuple is expected.\r\n\r\nFixes: rdar://problem/32875953\r\n(cherry picked from commit 0ba4a312af17228afb9613874b1400cdfe520fae)\r\n",
      "score": 1.2064028
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10415",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10415/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10415/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10415/events",
      "html_url": "https://github.com/apple/swift/pull/10415",
      "id": 237341068,
      "number": 10415,
      "title": "NFC: Cleanup ClosureScope/AccessEnforcementSelection/Tests.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T20:50:21Z",
      "updated_at": "2017-06-20T21:57:58Z",
      "closed_at": "2017-06-20T21:57:57Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10415",
        "html_url": "https://github.com/apple/swift/pull/10415",
        "diff_url": "https://github.com/apple/swift/pull/10415.diff",
        "patch_url": "https://github.com/apple/swift/pull/10415.patch"
      },
      "body": "Per Devin and John's review.",
      "score": 1.2052245
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10416",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10416/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10416/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10416/events",
      "html_url": "https://github.com/apple/swift/pull/10416",
      "id": 237342106,
      "number": 10416,
      "title": "Add unit test to confirm ordering of Codable diags",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-20T20:54:15Z",
      "updated_at": "2017-06-20T23:11:45Z",
      "closed_at": "2017-06-20T23:11:45Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10416",
        "html_url": "https://github.com/apple/swift/pull/10416",
        "diff_url": "https://github.com/apple/swift/pull/10416.diff",
        "patch_url": "https://github.com/apple/swift/pull/10416.patch"
      },
      "body": "**What's in this pull request?**\r\nAdds a FileCheck test to confirm the behavior of #10253. Also catches and fixes a silly diagnostic typo.",
      "score": 1.2055455
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10417",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10417/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10417/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10417/events",
      "html_url": "https://github.com/apple/swift/pull/10417",
      "id": 237349930,
      "number": 10417,
      "title": "[4.0] Sema: missing switch case fixits should print payload names explicitly instead of printing underscores. rdar://32121806",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-20T21:24:24Z",
      "updated_at": "2017-06-20T22:37:42Z",
      "closed_at": "2017-06-20T22:37:40Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10417",
        "html_url": "https://github.com/apple/swift/pull/10417",
        "diff_url": "https://github.com/apple/swift/pull/10417.diff",
        "patch_url": "https://github.com/apple/swift/pull/10417.patch"
      },
      "body": "Explanation: The fixit for missing enum cases used to insert `_` for associated values of enum cases, which is not informative enough. As a consequence, it may create an extra step of jump to definition to figure out what the associate values signify. This patch changes \"_\" to using the actual payload name, e.g. \"let X\" in the content fixits create.\r\nReviewed by: @CodaFi \r\nScope: Compiler Fixit\r\nRadar: rdar://32121806\r\nRisk: Low\r\nTesting: Existing test updated",
      "score": 1.2055801
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10418",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10418/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10418/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10418/events",
      "html_url": "https://github.com/apple/swift/pull/10418",
      "id": 237353518,
      "number": 10418,
      "title": "Finish off the log part of _swift_checkClassAndWarnForKeyedArchiving.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 10,
      "created_at": "2017-06-20T21:39:54Z",
      "updated_at": "2017-06-21T00:15:31Z",
      "closed_at": "2017-06-21T00:15:29Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10418",
        "html_url": "https://github.com/apple/swift/pull/10418",
        "diff_url": "https://github.com/apple/swift/pull/10418.diff",
        "patch_url": "https://github.com/apple/swift/pull/10418.patch"
      },
      "body": "Logs a warning the first time a problematic class is archived or unarchived. We expect people to actually fix these issues, so the performance of the warning isn't too important.\r\n\r\nSample output:\r\n\r\n```\r\n[timestamp] Attempting to archive Swift class '_Test.Outer.ArchivedThenUnarchived', which does not have a stable runtime name.\r\n[timestamp] Use the 'objc' attribute to ensure that the runtime name will not change: \"@objc(_TtCC5_Test5Outer22ArchivedThenUnarchived)\"\r\n[timestamp] If there are no existing archives containing this class, you can choose a unique, prefixed name instead: \"@objc(ABCArchivedThenUnarchived)\"\r\n```\r\n\r\nFinishes rdar://problem/32414508",
      "score": 1.2060649
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10419",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10419/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10419/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10419/events",
      "html_url": "https://github.com/apple/swift/pull/10419",
      "id": 237354194,
      "number": 10419,
      "title": "KeyPaths: Pointer-align pointer fields within key path patterns.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T21:42:45Z",
      "updated_at": "2017-06-20T23:44:11Z",
      "closed_at": "2017-06-20T23:44:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10419",
        "html_url": "https://github.com/apple/swift/pull/10419",
        "diff_url": "https://github.com/apple/swift/pull/10419.diff",
        "patch_url": "https://github.com/apple/swift/pull/10419.patch"
      },
      "body": "To get the full benefit of dyld3 on Darwin platforms, pointer relocations need to be pointer-aligned, which unfortunately requires growing some key path data structures a little bit. This does tidy up some code that had to hack around our lack of unaligned load/store operations on UnsafeRawPointer, at least. While we're here, we can also simplify the identification strategy for reabstracted stored properties; we only need the property index to identify, not the absolute offset. rdar://problem/32318829",
      "score": 1.2059543
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10420",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10420/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10420/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10420/events",
      "html_url": "https://github.com/apple/swift/pull/10420",
      "id": 237354892,
      "number": 10420,
      "title": "[4.0] KeyPaths: Pointer-align pointer fields within key path patterns.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-20T21:46:06Z",
      "updated_at": "2017-06-21T22:10:05Z",
      "closed_at": "2017-06-21T22:10:05Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10420",
        "html_url": "https://github.com/apple/swift/pull/10420",
        "diff_url": "https://github.com/apple/swift/pull/10420.diff",
        "patch_url": "https://github.com/apple/swift/pull/10420.patch"
      },
      "body": "Explanation: To get the full benefit of dyld3 on Darwin platforms, pointer relocations need to be pointer-aligned. The key path implementation originally packed pointers in order to save memory.\r\n\r\nScope: Any code using literal key path objects would raise \"pointer not aligned\" linker warnings in Xcode 9.\r\n\r\nIssue: rdar://problem/32318829\r\n\r\nRisk: Low, incremental change to new feature whose potential fallout should be isolated to key paths.\r\n\r\nTesting: Swift CI",
      "score": 1.2114466
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10421",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10421/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10421/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10421/events",
      "html_url": "https://github.com/apple/swift/pull/10421",
      "id": 237357210,
      "number": 10421,
      "title": "[swiftc (31 vs. 5563)] Add crasher in swift::TypeBase::getContextSubstitutions",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T21:57:00Z",
      "updated_at": "2017-06-21T00:05:11Z",
      "closed_at": "2017-06-21T00:05:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10421",
        "html_url": "https://github.com/apple/swift/pull/10421",
        "diff_url": "https://github.com/apple/swift/pull/10421.diff",
        "patch_url": "https://github.com/apple/swift/pull/10421.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getContextSubstitutions`.\n\nCurrent number of unresolved compiler crashers: 31 (5563 resolved)\n\nStack trace:\n\n```\n0 0x0000000003a765e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a765e8)\n1 0x0000000003a76d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3a76d26)\n2 0x00007f8cf176b390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00000000015cef7b swift::TypeBase::getContextSubstitutions(swift::DeclContext const*, swift::GenericEnvironment*) (/path/to/swift/bin/swift+0x15cef7b)\n4 0x00000000015ca9c0 swift::TypeBase::getContextSubstitutionMap(swift::ModuleDecl*, swift::DeclContext const*, swift::GenericEnvironment*) (/path/to/swift/bin/swift+0x15ca9c0)\n5 0x0000000001445fbf swift::createDesignatedInitOverride(swift::TypeChecker&, swift::ClassDecl*, swift::ConstructorDecl*, swift::DesignatedInitKind) (/path/to/swift/bin/swift+0x1445fbf)\n6 0x000000000135cd06 swift::TypeChecker::addImplicitConstructors(swift::NominalTypeDecl*) (/path/to/swift/bin/swift+0x135cd06)\n7 0x0000000001365f65 (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1365f65)\n8 0x000000000135538e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135538e)\n9 0x0000000001365e3b (anonymous namespace)::DeclChecker::visitStructDecl(swift::StructDecl*) (/path/to/swift/bin/swift+0x1365e3b)\n10 0x0000000001355274 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1355274)\n11 0x000000000136584b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x136584b)\n12 0x00000000013552c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x13552c4)\n13 0x0000000001355193 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1355193)\n14 0x00000000013dff8a swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13dff8a)\n15 0x0000000000f9de7d swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf9de7d)\n16 0x00000000004abe79 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe79)\n17 0x00000000004aa419 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa419)\n18 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n19 0x00007f8cefc7b830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n20 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.2061208
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10422",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10422/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10422/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10422/events",
      "html_url": "https://github.com/apple/swift/pull/10422",
      "id": 237360509,
      "number": 10422,
      "title": "[ClangImporter] Don't pass API notes options when compiling bitcode.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T22:12:35Z",
      "updated_at": "2017-06-20T23:02:35Z",
      "closed_at": "2017-06-20T23:02:35Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10422",
        "html_url": "https://github.com/apple/swift/pull/10422",
        "diff_url": "https://github.com/apple/swift/pull/10422.diff",
        "patch_url": "https://github.com/apple/swift/pull/10422.patch"
      },
      "body": "Avoids a bogus \"argument unused\" warning, since bitcode compilation doesn't bother to set up much of a Clang AST context. (`-embed-bitcode` compiles in two steps: source -> bitcode, then bitcode -> object file. This is about the second step.)\r\n\r\nPatch by @bob-wilson, who's currently on vacation but wanted this to get in sooner rather than later.\r\n\r\nrdar://problem/31372950",
      "score": 1.2059565
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10423",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10423/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10423/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10423/events",
      "html_url": "https://github.com/apple/swift/pull/10423",
      "id": 237364643,
      "number": 10423,
      "title": "[NFC] Miscellaneous cleanups for Parameters/Tuple Types",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T22:35:38Z",
      "updated_at": "2017-06-21T17:58:39Z",
      "closed_at": "2017-06-21T17:58:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10423",
        "html_url": "https://github.com/apple/swift/pull/10423",
        "diff_url": "https://github.com/apple/swift/pull/10423.diff",
        "patch_url": "https://github.com/apple/swift/pull/10423.patch"
      },
      "body": "* Move IsInOut bit into the type parameter flags and\r\nmake sure to serialize it.\r\n\r\n* Remove some unused constructors and accessors.\r\n",
      "score": 1.2107043
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10424",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10424/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10424/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10424/events",
      "html_url": "https://github.com/apple/swift/pull/10424",
      "id": 237366254,
      "number": 10424,
      "title": "[Syntax] Don't serialize text for simple tokens",
      "user": {
        "login": "harlanhaskins",
        "id": 853032,
        "avatar_url": "https://avatars1.githubusercontent.com/u/853032?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harlanhaskins",
        "html_url": "https://github.com/harlanhaskins",
        "followers_url": "https://api.github.com/users/harlanhaskins/followers",
        "following_url": "https://api.github.com/users/harlanhaskins/following{/other_user}",
        "gists_url": "https://api.github.com/users/harlanhaskins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/harlanhaskins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/harlanhaskins/subscriptions",
        "organizations_url": "https://api.github.com/users/harlanhaskins/orgs",
        "repos_url": "https://api.github.com/users/harlanhaskins/repos",
        "events_url": "https://api.github.com/users/harlanhaskins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/harlanhaskins/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T22:44:39Z",
      "updated_at": "2017-06-20T23:23:11Z",
      "closed_at": "2017-06-20T23:23:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10424",
        "html_url": "https://github.com/apple/swift/pull/10424",
        "diff_url": "https://github.com/apple/swift/pull/10424.diff",
        "patch_url": "https://github.com/apple/swift/pull/10424.patch"
      },
      "body": "The text for `tok::kw_struct`, and similar, are always known.\r\nSave space by not serializing them.",
      "score": 1.2062234
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10425",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10425/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10425/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10425/events",
      "html_url": "https://github.com/apple/swift/pull/10425",
      "id": 237371094,
      "number": 10425,
      "title": "[ClangImporter] Don't pass API notes options when compiling bitcode.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T23:14:44Z",
      "updated_at": "2017-06-21T00:21:40Z",
      "closed_at": "2017-06-21T00:21:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10425",
        "html_url": "https://github.com/apple/swift/pull/10425",
        "diff_url": "https://github.com/apple/swift/pull/10425.diff",
        "patch_url": "https://github.com/apple/swift/pull/10425.patch"
      },
      "body": "- **Explanation**: We were setting up our embedded Clang context with API notes options even when trying to compile bitcode. This resulted in an \"argument unused\" warning, since these options have no effect on bitcode compilation. Stop doing that. (`-embed-bitcode` compiles in two steps: source -> bitcode, then bitcode -> object file. This is about the second step.)\r\n- **Scope**: Affects builds with `-embed-bitcode` turned on.\r\n- **Radar**: rdar://problem/31372950\r\n- **Reviewed by**: me (patch by @bob-wilson)\r\n- **Risk**: Very low. These arguments would have been ignored anyway.\r\n- **Testing**: Added compiler regression test.",
      "score": 1.2066325
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10426",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10426/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10426/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10426/events",
      "html_url": "https://github.com/apple/swift/pull/10426",
      "id": 237374459,
      "number": 10426,
      "title": "[Parse] Provide better diagnostics for `func 1() {}`.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T23:36:22Z",
      "updated_at": "2017-06-21T17:35:23Z",
      "closed_at": "2017-06-21T17:35:23Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10426",
        "html_url": "https://github.com/apple/swift/pull/10426",
        "diff_url": "https://github.com/apple/swift/pull/10426.diff",
        "patch_url": "https://github.com/apple/swift/pull/10426.patch"
      },
      "body": "It is apparently a common mistake for beginners to start the names of functions\r\netc. with numbers, and before this patch the diagnostic wasn't specific about\r\nthe problem. It seems likely that most instances of `func 1(...` will be\r\nmistakes in this vein, so this patch specifically diagnoses that case, and also\r\nparses the number as the identifier to avoid follow on errors about top-level\r\nclosures (from the {}) and other invalid syntax.\r\n\r\nFixes rdar://problem/32316666 .\r\n",
      "score": 1.2109572
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10427",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10427/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10427/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10427/events",
      "html_url": "https://github.com/apple/swift/pull/10427",
      "id": 237375883,
      "number": 10427,
      "title": "Sema: Ensure the array type for variadic tuple shuffles is always set.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T23:44:30Z",
      "updated_at": "2017-06-21T16:22:00Z",
      "closed_at": "2017-06-21T16:22:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10427",
        "html_url": "https://github.com/apple/swift/pull/10427",
        "diff_url": "https://github.com/apple/swift/pull/10427.diff",
        "patch_url": "https://github.com/apple/swift/pull/10427.patch"
      },
      "body": "We neglected to set it on one path (a scalar-to-tuple conversion path currently only taken by subscript applications). Change TupleShuffleExpr's constructor to take it as an argument so this mistake is harder to make in the future. Fixes SR-5264 | rdar://problem/32860988.",
      "score": 1.2107047
    }
  ]
}

