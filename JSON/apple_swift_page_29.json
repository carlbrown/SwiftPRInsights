{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10604",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10604/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10604/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10604/events",
      "html_url": "https://github.com/apple/swift/pull/10604",
      "id": 238700135,
      "number": 10604,
      "title": "SourceKit: Refactor Kinds UIDs to ProtocolUIDs.def. NFC",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-26T23:46:46Z",
      "updated_at": "2017-06-27T17:51:51Z",
      "closed_at": "2017-06-27T17:51:48Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10604",
        "html_url": "https://github.com/apple/swift/pull/10604",
        "diff_url": "https://github.com/apple/swift/pull/10604.diff",
        "patch_url": "https://github.com/apple/swift/pull/10604.patch"
      },
      "body": "\"Kind\" is a frequently appearing concept in SourceKitD. This patch\r\nrefactor the definitions of these \"Kinds\" and their associated values\r\n into the single protocol file. Ideally, we should structurally define Kinds instead of this\r\nflat list.",
      "score": 1.2991649
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10605",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10605/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10605/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10605/events",
      "html_url": "https://github.com/apple/swift/pull/10605",
      "id": 238703473,
      "number": 10605,
      "title": "Refactor SILGenApply::visitDeclRefExpr()",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T00:10:15Z",
      "updated_at": "2017-06-27T06:08:02Z",
      "closed_at": "2017-06-27T06:08:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10605",
        "html_url": "https://github.com/apple/swift/pull/10605",
        "diff_url": "https://github.com/apple/swift/pull/10605.diff",
        "patch_url": "https://github.com/apple/swift/pull/10605.patch"
      },
      "body": "This PR performs some cleanup of SILGenApply::visitDeclRefExpr(). It and a bunch of its parts were very large and yield more compact subroutines. This makes the code easier to reason about.\r\n\r\nrdar://31880847",
      "score": 1.2963052
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10606",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10606/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10606/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10606/events",
      "html_url": "https://github.com/apple/swift/pull/10606",
      "id": 238704713,
      "number": 10606,
      "title": "[Syntax] [NFC] Represent TokenSyntax as a Syntax node",
      "user": {
        "login": "harlanhaskins",
        "id": 853032,
        "avatar_url": "https://avatars1.githubusercontent.com/u/853032?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harlanhaskins",
        "html_url": "https://github.com/harlanhaskins",
        "followers_url": "https://api.github.com/users/harlanhaskins/followers",
        "following_url": "https://api.github.com/users/harlanhaskins/following{/other_user}",
        "gists_url": "https://api.github.com/users/harlanhaskins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/harlanhaskins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/harlanhaskins/subscriptions",
        "organizations_url": "https://api.github.com/users/harlanhaskins/orgs",
        "repos_url": "https://api.github.com/users/harlanhaskins/repos",
        "events_url": "https://api.github.com/users/harlanhaskins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/harlanhaskins/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-27T00:20:02Z",
      "updated_at": "2017-06-27T18:08:23Z",
      "closed_at": "2017-06-27T18:08:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10606",
        "html_url": "https://github.com/apple/swift/pull/10606",
        "diff_url": "https://github.com/apple/swift/pull/10606.diff",
        "patch_url": "https://github.com/apple/swift/pull/10606.patch"
      },
      "body": "Previously, users of `TokenSyntax` would always deal with `RC<TokenSyntax>`\r\nwhich is a subclass of `RawSyntax`. Instead, provide `TokenSyntax` as a\r\nfully-realized `Syntax` node, that will always exist as a leaf in the tree.\r\n\r\nThis hides the implementation detail of `RawSyntax` and `SyntaxData`\r\ncompletely from clients of libSyntax, and paves the way for future\r\ngeneration of `Syntax` nodes.\r\n",
      "score": 1.2994463
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10607",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10607/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10607/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10607/events",
      "html_url": "https://github.com/apple/swift/pull/10607",
      "id": 238704807,
      "number": 10607,
      "title": "[Migrator] Make sure to lowercase properties in SetterToProperty",
      "user": {
        "login": "bitjammer",
        "id": 693829,
        "avatar_url": "https://avatars1.githubusercontent.com/u/693829?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitjammer",
        "html_url": "https://github.com/bitjammer",
        "followers_url": "https://api.github.com/users/bitjammer/followers",
        "following_url": "https://api.github.com/users/bitjammer/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitjammer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitjammer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitjammer/subscriptions",
        "organizations_url": "https://api.github.com/users/bitjammer/orgs",
        "repos_url": "https://api.github.com/users/bitjammer/repos",
        "events_url": "https://api.github.com/users/bitjammer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitjammer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-06-27T00:20:43Z",
      "updated_at": "2017-06-27T19:26:14Z",
      "closed_at": "2017-06-27T19:26:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10607",
        "html_url": "https://github.com/apple/swift/pull/10607",
        "diff_url": "https://github.com/apple/swift/pull/10607.diff",
        "patch_url": "https://github.com/apple/swift/pull/10607.patch"
      },
      "body": "Previously we were only stripping `set` from the name and not\r\nlowercasing the property.\r\n\r\nrdar://problem/32845968",
      "score": 1.2997841
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10608",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10608/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10608/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10608/events",
      "html_url": "https://github.com/apple/swift/pull/10608",
      "id": 238706331,
      "number": 10608,
      "title": "[emacs] Don't require tramp to be loaded.",
      "user": {
        "login": "gparker42",
        "id": 992218,
        "avatar_url": "https://avatars2.githubusercontent.com/u/992218?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gparker42",
        "html_url": "https://github.com/gparker42",
        "followers_url": "https://api.github.com/users/gparker42/followers",
        "following_url": "https://api.github.com/users/gparker42/following{/other_user}",
        "gists_url": "https://api.github.com/users/gparker42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gparker42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gparker42/subscriptions",
        "organizations_url": "https://api.github.com/users/gparker42/orgs",
        "repos_url": "https://api.github.com/users/gparker42/repos",
        "events_url": "https://api.github.com/users/gparker42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gparker42/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T00:32:22Z",
      "updated_at": "2017-06-28T00:50:31Z",
      "closed_at": "2017-06-28T00:49:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10608",
        "html_url": "https://github.com/apple/swift/pull/10608",
        "diff_url": "https://github.com/apple/swift/pull/10608.diff",
        "patch_url": "https://github.com/apple/swift/pull/10608.patch"
      },
      "body": "",
      "score": 1.301246
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10609",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10609/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10609/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10609/events",
      "html_url": "https://github.com/apple/swift/pull/10609",
      "id": 238708982,
      "number": 10609,
      "title": "[4.0]migrator: handle qualified replacement for member reference expression. rdar://32845918 (#10593)",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-27T00:54:18Z",
      "updated_at": "2017-06-27T03:32:12Z",
      "closed_at": "2017-06-27T03:32:09Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10609",
        "html_url": "https://github.com/apple/swift/pull/10609",
        "diff_url": "https://github.com/apple/swift/pull/10609.diff",
        "patch_url": "https://github.com/apple/swift/pull/10609.patch"
      },
      "body": "Previously, we only handle dot syntax call expression for qualified\r\nreplacement, i.e. changing from A.a to B.b. This patch teaches the tool\r\nto handle the migration of member reference expression tool.\r\n",
      "score": 1.2959193
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10610",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10610/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10610/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10610/events",
      "html_url": "https://github.com/apple/swift/pull/10610",
      "id": 238713475,
      "number": 10610,
      "title": "Teach SILFunctionType to start walking parameters",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T01:30:32Z",
      "updated_at": "2017-06-27T04:04:25Z",
      "closed_at": "2017-06-27T04:04:22Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10610",
        "html_url": "https://github.com/apple/swift/pull/10610",
        "diff_url": "https://github.com/apple/swift/pull/10610.diff",
        "patch_url": "https://github.com/apple/swift/pull/10610.patch"
      },
      "body": "This seems to cause random failures in the exclusivity checking code for some reason.\r\n\r\nWe'll see what happens.",
      "score": 1.296286
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10611",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10611/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10611/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10611/events",
      "html_url": "https://github.com/apple/swift/pull/10611",
      "id": 238714552,
      "number": 10611,
      "title": "[emacs] Preserve compatibility with Emacs 22.",
      "user": {
        "login": "gparker42",
        "id": 992218,
        "avatar_url": "https://avatars2.githubusercontent.com/u/992218?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gparker42",
        "html_url": "https://github.com/gparker42",
        "followers_url": "https://api.github.com/users/gparker42/followers",
        "following_url": "https://api.github.com/users/gparker42/following{/other_user}",
        "gists_url": "https://api.github.com/users/gparker42/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gparker42/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gparker42/subscriptions",
        "organizations_url": "https://api.github.com/users/gparker42/orgs",
        "repos_url": "https://api.github.com/users/gparker42/repos",
        "events_url": "https://api.github.com/users/gparker42/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gparker42/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2017-06-27T01:39:09Z",
      "updated_at": "2017-06-28T00:50:30Z",
      "closed_at": "2017-06-28T00:50:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10611",
        "html_url": "https://github.com/apple/swift/pull/10611",
        "diff_url": "https://github.com/apple/swift/pull/10611.diff",
        "patch_url": "https://github.com/apple/swift/pull/10611.patch"
      },
      "body": "...which is still the command-line emacs on macOS.\r\n",
      "score": 1.3016713
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10612",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10612/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10612/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10612/events",
      "html_url": "https://github.com/apple/swift/pull/10612",
      "id": 238719381,
      "number": 10612,
      "title": "[ClangImporter] Filter import-as-member decls by preferred submodule.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 7,
      "created_at": "2017-06-27T02:17:30Z",
      "updated_at": "2017-06-27T16:00:50Z",
      "closed_at": "2017-06-27T16:00:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10612",
        "html_url": "https://github.com/apple/swift/pull/10612",
        "diff_url": "https://github.com/apple/swift/pull/10612.diff",
        "patch_url": "https://github.com/apple/swift/pull/10612.patch"
      },
      "body": "That is, if a member is redeclarable, use the module of the definition if possible, and the canonical declaration otherwise. This is consistent with what we do when we actually import the declaration. Without this, we can end up dropping declarations.\r\n\r\nrdar://problem/32816381",
      "score": 1.2996436
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10613",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10613/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10613/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10613/events",
      "html_url": "https://github.com/apple/swift/pull/10613",
      "id": 238719429,
      "number": 10613,
      "title": "Explicitly specify target for sanitizer tests.",
      "user": {
        "login": "cheshire",
        "id": 348959,
        "avatar_url": "https://avatars0.githubusercontent.com/u/348959?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cheshire",
        "html_url": "https://github.com/cheshire",
        "followers_url": "https://api.github.com/users/cheshire/followers",
        "following_url": "https://api.github.com/users/cheshire/following{/other_user}",
        "gists_url": "https://api.github.com/users/cheshire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cheshire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cheshire/subscriptions",
        "organizations_url": "https://api.github.com/users/cheshire/orgs",
        "repos_url": "https://api.github.com/users/cheshire/repos",
        "events_url": "https://api.github.com/users/cheshire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cheshire/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T02:17:49Z",
      "updated_at": "2017-06-27T17:52:32Z",
      "closed_at": "2017-06-27T17:52:28Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10613",
        "html_url": "https://github.com/apple/swift/pull/10613",
        "diff_url": "https://github.com/apple/swift/pull/10613.diff",
        "patch_url": "https://github.com/apple/swift/pull/10613.patch"
      },
      "body": "When compiling for iOS for a minimal supported version (7) a build error\r\nis encountered when a dylib is used.\r\nThis patch avoids this error by changing all sanitizer tests to use iOS\r\nversion 8+.\r\n",
      "score": 1.3001238
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10616",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10616/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10616/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10616/events",
      "html_url": "https://github.com/apple/swift/pull/10616",
      "id": 238739234,
      "number": 10616,
      "title": "[4.0] [QoI] Improve contextual error diagnostics related to calls",
      "user": {
        "login": "xedin",
        "id": 21240,
        "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xedin",
        "html_url": "https://github.com/xedin",
        "followers_url": "https://api.github.com/users/xedin/followers",
        "following_url": "https://api.github.com/users/xedin/following{/other_user}",
        "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
        "organizations_url": "https://api.github.com/users/xedin/orgs",
        "repos_url": "https://api.github.com/users/xedin/repos",
        "events_url": "https://api.github.com/users/xedin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xedin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 3,
      "created_at": "2017-06-27T05:14:36Z",
      "updated_at": "2017-06-27T17:36:26Z",
      "closed_at": "2017-06-27T17:36:26Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10616",
        "html_url": "https://github.com/apple/swift/pull/10616",
        "diff_url": "https://github.com/apple/swift/pull/10616.diff",
        "patch_url": "https://github.com/apple/swift/pull/10616.patch"
      },
      "body": "* Description: Currently some contextual errors are discovered too late\r\n                       which leads to diagnostics of unrelated problems like argument\r\n                       mismatches, these changes attempt to improve the situation\r\n                       and try to diagnose contextual errors related to calls\r\n                       before everything else.\r\n\r\n* Scope of the issue: diagnostic improvements for contextual errors related to calls.\r\n\r\n* Risk: Low.\r\n\r\n* Tested: New test cases added, Swift CI.\r\n\r\n* Reviewed by: Mark Lacey.\r\n\r\n* Resolves: SR-5045, rdar://problem/32934129\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.3011761
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10617",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10617/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10617/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10617/events",
      "html_url": "https://github.com/apple/swift/pull/10617",
      "id": 238745412,
      "number": 10617,
      "title": "Use the debugger hook, `reportToDebugger`, for all calls to _swift_stdlib_reportFatalError[InFile]",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T06:03:18Z",
      "updated_at": "2017-06-29T16:12:26Z",
      "closed_at": "2017-06-29T16:12:26Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10617",
        "html_url": "https://github.com/apple/swift/pull/10617",
        "diff_url": "https://github.com/apple/swift/pull/10617.diff",
        "patch_url": "https://github.com/apple/swift/pull/10617.patch"
      },
      "body": "Use the debugger hook, `reportToDebugger`, for all calls to _swift_stdlib_reportFatalError[InFile].  Only do this when a hidden frontend flag, `-report-errors-to-debugger`, is used.\r\n\r\nThis PR starts using the debugger hook for reporting runtime-detected issues to the LLDB.  The debugger hook is currently being used only for non-fatal errors and errors where we need to provide extra information to help users debug the issue (exclusivity violations, `@objc` inference issues).  This PR extends this to most common fatal issues coming from user code, including:\r\n\r\n- force unwrapping nil\r\n- out-of-bounds indexing into arrays\r\n- precondition failures, assertion failures\r\n- `fatalError()` calls\r\n- exceptions caught with `try!`\r\n\r\nIn those cases, we'll just hand over the prefix+message to the debugger.  For preconditions, assertions, fatalErrors and exceptions that have a custom message string, this string is also part of the description passed to the debugger.  Note that this does not include arithmetic overflows, which still emit a direct trap instruction, and does not include failed dynamic force-casts with `as!`.\r\n\r\nSince this affects a lot of code and triggers new codepaths in LLDB in common scenarios, let's stage this in by hiding it under a flag first.  To use this, add `-Xfrontend -report-errors-to-debugger` to compilation of the main executable.  The staging code which adds, sets and reads the flag is temporary — it will eventually be removed.",
      "score": 1.313556
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10618",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10618/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10618/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10618/events",
      "html_url": "https://github.com/apple/swift/pull/10618",
      "id": 238763292,
      "number": 10618,
      "title": "Remove a redundant input type destructuring primitive",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T07:43:06Z",
      "updated_at": "2017-06-27T15:57:57Z",
      "closed_at": "2017-06-27T08:16:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10618",
        "html_url": "https://github.com/apple/swift/pull/10618",
        "diff_url": "https://github.com/apple/swift/pull/10618.diff",
        "patch_url": "https://github.com/apple/swift/pull/10618.patch"
      },
      "body": "",
      "score": 1.2997265
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10620",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10620/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10620/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10620/events",
      "html_url": "https://github.com/apple/swift/pull/10620",
      "id": 238824987,
      "number": 10620,
      "title": "[swiftc (40 vs. 5572)] Add crasher in swift::SILModule::getOrCreateFunction",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T11:50:55Z",
      "updated_at": "2017-06-27T13:22:22Z",
      "closed_at": "2017-06-27T13:22:22Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10620",
        "html_url": "https://github.com/apple/swift/pull/10620",
        "diff_url": "https://github.com/apple/swift/pull/10620.diff",
        "patch_url": "https://github.com/apple/swift/pull/10620.patch"
      },
      "body": "Add test case for crash triggered in `swift::SILModule::getOrCreateFunction`.\n\nCurrent number of unresolved compiler crashers: 40 (5572 resolved)\n\n/cc @swiftix - just wanted to let you know that this crasher caused an assertion failure for the assertion `fn->getLoweredFunctionType() == constantType` added on 2015-04-07 by you in commit 0c2fc7c1 :-)\n\nAssertion failure in [`lib/SIL/SILModule.cpp (line 293)`](https://github.com/apple/swift/blob/a8b5a4a18a8251821ade000acdda4f87518fa227/lib/SIL/SILModule.cpp#L293):\n\n```\nAssertion `fn->getLoweredFunctionType() == constantType' failed.\n\nWhen executing: swift::SILFunction *swift::SILModule::getOrCreateFunction(swift::SILLocation, swift::SILDeclRef, swift::ForDefinition_t)\n```\n\nAssertion context:\n\n```c++\n  auto name = constant.mangle();\n  auto constantType = Types.getConstantType(constant).castTo<SILFunctionType>();\n  SILLinkage linkage = constant.getLinkage(forDefinition);\n\n  if (auto fn = lookUpFunction(name)) {\n    assert(fn->getLoweredFunctionType() == constantType);\n    assert(fn->getLinkage() == linkage ||\n           (forDefinition == ForDefinition_t::NotForDefinition &&\n            fn->getLinkage() ==\n                constant.getLinkage(ForDefinition_t::ForDefinition)));\n    if (forDefinition) {\n```\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007fd2db0c4390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fd2d95e9428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fd2d95eb02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fd2d95e1bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fd2d95e1c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x0000000001084b4f swift::SILModule::getOrCreateFunction(swift::SILLocation, swift::SILDeclRef, swift::ForDefinition_t) (/path/to/swift/bin/swift+0x1084b4f)\n8 0x0000000000baf1f0 swift::Lowering::SILGenModule::getFunction(swift::SILDeclRef, swift::ForDefinition_t) (/path/to/swift/bin/swift+0xbaf1f0)\n9 0x0000000000c3fc77 swift::Lowering::SILGenModule::emitNativeToForeignThunk(swift::SILDeclRef) (/path/to/swift/bin/swift+0xc3fc77)\n10 0x0000000000bb05d0 swift::Lowering::SILGenModule::emitAbstractFuncDecl(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0xbb05d0)\n11 0x0000000000baf768 swift::Lowering::SILGenModule::emitFunction(swift::FuncDecl*) (/path/to/swift/bin/swift+0xbaf768)\n12 0x0000000000bb58cf swift::ASTVisitor<swift::Lowering::SILGenModule, void, void, void, void, void, void>::visit(swift::Decl*) (/path/to/swift/bin/swift+0xbb58cf)\n13 0x0000000000bb4dab swift::Lowering::SILGenModule::emitSourceFile(swift::SourceFile*, unsigned int) (/path/to/swift/bin/swift+0xbb4dab)\n14 0x0000000000bb5d54 swift::SILModule::constructSIL(swift::ModuleDecl*, swift::SILOptions&, swift::FileUnit*, llvm::Optional<unsigned int>, bool) (/path/to/swift/bin/swift+0xbb5d54)\n15 0x0000000000bb638f swift::performSILGeneration(swift::FileUnit&, swift::SILOptions&, llvm::Optional<unsigned int>) (/path/to/swift/bin/swift+0xbb638f)\n16 0x00000000004ad32e performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad32e)\n17 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n18 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n19 0x00007fd2d95d4830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n20 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.3026099
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10621",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10621/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10621/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10621/events",
      "html_url": "https://github.com/apple/swift/pull/10621",
      "id": 238849747,
      "number": 10621,
      "title": "[swiftc (41 vs. 5572)] Add crasher in swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T13:24:21Z",
      "updated_at": "2017-06-27T14:41:21Z",
      "closed_at": "2017-06-27T14:41:20Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10621",
        "html_url": "https://github.com/apple/swift/pull/10621",
        "diff_url": "https://github.com/apple/swift/pull/10621.diff",
        "patch_url": "https://github.com/apple/swift/pull/10621.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance`.\n\nCurrent number of unresolved compiler crashers: 41 (5572 resolved)\n\n/cc @DougGregor - just wanted to let you know that this crasher caused an assertion failure for the assertion `parentEquiv->conformsTo.count(proto) > 0 && \"No conformance requirement\"` added on 2017-06-06 by you in commit 52e52b56 :-)\n\nAssertion failure in [`lib/AST/GenericSignatureBuilder.cpp (line 1750)`](https://github.com/apple/swift/blob/f248c3c83ec6e88e0b1572b24d10f4ae9779332f/lib/AST/GenericSignatureBuilder.cpp#L1750):\n\n```\nAssertion `parentEquiv->conformsTo.count(proto) > 0 && \"No conformance requirement\"' failed.\n\nWhen executing: void concretizeNestedTypeFromConcreteParent(GenericSignatureBuilder::PotentialArchetype *, GenericSignatureBuilder::PotentialArchetype *, swift::GenericSignatureBuilder &)\n```\n\nAssertion context:\n\n```c++\n  auto assocType = nestedPA->getResolvedAssociatedType();\n  if (!assocType) return;\n\n  auto proto = assocType->getProtocol();\n  assert(parentEquiv->conformsTo.count(proto) > 0 &&\n         \"No conformance requirement\");\n  const RequirementSource *parentConcreteSource = nullptr;\n  for (const auto &constraint : parentEquiv->conformsTo.find(proto)->second) {\n    if (constraint.source->kind == RequirementSource::Concrete) {\n      parentConcreteSource = constraint.source;\n    }\n```\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007f2aa2563390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f2aa0a88428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f2aa0a8a02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f2aa0a80bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f2aa0a80c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000157e612 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x157e612)\n8 0x000000000157d6ef swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance(llvm::PointerUnion<swift::AssociatedTypeDecl*, swift::TypeDecl*>, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x157d6ef)\n9 0x000000000157d21c swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance(llvm::PointerUnion<swift::AssociatedTypeDecl*, swift::TypeDecl*>, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x157d21c)\n10 0x0000000001580d49 swift::GenericSignatureBuilder::resolve(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource) (/path/to/swift/bin/swift+0x1580d49)\n11 0x000000000158714b swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x158714b)\n12 0x0000000001583407 swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x1583407)\n13 0x0000000001581556 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x1581556)\n14 0x0000000001585b35 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x1585b35)\n15 0x000000000158335b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x158335b)\n16 0x0000000001581556 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x1581556)\n17 0x0000000001585b35 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x1585b35)\n18 0x00000000015962d1 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_23>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x15962d1)\n19 0x000000000158f9a2 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_56>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x158f9a2)\n20 0x00000000015812c1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x15812c1)\n21 0x0000000001581894 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x1581894)\n22 0x0000000001585b35 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x1585b35)\n23 0x00000000015962d1 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_23>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x15962d1)\n24 0x000000000158f9a2 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_56>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x158f9a2)\n25 0x00000000015812c1 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x15812c1)\n26 0x00000000015810de swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x15810de)\n27 0x0000000001389922 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1389922)\n28 0x000000000138cf04 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x138cf04)\n29 0x000000000138d329 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x138d329)\n30 0x000000000135e3f0 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135e3f0)\n31 0x000000000136df53 (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x136df53)\n32 0x000000000135c5c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c5c4)\n33 0x000000000135c4c3 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x135c4c3)\n34 0x00000000013e7284 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e7284)\n35 0x0000000000fa3f86 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa3f86)\n36 0x00000000004abe49 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe49)\n37 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n38 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n39 0x00007f2aa0a73830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n40 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.3035438
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10622",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10622/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10622/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10622/events",
      "html_url": "https://github.com/apple/swift/pull/10622",
      "id": 238875345,
      "number": 10622,
      "title": "[swiftc (42 vs. 5572)] Add crasher in swift::GenericSignatureBuilder::Constraint",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T14:42:10Z",
      "updated_at": "2017-06-27T15:58:08Z",
      "closed_at": "2017-06-27T15:58:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10622",
        "html_url": "https://github.com/apple/swift/pull/10622",
        "diff_url": "https://github.com/apple/swift/pull/10622.diff",
        "patch_url": "https://github.com/apple/swift/pull/10622.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::Constraint`.\n\nCurrent number of unresolved compiler crashers: 42 (5572 resolved)\n\nAssertion failure in `llvm/include/llvm/ADT/Optional.h (line 129)`:\n\n```\nAssertion `hasVal' failed.\n\nWhen executing: T &llvm::Optional<swift::GenericSignatureBuilder::Constraint<swift::Type> >::operator*() & [T = swift::GenericSignatureBuilder::Constraint<swift::Type>]\n```\n\nAssertion context:\n\n```c++\n  explicit operator bool() const { return hasVal; }\n  bool hasValue() const { return hasVal; }\n  const T* operator->() const { return getPointer(); }\n  T* operator->() { return getPointer(); }\n  const T& operator*() const LLVM_LVALUE_FUNCTION { assert(hasVal); return *getPointer(); }\n  T& operator*() LLVM_LVALUE_FUNCTION { assert(hasVal); return *getPointer(); }\n\n  template <typename U>\n  constexpr T getValueOr(U &&value) const LLVM_LVALUE_FUNCTION {\n    return hasValue() ? getValue() : std::forward<U>(value);\n  }\n```\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007f3195370390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f3193895428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f319389702a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f319388dbd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f319388dc82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x0000000001599bae swift::GenericSignatureBuilder::Constraint<swift::Type> swift::GenericSignatureBuilder::checkConstraintList<swift::Type, swift::Type>(llvm::ArrayRef<swift::GenericTypeParamType*>, std::vector<swift::GenericSignatureBuilder::Constraint<swift::Type>, std::allocator<swift::GenericSignatureBuilder::Constraint<swift::Type> > >&, llvm::function_ref<bool (swift::GenericSignatureBuilder::Constraint<swift::Type> const&)>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintRelation (swift::Type const&)>, llvm::Optional<swift::Diag<unsigned int, swift::Type, swift::Type, swift::Type> >, swift::Diag<swift::Type, swift::Type>, swift::Diag<unsigned int, swift::Type, swift::Type>, llvm::function_ref<swift::Type (swift::Type const&)>, bool) (/path/to/swift/bin/swift+0x1599bae)\n8 0x000000000158c7b4 swift::GenericSignatureBuilder::checkConcreteTypeConstraints(llvm::ArrayRef<swift::GenericTypeParamType*>, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x158c7b4)\n9 0x0000000001587fd7 swift::GenericSignatureBuilder::finalize(swift::SourceLoc, llvm::ArrayRef<swift::GenericTypeParamType*>, bool) (/path/to/swift/bin/swift+0x1587fd7)\n10 0x000000000138cf40 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x138cf40)\n11 0x000000000138d329 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x138d329)\n12 0x000000000135e3f0 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x135e3f0)\n13 0x000000000136df53 (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x136df53)\n14 0x000000000135c5c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c5c4)\n15 0x000000000136e26b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x136e26b)\n16 0x000000000135c5c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c5c4)\n17 0x000000000135c4c3 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x135c4c3)\n18 0x00000000013e7284 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e7284)\n19 0x0000000000fa3f86 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa3f86)\n20 0x00000000004abe49 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe49)\n21 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n22 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n23 0x00007f3193880830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n24 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.3043693
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10623",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10623/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10623/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10623/events",
      "html_url": "https://github.com/apple/swift/pull/10623",
      "id": 238884809,
      "number": 10623,
      "title": "[4.0] [Clang importer] Infer @_downgrade_exhaustivity_check for new-to-2017 enum elements in Swift 3",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-06-27T15:09:34Z",
      "updated_at": "2017-06-27T19:53:34Z",
      "closed_at": "2017-06-27T19:53:32Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10623",
        "html_url": "https://github.com/apple/swift/pull/10623",
        "diff_url": "https://github.com/apple/swift/pull/10623.diff",
        "patch_url": "https://github.com/apple/swift/pull/10623.patch"
      },
      "body": "**Explanation**: In Swift 3 mode, downgrade the \"switch is not exhaustive\" error to a warning when the missing cases  were introduced in the 2017 SDKs. \r\n**Scope**: Fixes a source-compatibility problem with the newer SDKs for applications that are switching on enums provided by the system.\r\n**Radar**: rdar://problem/32824207.\r\n**Risk**: Low; we're inferring a new attribute in specific cases in the Clang importer, which only affects diagnostics.\r\n**Testing**: Compiler regression tests.",
      "score": 1.3055527
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10624",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10624/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10624/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10624/events",
      "html_url": "https://github.com/apple/swift/pull/10624",
      "id": 238901188,
      "number": 10624,
      "title": "[swiftc (43 vs. 5572)] Add crasher in swift::Mangle::Mangler::appendIdentifier(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T15:59:54Z",
      "updated_at": "2017-06-27T17:16:23Z",
      "closed_at": "2017-06-27T17:16:23Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10624",
        "html_url": "https://github.com/apple/swift/pull/10624",
        "diff_url": "https://github.com/apple/swift/pull/10624.diff",
        "patch_url": "https://github.com/apple/swift/pull/10624.patch"
      },
      "body": "Add test case for crash triggered in `swift::Mangle::Mangler::appendIdentifier(...)`.\n\nCurrent number of unresolved compiler crashers: 43 (5572 resolved)\n\n/cc @eeckstein - just wanted to let you know that this crasher caused an assertion failure for the assertion `!isDigit(ident[Pos]) && \"first char of sub-string may not be a digit\"` added on 2016-12-02 by you in commit 684092d7 :-)\n\nAssertion failure in [`include/swift/Demangling/ManglingUtils.h (line 195)`](https://github.com/apple/swift/blob/a45d7e3d2a07c274a64a6a9409ff853db32388aa/include/swift/Demangling/ManglingUtils.h#L195):\n\n```\nAssertion `!isDigit(ident[Pos]) && \"first char of sub-string may not be a digit\"' failed.\n\nWhen executing: void swift::Mangle::mangleIdentifier(Mangler &, llvm::StringRef) [Mangler = swift::Mangle::Mangler]\n```\n\nAssertion context:\n\n```c++\n      // Mangle the sub-string up to the next word substitution (or to the end\n      // of the identifier - that's why we added the dummy-word).\n      // The first thing: we add the encoded sub-string length.\n      M.Buffer << (Repl.StringPos - Pos);\n      assert(!isDigit(ident[Pos]) &&\n             \"first char of sub-string may not be a digit\");\n      do {\n        // Update the start position of new added words, so that they refer to\n        // the begin of the whole mangled Buffer.\n        if (WordsInBuffer < M.Words.size() &&\n            M.Words[WordsInBuffer].start == Pos) {\n```\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007f7279128390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f727764d428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f727764f02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f7277645bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f7277645c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015f5ccb void swift::Mangle::mangleIdentifier<swift::Mangle::Mangler>(swift::Mangle::Mangler&, llvm::StringRef) (/path/to/swift/bin/swift+0x15f5ccb)\n8 0x00000000015f51f6 swift::Mangle::Mangler::appendIdentifier(llvm::StringRef) (/path/to/swift/bin/swift+0x15f51f6)\n9 0x00000000014e82f0 swift::Mangle::ASTMangler::appendDeclName(swift::ValueDecl const*) (/path/to/swift/bin/swift+0x14e82f0)\n10 0x00000000014e47ab swift::Mangle::ASTMangler::appendAnyGenericType(swift::GenericTypeDecl const*) (/path/to/swift/bin/swift+0x14e47ab)\n11 0x00000000014e47a0 swift::Mangle::ASTMangler::appendAnyGenericType(swift::GenericTypeDecl const*) (/path/to/swift/bin/swift+0x14e47a0)\n12 0x00000000014e4701 swift::Mangle::ASTMangler::mangleNominalType[abi:cxx11](swift::NominalTypeDecl const*) (/path/to/swift/bin/swift+0x14e4701)\n13 0x00000000011124cd swift::ModuleFile::loadExtensions(swift::NominalTypeDecl*) (/path/to/swift/bin/swift+0x11124cd)\n14 0x00000000011776b1 swift::SerializedModuleLoader::loadExtensions(swift::NominalTypeDecl*, unsigned int) (/path/to/swift/bin/swift+0x11776b1)\n15 0x00000000014a4ae0 swift::ASTContext::loadExtensions(swift::NominalTypeDecl*, unsigned int) (/path/to/swift/bin/swift+0x14a4ae0)\n16 0x00000000015e958c swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e958c)\n17 0x00000000015e8ecf swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8ecf)\n18 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n19 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n20 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n21 0x000000000139f941 swift::TypeChecker::findWitnessedObjCRequirements(swift::ValueDecl const*, bool) (/path/to/swift/bin/swift+0x139f941)\n22 0x0000000001358fc5 inferObjCName(swift::TypeChecker&, swift::ValueDecl*) (/path/to/swift/bin/swift+0x1358fc5)\n23 0x0000000001358977 swift::markAsObjC(swift::TypeChecker&, swift::ValueDecl*, llvm::Optional<swift::ObjCReason>, llvm::Optional<swift::ForeignErrorConvention>) (/path/to/swift/bin/swift+0x1358977)\n24 0x000000000136faa7 (anonymous namespace)::DeclChecker::visitDestructorDecl(swift::DestructorDecl*) (/path/to/swift/bin/swift+0x136faa7)\n25 0x000000000135c5b4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c5b4)\n26 0x000000000135c4c3 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x135c4c3)\n27 0x000000000145003d swift::TypeChecker::addImplicitDestructor(swift::ClassDecl*) (/path/to/swift/bin/swift+0x145003d)\n28 0x000000000136d190 (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x136d190)\n29 0x000000000135c6be (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c6be)\n30 0x000000000136e26b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x136e26b)\n31 0x000000000135c5c4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x135c5c4)\n32 0x000000000135c4c3 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x135c4c3)\n33 0x00000000013e7284 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e7284)\n34 0x0000000000fa3f86 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa3f86)\n35 0x00000000004abe49 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe49)\n36 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n37 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n38 0x00007f7277638830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n39 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.3052012
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10625",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10625/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10625/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10625/events",
      "html_url": "https://github.com/apple/swift/pull/10625",
      "id": 238906222,
      "number": 10625,
      "title": "[4.0] [ClangImporter] Filter import-as-member decls by preferred submodule.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T16:16:22Z",
      "updated_at": "2017-06-28T00:38:20Z",
      "closed_at": "2017-06-28T00:38:18Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10625",
        "html_url": "https://github.com/apple/swift/pull/10625",
        "diff_url": "https://github.com/apple/swift/pull/10625.diff",
        "patch_url": "https://github.com/apple/swift/pull/10625.patch"
      },
      "body": "- **Explanation**: The \"import-as-member\" feature was not checking the right context for a definition that had previously been forward-declared elsewhere in a module; in rare circumstances this would lead to these declarations being dropped entirely.\r\n- **Scope**: Affects import-as-member declarations from Objective-C.\r\n- **Radar**: rdar://problem/32816381\r\n- **Reviewed by**: @DougGregor  \r\n- **Risk**: Low. Anything that previously got the right answer should continue to get the right answer.\r\n- **Testing**: Verified that the original test case succeeded, passed source compatibility suite on master.",
      "score": 1.3072013
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10626",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10626/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10626/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10626/events",
      "html_url": "https://github.com/apple/swift/pull/10626",
      "id": 238908317,
      "number": 10626,
      "title": "[4.0 Jun23] [ClangImporter] Filter import-as-member decls by preferred submodule.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T16:23:44Z",
      "updated_at": "2017-06-28T00:38:53Z",
      "closed_at": "2017-06-28T00:38:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10626",
        "html_url": "https://github.com/apple/swift/pull/10626",
        "diff_url": "https://github.com/apple/swift/pull/10626.diff",
        "patch_url": "https://github.com/apple/swift/pull/10626.patch"
      },
      "body": "#10625, but for the recent branch offshoot since it affects the SDKs. Reviewed by @DougGregor.",
      "score": 1.3072507
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10627",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10627/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10627/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10627/events",
      "html_url": "https://github.com/apple/swift/pull/10627",
      "id": 238915342,
      "number": 10627,
      "title": "[swift-4.0-branch][overlay] Rename scheduleOneShot and scheduleRepeating",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T16:48:58Z",
      "updated_at": "2017-06-27T18:29:47Z",
      "closed_at": "2017-06-27T18:29:42Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10627",
        "html_url": "https://github.com/apple/swift/pull/10627",
        "diff_url": "https://github.com/apple/swift/pull/10627.diff",
        "patch_url": "https://github.com/apple/swift/pull/10627.patch"
      },
      "body": "* Explanation: This change deprecates several methods of the `DispatchSourceTimer` struct, replacing them with methods that have more meaningful names. It also introduces the enumeration case `DispatchTimeInterval.never`, which can be used to specify that a timer should never fire or never repeat.\r\n* Scope of Issue: This is not a source-breaking change. The only effect on existing code is that uses of the deprecated methods will be flagged at compile time.\r\n* Risk: Since the existing methods remain and their code is almost unmodified, this is a very low-risk change.\r\n* Reviewed By: Daniel Steffen\r\n* Testing: There are tests in the Dispatch test suite that cover this code change.\r\n* Directions for QA: N/A\r\n* Radar: <rdar://problem/32991313>\r\n",
      "score": 1.305829
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10628",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10628/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10628/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10628/events",
      "html_url": "https://github.com/apple/swift/pull/10628",
      "id": 238916747,
      "number": 10628,
      "title": "[benchmark] Fix: Run test suite just once",
      "user": {
        "login": "palimondo",
        "id": 1046899,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1046899?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/palimondo",
        "html_url": "https://github.com/palimondo",
        "followers_url": "https://api.github.com/users/palimondo/followers",
        "following_url": "https://api.github.com/users/palimondo/following{/other_user}",
        "gists_url": "https://api.github.com/users/palimondo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/palimondo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/palimondo/subscriptions",
        "organizations_url": "https://api.github.com/users/palimondo/orgs",
        "repos_url": "https://api.github.com/users/palimondo/repos",
        "events_url": "https://api.github.com/users/palimondo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/palimondo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-06-27T16:54:15Z",
      "updated_at": "2017-06-27T22:13:33Z",
      "closed_at": "2017-06-27T21:59:12Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10628",
        "html_url": "https://github.com/apple/swift/pull/10628",
        "diff_url": "https://github.com/apple/swift/pull/10628.diff",
        "patch_url": "https://github.com/apple/swift/pull/10628.patch"
      },
      "body": "My last change to support running tests from `Benchmark_Driver` by their ordinal number in #10204 introduced a bug where the whole `precommit` test suite would run twice (once as named tests and once as numbered) when using just the `Benchmark_Driver run` command. This wasn't visible outside of console log, because `compare_perf_test` merges the results for the same test together. It just made benchmarking two times slower. 😞 \r\n\r\nThis PR fixes it to run just once.",
      "score": 1.3068221
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10629",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10629/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10629/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10629/events",
      "html_url": "https://github.com/apple/swift/pull/10629",
      "id": 238918005,
      "number": 10629,
      "title": "[swift-4.0-branch-06-23-2017][overlay] Rename scheduleOneShot and scheduleRepeating",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T16:58:55Z",
      "updated_at": "2017-06-27T19:15:07Z",
      "closed_at": "2017-06-27T19:15:05Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10629",
        "html_url": "https://github.com/apple/swift/pull/10629",
        "diff_url": "https://github.com/apple/swift/pull/10629.diff",
        "patch_url": "https://github.com/apple/swift/pull/10629.patch"
      },
      "body": "Similar to https://github.com/apple/swift/pull/10627",
      "score": 1.3060871
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10630",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10630/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10630/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10630/events",
      "html_url": "https://github.com/apple/swift/pull/10630",
      "id": 238918145,
      "number": 10630,
      "title": "[Type checker] Always record used conformances in the source file.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T16:59:22Z",
      "updated_at": "2017-06-27T18:12:09Z",
      "closed_at": "2017-06-27T18:11:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10630",
        "html_url": "https://github.com/apple/swift/pull/10630",
        "diff_url": "https://github.com/apple/swift/pull/10630.diff",
        "patch_url": "https://github.com/apple/swift/pull/10630.patch"
      },
      "body": "An early exit introduced in PR #10292 meant that we would only record\r\na protocol conformance as \"used\" in the first file in which we saw a\r\nreference to the conformance. Make sure we record the conformance as\r\nused in each source file that needs it. Fixes rdar://problem/32978891\r\nand rdar://problem/32980176.\r\n",
      "score": 1.3058155
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10631",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10631/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10631/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10631/events",
      "html_url": "https://github.com/apple/swift/pull/10631",
      "id": 238919022,
      "number": 10631,
      "title": "demangler: Support the future final mangling prefix $S",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T17:02:46Z",
      "updated_at": "2017-06-28T22:14:46Z",
      "closed_at": "2017-06-28T22:14:43Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10631",
        "html_url": "https://github.com/apple/swift/pull/10631",
        "diff_url": "https://github.com/apple/swift/pull/10631.diff",
        "patch_url": "https://github.com/apple/swift/pull/10631.patch"
      },
      "body": "As it’s not clear if we will need underscores, the demangler accepts $S and _$S.\r\nNote that a double underscore is handled by the demangler client.\r\n\r\nrdar://problem/32251811\r\n\r\n*) Explanation: Support the future final mangling prefix $S\r\n\r\n*) Scope: This is an enhancement of the demangler. It does not affect the compiler.\r\n\r\n*) Origin: rdar://problem/32251811\r\n\r\n*) Risk: Low. It does not affect the compilation.",
      "score": 1.3130844
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10632",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10632/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10632/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10632/events",
      "html_url": "https://github.com/apple/swift/pull/10632",
      "id": 238922578,
      "number": 10632,
      "title": "[swiftc (44 vs. 5572)] Add crasher in swift::TypeChecker::resolveType",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-27T17:17:13Z",
      "updated_at": "2017-06-27T20:36:35Z",
      "closed_at": "2017-06-27T19:22:15Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10632",
        "html_url": "https://github.com/apple/swift/pull/10632",
        "diff_url": "https://github.com/apple/swift/pull/10632.diff",
        "patch_url": "https://github.com/apple/swift/pull/10632.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::resolveType`.\n\nCurrent number of unresolved compiler crashers: 44 (5572 resolved)\n\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007f17940e3390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x0000000001495c1b swift::IterativeTypeChecker::processTypeCheckSuperclass(swift::ClassDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1495c1b)\n4 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n5 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n6 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n7 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n8 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n9 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n10 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n11 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n12 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n13 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n14 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n15 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n16 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n17 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n18 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n19 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n20 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n21 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n22 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n23 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n24 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n25 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n26 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n27 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n28 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n29 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n30 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n31 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n32 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n33 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n34 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n35 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n36 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n37 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n38 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n39 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n40 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n41 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n42 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n43 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n44 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n45 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n46 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n47 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n48 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n49 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n50 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n51 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n52 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n53 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n54 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n55 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n56 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n57 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n58 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n59 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n60 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n61 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n62 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n63 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n64 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n65 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n66 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n67 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n68 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n69 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n70 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n71 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n72 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n73 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n74 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n75 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n76 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n77 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n78 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n79 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n80 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n81 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n82 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n83 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n84 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n85 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n86 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n87 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n88 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n89 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n90 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n91 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n92 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n93 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n94 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n95 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n96 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n97 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n98 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n99 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n100 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n101 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n102 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n103 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n104 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n105 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n106 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n107 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n108 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n109 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n110 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n111 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n112 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n113 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n114 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n115 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n116 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n117 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n118 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n119 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n120 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n121 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n122 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n123 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n124 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n125 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n126 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n127 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n128 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n129 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n130 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n131 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n132 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n133 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n134 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n135 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n136 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n137 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n138 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n139 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n140 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n141 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n142 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n143 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n144 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n145 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n146 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n147 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n148 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n149 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n150 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n151 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n152 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n153 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n154 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n155 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n156 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n157 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n158 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n159 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n160 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n161 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n162 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n163 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n164 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n165 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n166 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n167 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n168 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n169 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n170 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n171 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n172 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n173 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n174 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n175 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n176 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n177 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n178 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n179 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n180 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n181 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n182 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n183 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n184 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n185 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n186 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n187 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n188 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n189 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n190 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n191 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n192 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n193 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n194 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n195 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n196 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n197 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n198 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n199 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n200 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n201 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n202 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n203 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n204 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n205 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n206 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n207 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n208 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n209 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n210 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n211 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n212 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n213 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n214 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n215 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n216 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n217 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n218 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n219 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n220 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n221 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n222 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n223 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n224 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n225 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n226 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n227 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n228 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n229 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n230 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n231 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n232 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n233 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n234 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n235 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n236 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n237 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n238 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n239 0x0000000001354740 swift::TypeChecker::resolveSuperclass(swift::ClassDecl*) (/path/to/swift/bin/swift+0x1354740)\n240 0x00000000015e8efb swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8efb)\n241 0x00000000015e8df5 swift::ConformanceLookupTable::updateLookupTable(swift::NominalTypeDecl*, swift::ConformanceLookupTable::ConformanceStage, swift::LazyResolver*) (/path/to/swift/bin/swift+0x15e8df5)\n242 0x00000000015eceee swift::ConformanceLookupTable::getAllProtocols(swift::NominalTypeDecl*, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ProtocolDecl*>&) (/path/to/swift/bin/swift+0x15eceee)\n243 0x00000000015c4e26 swift::NominalTypeDecl::getAllProtocols() const (/path/to/swift/bin/swift+0x15c4e26)\n244 0x00000000015b7d70 swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15b7d70)\n245 0x000000000138fbbf swift::TypeChecker::lookupMemberType(swift::DeclContext*, swift::Type, swift::Identifier, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x138fbbf)\n246 0x00000000013d93db resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d93db)\n247 0x00000000013d8b89 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8b89)\n248 0x00000000013d98f7 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13d98f7)\n249 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n250 0x00000000013da4d9 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13da4d9)\n251 0x00000000013d97fc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d97fc)\n252 0x00000000013d8200 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13d8200)\n253 0x0000000001496551 swift::IterativeTypeChecker::processResolveTypeDecl(swift::TypeDecl*, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x1496551)\n254 0x000000000145eb36 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145eb36)\n255 0x000000000145ebfb swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x145ebfb)\n```",
      "score": 1.3065536
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10633",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10633/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10633/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10633/events",
      "html_url": "https://github.com/apple/swift/pull/10633",
      "id": 238945566,
      "number": 10633,
      "title": "Revert \"[syntax-coloring] Rework the syntax map to use offset + length and simplify the delta logic\"",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-27T18:44:30Z",
      "updated_at": "2017-06-27T19:28:44Z",
      "closed_at": "2017-06-27T19:28:41Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10633",
        "html_url": "https://github.com/apple/swift/pull/10633",
        "diff_url": "https://github.com/apple/swift/pull/10633.diff",
        "patch_url": "https://github.com/apple/swift/pull/10633.patch"
      },
      "body": "",
      "score": 1.3068215
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10634",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10634/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10634/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10634/events",
      "html_url": "https://github.com/apple/swift/pull/10634",
      "id": 238945785,
      "number": 10634,
      "title": "[4.0] Revert \"[4.0] Fix multi-line string syntax coloring issues\"",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2017-06-27T18:45:18Z",
      "updated_at": "2017-06-28T03:32:24Z",
      "closed_at": "2017-06-28T03:32:21Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10634",
        "html_url": "https://github.com/apple/swift/pull/10634",
        "diff_url": "https://github.com/apple/swift/pull/10634.diff",
        "patch_url": "https://github.com/apple/swift/pull/10634.patch"
      },
      "body": "Reverts apple/swift#10382",
      "score": 1.3089021
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10636",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10636/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10636/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10636/events",
      "html_url": "https://github.com/apple/swift/pull/10636",
      "id": 238955667,
      "number": 10636,
      "title": "[swiftc (45 vs. 5572)] Add crasher in swift::TypeBase::getCanonicalType(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-27T19:23:18Z",
      "updated_at": "2017-06-27T20:41:15Z",
      "closed_at": "2017-06-27T20:41:15Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10636",
        "html_url": "https://github.com/apple/swift/pull/10636",
        "diff_url": "https://github.com/apple/swift/pull/10636.diff",
        "patch_url": "https://github.com/apple/swift/pull/10636.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getCanonicalType(...)`.\n\nCurrent number of unresolved compiler crashers: 45 (5572 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth && \"parameter hasn't been validated\"` added on 2017-02-22 by you in commit fdb0a186 :-)\n\nAssertion failure in [`lib/AST/Type.cpp (line 1069)`](https://github.com/apple/swift/blob/e2c4e2602ac06b5e07688ba9e1f782bc68c2380f/lib/AST/Type.cpp#L1069):\n\n```\nAssertion `gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth && \"parameter hasn't been validated\"' failed.\n\nWhen executing: swift::CanType swift::TypeBase::getCanonicalType()\n```\n\nAssertion context:\n\n```c++\n\n  case TypeKind::GenericTypeParam: {\n    GenericTypeParamType *gp = cast<GenericTypeParamType>(this);\n    auto gpDecl = gp->getDecl();\n    assert(gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth &&\n           \"parameter hasn't been validated\");\n    Result = GenericTypeParamType::get(gpDecl->getDepth(), gpDecl->getIndex(),\n                                       gpDecl->getASTContext());\n    break;\n  }\n\n```\nStack trace:\n\n```\n0 0x0000000003a81578 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a81578)\n1 0x0000000003a81cb6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a81cb6)\n2 0x00007fd371979390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fd36fe9e428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fd36fea002a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fd36fe96bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fd36fe96c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015cf907 swift::TypeBase::getCanonicalType() (/path/to/swift/bin/swift+0x15cf907)\n8 0x00000000015cee99 swift::TypeBase::getCanonicalType() (/path/to/swift/bin/swift+0x15cee99)\n9 0x000000000134f8c1 (anonymous namespace)::PreCheckExpression::simplifyTypeExpr(swift::Expr*) (/path/to/swift/bin/swift+0x134f8c1)\n10 0x000000000134e607 (anonymous namespace)::PreCheckExpression::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x134e607)\n11 0x000000000152c78c (anonymous namespace)::Traversal::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x152c78c)\n12 0x000000000152a3a7 swift::ASTVisitor<(anonymous namespace)::Traversal, swift::Expr*, swift::Stmt*, bool, swift::Pattern*, bool, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x152a3a7)\n13 0x0000000001528fbb swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x1528fbb)\n14 0x0000000001341b85 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x1341b85)\n15 0x00000000013456af swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x13456af)\n16 0x00000000013c95d5 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13c95d5)\n17 0x00000000013c8c2b swift::TypeChecker::typeCheckClosureBody(swift::ClosureExpr*) (/path/to/swift/bin/swift+0x13c8c2b)\n18 0x00000000013ecc4c swift::constraints::ConstraintSystem::applySolution(swift::constraints::Solution&, swift::Expr*, swift::Type, bool, bool, bool) (/path/to/swift/bin/swift+0x13ecc4c)\n19 0x0000000001345791 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x1345791)\n20 0x00000000013c95d5 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13c95d5)\n21 0x00000000013c8de6 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13c8de6)\n22 0x00000000013e72f0 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13e72f0)\n23 0x0000000000fa3f86 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfa3f86)\n24 0x00000000004abe49 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4abe49)\n25 0x00000000004aa3f9 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4aa3f9)\n26 0x0000000000465697 main (/path/to/swift/bin/swift+0x465697)\n27 0x00007fd36fe89830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n28 0x0000000000462d39 _start (/path/to/swift/bin/swift+0x462d39)\n```",
      "score": 1.307381
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10637",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10637/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10637/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10637/events",
      "html_url": "https://github.com/apple/swift/pull/10637",
      "id": 238966324,
      "number": 10637,
      "title": "[Type checker] Always record used conformances in the source file.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-27T20:05:29Z",
      "updated_at": "2017-06-27T23:15:27Z",
      "closed_at": "2017-06-27T21:43:25Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10637",
        "html_url": "https://github.com/apple/swift/pull/10637",
        "diff_url": "https://github.com/apple/swift/pull/10637.diff",
        "patch_url": "https://github.com/apple/swift/pull/10637.patch"
      },
      "body": "**Explanation**: An early exit introduced in PR #10292 meant that we would only record\r\na protocol conformance as \"used\" in the first file in which we saw a\r\nreference to the conformance. Make sure we record the conformance as\r\nused in each source file that needs it.\r\n**Scope**: Ensures that we emit synthesized protocol conformances that are needed in each source file. No impact on source compatibility.\r\n**Radar**: rdar://problem/32978891 and rdar://problem/32980176\r\n**Risk**: Zero. We're emitting some witness tables/protocol conformances that were getting dropped earlier.\r\n**Testing**: Compiler regression testing, building several projects that broke due to this bug.\r\n",
      "score": 1.3079182
    }
  ]
}

