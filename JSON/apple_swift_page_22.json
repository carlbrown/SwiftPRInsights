{
  "total_count": 1407,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10363",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10363/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10363/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10363/events",
      "html_url": "https://github.com/apple/swift/pull/10363",
      "id": 236751567,
      "number": 10363,
      "title": "[swiftc (21 vs. 5563)] Add crasher in swift::TypeBase::getCanonicalType(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-18T23:09:31Z",
      "updated_at": "2017-06-19T00:30:46Z",
      "closed_at": "2017-06-19T00:30:46Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10363",
        "html_url": "https://github.com/apple/swift/pull/10363",
        "diff_url": "https://github.com/apple/swift/pull/10363.diff",
        "patch_url": "https://github.com/apple/swift/pull/10363.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getCanonicalType(...)`.\n\nCurrent number of unresolved compiler crashers: 21 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth && \"parameter hasn't been validated\"` added on 2017-02-22 by you in commit fdb0a186 :-)\n\nAssertion failure in [`lib/AST/Type.cpp (line 1093)`](https://github.com/apple/swift/blob/ca3227f93cc80b5ac9ff97b54173746200fb7f2d/lib/AST/Type.cpp#L1093):\n\n```\nAssertion `gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth && \"parameter hasn't been validated\"' failed.\n\nWhen executing: swift::CanType swift::TypeBase::getCanonicalType()\n```\n\nAssertion context:\n\n```c++\n\n  case TypeKind::GenericTypeParam: {\n    GenericTypeParamType *gp = cast<GenericTypeParamType>(this);\n    auto gpDecl = gp->getDecl();\n    assert(gpDecl->getDepth() != GenericTypeParamDecl::InvalidDepth &&\n           \"parameter hasn't been validated\");\n    Result = GenericTypeParamType::get(gpDecl->getDepth(), gpDecl->getIndex(),\n                                       gpDecl->getASTContext());\n    break;\n  }\n\n```\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007f06d3824390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f06d1d4a428 gsignal /build/glibc-9tT8Do/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f06d1d4c02a abort /build/glibc-9tT8Do/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f06d1d42bd7 __assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n6 0x00007f06d1d42c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015b2461 swift::TypeBase::getCanonicalType() (/path/to/swift/bin/swift+0x15b2461)\n8 0x00000000014945e5 swift::DependentMemberType::get(swift::Type, swift::AssociatedTypeDecl*) (/path/to/swift/bin/swift+0x14945e5)\n9 0x0000000001563fea swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x1563fea)\n10 0x0000000001567945 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x1567945)\n11 0x0000000001579321 swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_26>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x1579321)\n12 0x0000000001571a92 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_60>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x1571a92)\n13 0x0000000001563a41 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x1563a41)\n14 0x000000000156385e swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x156385e)\n15 0x000000000136eff2 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x136eff2)\n16 0x0000000001372945 visitOuterToInner(swift::GenericParamList*, llvm::function_ref<void (swift::GenericParamList*)>) (/path/to/swift/bin/swift+0x1372945)\n17 0x00000000013725ad swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x13725ad)\n18 0x00000000013729f9 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x13729f9)\n19 0x0000000001343ccd swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1343ccd)\n20 0x00000000013536b3 (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13536b3)\n21 0x0000000001341e84 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341e84)\n22 0x00000000013521cb (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x13521cb)\n23 0x0000000001341eb4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341eb4)\n24 0x0000000001341d83 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1341d83)\n25 0x00000000013ccaf5 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccaf5)\n26 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n27 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n28 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n29 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n30 0x00007f06d1d35830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n31 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.178854
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10364",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10364/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10364/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10364/events",
      "html_url": "https://github.com/apple/swift/pull/10364",
      "id": 236755825,
      "number": 10364,
      "title": "[swiftc (22 vs. 5563)] Add crasher in swift::ProtocolDecl::requiresClassSlow(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T00:31:46Z",
      "updated_at": "2017-06-19T01:37:08Z",
      "closed_at": "2017-06-19T01:37:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10364",
        "html_url": "https://github.com/apple/swift/pull/10364",
        "diff_url": "https://github.com/apple/swift/pull/10364.diff",
        "patch_url": "https://github.com/apple/swift/pull/10364.patch"
      },
      "body": "Add test case for crash triggered in `swift::ProtocolDecl::requiresClassSlow(...)`.\n\nCurrent number of unresolved compiler crashers: 22 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `type && \"Should have type checked inheritance clause by now\"` added on 2017-04-28 by you in commit 0d4a0b7d :-)\n\nAssertion failure in [`lib/AST/Decl.cpp (line 2989)`](https://github.com/apple/swift/blob/c9b59ed6441a930fe160724e709f0403838b22a9/lib/AST/Decl.cpp#L2989):\n\n```\nAssertion `type && \"Should have type checked inheritance clause by now\"' failed.\n\nWhen executing: bool swift::ProtocolDecl::requiresClassSlow()\n```\n\nAssertion context:\n\n```c++\n\n  // Otherwise, check if the inheritance clause contains a\n  // class-constrained existential.\n  //\n  // FIXME: Use the requirement signature if available.\n  ProtocolDeclBits.RequiresClass = false;\n  for (auto inherited : getInherited()) {\n    auto type = inherited.getType();\n    assert(type && \"Should have type checked inheritance clause by now\");\n    if (type->isExistentialType()) {\n      auto layout = type->getExistentialLayout();\n```\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007fa9bd99d390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fa9bbec3428 gsignal /build/glibc-9tT8Do/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fa9bbec502a abort /build/glibc-9tT8Do/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fa9bbebbbd7 __assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n6 0x00007fa9bbebbc82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x0000000001532956 swift::ProtocolDecl::requiresClassSlow() (/path/to/swift/bin/swift+0x1532956)\n8 0x00000000014ddfb5 swift::ASTVisitor<(anonymous namespace)::PrintAST, void, void, void, void, void, void>::visit(swift::Decl*) (/path/to/swift/bin/swift+0x14ddfb5)\n9 0x00000000014d4be7 (anonymous namespace)::PrintAST::visit(swift::Decl*) (/path/to/swift/bin/swift+0x14d4be7)\n10 0x00000000014e0985 (anonymous namespace)::PrintAST::printMembersOfDecl(swift::Decl*, bool, bool, bool) (/path/to/swift/bin/swift+0x14e0985)\n11 0x00000000014ded89 swift::ASTVisitor<(anonymous namespace)::PrintAST, void, void, void, void, void, void>::visit(swift::Decl*) (/path/to/swift/bin/swift+0x14ded89)\n12 0x00000000014d4be7 (anonymous namespace)::PrintAST::visit(swift::Decl*) (/path/to/swift/bin/swift+0x14d4be7)\n13 0x00000000014d493b swift::Decl::print(swift::ASTPrinter&, swift::PrintOptions const&) const (/path/to/swift/bin/swift+0x14d493b)\n14 0x0000000001543402 swift::DiagnosticEngine::emitDiagnostic(swift::Diagnostic const&) (/path/to/swift/bin/swift+0x1543402)\n15 0x0000000001540a8f swift::DiagnosticEngine::flushActiveDiagnostic() (/path/to/swift/bin/swift+0x1540a8f)\n16 0x000000000139cac1 std::_Function_handler<void (swift::NormalProtocolConformance*), (anonymous namespace)::ConformanceChecker::resolveTypeWitnessViaLookup(swift::AssociatedTypeDecl*)::$_31>::_M_invoke(std::_Any_data const&, swift::NormalProtocolConformance*&&) (/path/to/swift/bin/swift+0x139cac1)\n17 0x0000000001389c55 (anonymous namespace)::ConformanceChecker::diagnoseOrDefer(swift::ValueDecl*, bool, std::function<void (swift::NormalProtocolConformance*)>) (/path/to/swift/bin/swift+0x1389c55)\n18 0x0000000001399428 (anonymous namespace)::ConformanceChecker::resolveTypeWitnessViaLookup(swift::AssociatedTypeDecl*) (/path/to/swift/bin/swift+0x1399428)\n19 0x000000000138657a (anonymous namespace)::ConformanceChecker::resolveTypeWitnesses() (/path/to/swift/bin/swift+0x138657a)\n20 0x00000000013819ee (anonymous namespace)::MultiConformanceChecker::checkAllConformances() (/path/to/swift/bin/swift+0x13819ee)\n21 0x00000000013830f2 swift::TypeChecker::checkConformancesInContext(swift::DeclContext*, swift::IterableDeclContext*) (/path/to/swift/bin/swift+0x13830f2)\n22 0x000000000135290e (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x135290e)\n23 0x0000000001341f7e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341f7e)\n24 0x00000000013521cb (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x13521cb)\n25 0x0000000001341eb4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341eb4)\n26 0x0000000001341d83 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1341d83)\n27 0x00000000013aee16 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13aee16)\n28 0x00000000013ae4cb swift::TypeChecker::typeCheckClosureBody(swift::ClosureExpr*) (/path/to/swift/bin/swift+0x13ae4cb)\n29 0x00000000013d246c swift::constraints::ConstraintSystem::applySolution(swift::constraints::Solution&, swift::Expr*, swift::Type, bool, bool, bool) (/path/to/swift/bin/swift+0x13d246c)\n30 0x000000000132b20d swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x132b20d)\n31 0x00000000013aee75 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13aee75)\n32 0x00000000013ae686 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13ae686)\n33 0x00000000013ccb70 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccb70)\n34 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n35 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n36 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n37 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n38 0x00007fa9bbeae830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n39 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.1795744
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10365",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10365/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10365/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10365/events",
      "html_url": "https://github.com/apple/swift/pull/10365",
      "id": 236760651,
      "number": 10365,
      "title": "[swiftc (23 vs. 5563)] Add crasher in swift::TypeBase::getCanonicalType(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T01:38:48Z",
      "updated_at": "2017-06-19T02:44:10Z",
      "closed_at": "2017-06-19T02:44:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10365",
        "html_url": "https://github.com/apple/swift/pull/10365",
        "diff_url": "https://github.com/apple/swift/pull/10365.diff",
        "patch_url": "https://github.com/apple/swift/pull/10365.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeBase::getCanonicalType(...)`.\n\nCurrent number of unresolved compiler crashers: 23 (5563 resolved)\n\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007fad0da22390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00000000015b1974 swift::TypeBase::getCanonicalType() (/path/to/swift/bin/swift+0x15b1974)\n4 0x0000000001334eb1 (anonymous namespace)::PreCheckExpression::simplifyTypeExpr(swift::Expr*) (/path/to/swift/bin/swift+0x1334eb1)\n5 0x0000000001333bf7 (anonymous namespace)::PreCheckExpression::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x1333bf7)\n6 0x000000000150bdfc swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x150bdfc)\n7 0x00000000013276d5 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x13276d5)\n8 0x000000000132b112 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x132b112)\n9 0x000000000132f264 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*, bool) (/path/to/swift/bin/swift+0x132f264)\n10 0x000000000132f4c6 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int, bool) (/path/to/swift/bin/swift+0x132f4c6)\n11 0x0000000001347af8 validatePatternBindingEntries(swift::TypeChecker&, swift::PatternBindingDecl*) (/path/to/swift/bin/swift+0x1347af8)\n12 0x0000000001343e88 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1343e88)\n13 0x0000000001325bca swift::TypeChecker::resolveDeclRefExpr(swift::UnresolvedDeclRefExpr*, swift::DeclContext*) (/path/to/swift/bin/swift+0x1325bca)\n14 0x00000000013335a2 (anonymous namespace)::PreCheckExpression::walkToExprPre(swift::Expr*) (/path/to/swift/bin/swift+0x13335a2)\n15 0x000000000150bdab swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x150bdab)\n16 0x00000000013276d5 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x13276d5)\n17 0x000000000132b112 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x132b112)\n18 0x00000000013aee75 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13aee75)\n19 0x00000000013ae4cb swift::TypeChecker::typeCheckClosureBody(swift::ClosureExpr*) (/path/to/swift/bin/swift+0x13ae4cb)\n20 0x00000000013d246c swift::constraints::ConstraintSystem::applySolution(swift::constraints::Solution&, swift::Expr*, swift::Type, bool, bool, bool) (/path/to/swift/bin/swift+0x13d246c)\n21 0x000000000132b20d swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x132b20d)\n22 0x00000000013aee75 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x13aee75)\n23 0x00000000013ae686 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x13ae686)\n24 0x00000000013ccb70 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccb70)\n25 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n26 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n27 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n28 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n29 0x00007fad0bf33830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n30 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.1802135
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10366",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10366/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10366/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10366/events",
      "html_url": "https://github.com/apple/swift/pull/10366",
      "id": 236767131,
      "number": 10366,
      "title": "[swiftc (24 vs. 5563)] Add crasher in swift::ValueDecl::getFormalAccess",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T02:45:53Z",
      "updated_at": "2017-06-19T03:50:44Z",
      "closed_at": "2017-06-19T03:50:44Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10366",
        "html_url": "https://github.com/apple/swift/pull/10366",
        "diff_url": "https://github.com/apple/swift/pull/10366.diff",
        "patch_url": "https://github.com/apple/swift/pull/10366.patch"
      },
      "body": "Add test case for crash triggered in `swift::ValueDecl::getFormalAccess`.\n\nCurrent number of unresolved compiler crashers: 24 (5563 resolved)\n\n/cc @jrose-apple - just wanted to let you know that this crasher caused an assertion failure for the assertion `hasAccessibility() && \"accessibility not computed yet\"` added on 2014-06-24 by you in commit 6cca3529e :-)\n\nAssertion failure in [`include/swift/AST/Decl.h (line 2178)`](https://github.com/apple/swift/blob/fbb153b75979ec44eb995ab3a70660da0c3dc0e8/include/swift/AST/Decl.h#L2178):\n\n```\nAssertion `hasAccessibility() && \"accessibility not computed yet\"' failed.\n\nWhen executing: swift::Accessibility swift::ValueDecl::getFormalAccess(const swift::DeclContext *, bool) const\n```\n\nAssertion context:\n\n```c++\n  /// taken into account.\n  ///\n  /// \\sa getFormalAccessScope\n  Accessibility getFormalAccess(const DeclContext *useDC = nullptr,\n                                bool respectVersionedAttr = false) const {\n    assert(hasAccessibility() && \"accessibility not computed yet\");\n    Accessibility result = TypeAndAccess.getInt().getValue();\n    if (respectVersionedAttr &&\n        result == Accessibility::Internal &&\n        isVersionedInternalDecl()) {\n      assert(!useDC);\n```\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007f236baba390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f2369fe0428 gsignal /build/glibc-9tT8Do/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f2369fe202a abort /build/glibc-9tT8Do/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f2369fd8bd7 __assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n6 0x00007f2369fd8c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000152ea73 swift::ValueDecl::getFormalAccess(swift::DeclContext const*, bool) const (/path/to/swift/bin/swift+0x152ea73)\n8 0x000000000152c3b6 swift::ValueDecl::getFormalAccessScope(swift::DeclContext const*, bool) const (/path/to/swift/bin/swift+0x152c3b6)\n9 0x000000000153c371 swift::DeclContext::getResilienceExpansion() const (/path/to/swift/bin/swift+0x153c371)\n10 0x000000000145b552 swift::TypeChecker::diagnoseInlineableDeclRef(swift::SourceLoc, swift::ValueDecl const*, swift::DeclContext const*) (/path/to/swift/bin/swift+0x145b552)\n11 0x000000000146a0f6 (anonymous namespace)::AvailabilityWalker::diagAvailability(swift::ValueDecl const*, swift::SourceRange, swift::ApplyExpr const*, bool, bool) (/path/to/swift/bin/swift+0x146a0f6)\n12 0x00000000014688fe swift::diagnoseDeclAvailability(swift::ValueDecl const*, swift::TypeChecker&, swift::DeclContext*, swift::SourceRange, bool, bool) (/path/to/swift/bin/swift+0x14688fe)\n13 0x00000000013be764 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13be764)\n14 0x00000000013bf268 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13bf268)\n15 0x00000000013bf16c swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bf16c)\n16 0x00000000013bdb70 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bdb70)\n17 0x00000000013778c9 validateParameterType(swift::ParamDecl*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&, swift::TypeChecker&) (/path/to/swift/bin/swift+0x13778c9)\n18 0x0000000001377779 swift::TypeChecker::typeCheckParameterList(swift::ParameterList*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1377779)\n19 0x0000000001362a93 (anonymous namespace)::DeclChecker::semaFuncParamPatterns(swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1362a93)\n20 0x0000000001355f4b (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x1355f4b)\n21 0x0000000001341ea4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341ea4)\n22 0x0000000001343ecd swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1343ecd)\n23 0x0000000001595695 swift::namelookup::ResolutionKind recordImportDecls<llvm::DenseMap<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> >, llvm::DenseMapInfo<swift::DeclBaseName>, llvm::detail::DenseMapPair<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> > > > >(swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&, llvm::ArrayRef<swift::ValueDecl*>, llvm::DenseMap<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> >, llvm::DenseMapInfo<swift::DeclBaseName>, llvm::detail::DenseMapPair<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> > > >&, swift::namelookup::ResolutionKind) (/path/to/swift/bin/swift+0x1595695)\n24 0x00000000015938aa void lookupInModule<llvm::DenseMap<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> >, llvm::DenseMapInfo<swift::DeclBaseName>, llvm::detail::DenseMapPair<swift::DeclBaseName, std::pair<swift::namelookup::ResolutionKind, llvm::SmallSet<swift::CanType, 4u, (anonymous namespace)::SortCanType> > > >, swift::namelookup::lookupVisibleDeclsInModule(swift::ModuleDecl*, llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*> >)::$_1>(swift::ModuleDecl*, llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::namelookup::ResolutionKind, bool, swift::LazyResolver*, llvm::SmallDenseMap<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*>, llvm::TinyPtrVector<swift::ValueDecl*>, 32u, llvm::DenseMapInfo<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*> >, llvm::detail::DenseMapPair<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*>, llvm::TinyPtrVector<swift::ValueDecl*> > >&, swift::DeclContext const*, bool, llvm::ArrayRef<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*> >, swift::namelookup::lookupVisibleDeclsInModule(swift::ModuleDecl*, llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*> >)::$_1) (/path/to/swift/bin/swift+0x15938aa)\n25 0x00000000015930f3 swift::namelookup::lookupVisibleDeclsInModule(swift::ModuleDecl*, llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::NLKind, swift::namelookup::ResolutionKind, swift::LazyResolver*, swift::DeclContext const*, llvm::ArrayRef<std::pair<llvm::ArrayRef<std::pair<swift::Identifier, swift::SourceLoc> >, swift::ModuleDecl*> >) (/path/to/swift/bin/swift+0x15930f3)\n26 0x00000000015819fd swift::lookupVisibleDecls(swift::VisibleDeclConsumer&, swift::DeclContext const*, swift::LazyResolver*, bool, swift::SourceLoc) (/path/to/swift/bin/swift+0x15819fd)\n27 0x0000000001375c38 swift::TypeChecker::performTypoCorrection(swift::DeclContext*, swift::DeclRefKind, swift::Type, swift::DeclName, swift::SourceLoc, swift::OptionSet<swift::NameLookupFlags, unsigned int>, swift::LookupResult&, unsigned int) (/path/to/swift/bin/swift+0x1375c38)\n28 0x0000000001326be8 swift::TypeChecker::resolveDeclRefExpr(swift::UnresolvedDeclRefExpr*, swift::DeclContext*) (/path/to/swift/bin/swift+0x1326be8)\n29 0x00000000013335a2 (anonymous namespace)::PreCheckExpression::walkToExprPre(swift::Expr*) (/path/to/swift/bin/swift+0x13335a2)\n30 0x000000000150bdab swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x150bdab)\n31 0x00000000013276d5 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x13276d5)\n32 0x000000000132b112 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x132b112)\n33 0x000000000132f264 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*, bool) (/path/to/swift/bin/swift+0x132f264)\n34 0x000000000132f4c6 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int, bool) (/path/to/swift/bin/swift+0x132f4c6)\n35 0x0000000001347af8 validatePatternBindingEntries(swift::TypeChecker&, swift::PatternBindingDecl*) (/path/to/swift/bin/swift+0x1347af8)\n36 0x0000000001341ecd (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341ecd)\n37 0x00000000013521cb (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x13521cb)\n38 0x0000000001341eb4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341eb4)\n39 0x0000000001341d83 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1341d83)\n40 0x00000000013ccaf5 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccaf5)\n41 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n42 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n43 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n44 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n45 0x00007f2369fcb830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n46 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.1808515
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10367",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10367/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10367/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10367/events",
      "html_url": "https://github.com/apple/swift/pull/10367",
      "id": 236773757,
      "number": 10367,
      "title": "[swiftc (25 vs. 5563)] Add crasher in swift::TypeChecker::substMemberTypeWithBase",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T03:52:49Z",
      "updated_at": "2017-06-19T04:58:15Z",
      "closed_at": "2017-06-19T04:58:14Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10367",
        "html_url": "https://github.com/apple/swift/pull/10367",
        "diff_url": "https://github.com/apple/swift/pull/10367.diff",
        "patch_url": "https://github.com/apple/swift/pull/10367.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::substMemberTypeWithBase`.\n\nCurrent number of unresolved compiler crashers: 25 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `(!Parent || Parent->is<NominalType>() || Parent->is<BoundGenericType>() || Parent->is<UnboundGenericType>()) && \"parent must be a nominal type\"` added on 2016-11-03 by you in commit 5780a9f52 :-)\n\nAssertion failure in [`lib/AST/ASTContext.cpp (line 2841)`](https://github.com/apple/swift/blob/a020ccc25f5d08dda07f5bf2e5b5b77310905945/lib/AST/ASTContext.cpp#L2841):\n\n```\nAssertion `(!Parent || Parent->is<NominalType>() || Parent->is<BoundGenericType>() || Parent->is<UnboundGenericType>()) && \"parent must be a nominal type\"' failed.\n\nWhen executing: static swift::NominalType *swift::NominalType::get(swift::NominalTypeDecl *, swift::Type, const swift::ASTContext &)\n```\n\nAssertion context:\n\n```c++\n\n  return newType;\n}\n\nNominalType *NominalType::get(NominalTypeDecl *D, Type Parent, const ASTContext &C) {\n  assert((isa<ProtocolDecl>(D) || !D->getGenericParams()) &&\n         \"must be a non-generic type decl\");\n  assert((!Parent || Parent->is<NominalType>() ||\n          Parent->is<BoundGenericType>() ||\n          Parent->is<UnboundGenericType>()) &&\n         \"parent must be a nominal type\");\n```\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007f3237303390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f3235829428 gsignal /build/glibc-9tT8Do/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f323582b02a abort /build/glibc-9tT8Do/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f3235821bd7 __assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n6 0x00007f3235821c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000149068e (/path/to/swift/bin/swift+0x149068e)\n8 0x00000000013bd1b7 swift::TypeChecker::substMemberTypeWithBase(swift::ModuleDecl*, swift::TypeDecl*, swift::Type) (/path/to/swift/bin/swift+0x13bd1b7)\n9 0x00000000013beaf5 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13beaf5)\n10 0x00000000013be8ff resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13be8ff)\n11 0x00000000013be4f9 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13be4f9)\n12 0x00000000013bf268 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13bf268)\n13 0x00000000013bf16c swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bf16c)\n14 0x00000000013bdb70 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bdb70)\n15 0x0000000001355f35 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x1355f35)\n16 0x0000000001341ea4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341ea4)\n17 0x00000000013539cb (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x13539cb)\n18 0x0000000001341e84 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341e84)\n19 0x0000000001341d83 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1341d83)\n20 0x00000000013ccaf5 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccaf5)\n21 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n22 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n23 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n24 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n25 0x00007f3235814830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n26 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.1814927
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10368",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10368/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10368/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10368/events",
      "html_url": "https://github.com/apple/swift/pull/10368",
      "id": 236780654,
      "number": 10368,
      "title": "[swiftc (26 vs. 5563)] Add crasher in swift::TypeChecker::validateDecl(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T05:00:18Z",
      "updated_at": "2017-06-19T06:05:34Z",
      "closed_at": "2017-06-19T06:05:34Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10368",
        "html_url": "https://github.com/apple/swift/pull/10368",
        "diff_url": "https://github.com/apple/swift/pull/10368.diff",
        "patch_url": "https://github.com/apple/swift/pull/10368.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::validateDecl(...)`.\n\nCurrent number of unresolved compiler crashers: 26 (5563 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `hasInterfaceType() && \"No interface type was set\"` added on 2016-12-04 by you in commit c1a21613 :-)\n\nAssertion failure in [`lib/AST/Decl.cpp (line 1813)`](https://github.com/apple/swift/blob/1a9ccd347c8784f52499a6372741b27962a3135a/lib/AST/Decl.cpp#L1813):\n\n```\nAssertion `hasInterfaceType() && \"No interface type was set\"' failed.\n\nWhen executing: swift::Type swift::ValueDecl::getInterfaceType() const\n```\n\nAssertion context:\n\n```c++\nbool ValueDecl::hasInterfaceType() const {\n  return !TypeAndAccess.getPointer().isNull();\n}\n\nType ValueDecl::getInterfaceType() const {\n  assert(hasInterfaceType() && \"No interface type was set\");\n  return TypeAndAccess.getPointer();\n}\n\nvoid ValueDecl::setInterfaceType(Type type) {\n  // lldb creates global typealiases with archetypes in them.\n```\nStack trace:\n\n```\n0 0x0000000003a5fdb8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3a5fdb8)\n1 0x0000000003a604f6 SignalHandler(int) (/path/to/swift/bin/swift+0x3a604f6)\n2 0x00007f798906f390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f7987595428 gsignal /build/glibc-9tT8Do/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f798759702a abort /build/glibc-9tT8Do/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f798758dbd7 __assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n6 0x00007f798758dc82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000152d1bf (/path/to/swift/bin/swift+0x152d1bf)\n8 0x0000000001340259 (anonymous namespace)::DeclChecker::checkOverrides(swift::TypeChecker&, swift::ValueDecl*) (/path/to/swift/bin/swift+0x1340259)\n9 0x0000000001356016 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x1356016)\n10 0x0000000001341ea4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341ea4)\n11 0x0000000001343ecd swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x1343ecd)\n12 0x000000000159ab1c swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x159ab1c)\n13 0x00000000013750c6 swift::TypeChecker::lookupMember(swift::DeclContext*, swift::Type, swift::DeclName, swift::OptionSet<swift::NameLookupFlags, unsigned int>)::$_1::operator()() const (/path/to/swift/bin/swift+0x13750c6)\n14 0x0000000001374f77 swift::TypeChecker::lookupMember(swift::DeclContext*, swift::Type, swift::DeclName, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x1374f77)\n15 0x00000000013c51f4 diagnoseUnknownType(swift::TypeChecker&, swift::DeclContext*, swift::Type, swift::SourceRange, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::OptionSet<swift::NameLookupFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13c51f4)\n16 0x00000000013bee85 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bee85)\n17 0x00000000013be4f9 swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13be4f9)\n18 0x00000000013bf268 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x13bf268)\n19 0x00000000013bf16c swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bf16c)\n20 0x00000000013bdb70 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x13bdb70)\n21 0x0000000001355f35 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x1355f35)\n22 0x0000000001341ea4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341ea4)\n23 0x000000000135292b (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x135292b)\n24 0x0000000001341f7e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x1341f7e)\n25 0x0000000001341d83 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x1341d83)\n26 0x00000000013ccaf5 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x13ccaf5)\n27 0x0000000000f93b16 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xf93b16)\n28 0x00000000004ab3d9 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ab3d9)\n29 0x00000000004a996c swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4a996c)\n30 0x00000000004655c7 main (/path/to/swift/bin/swift+0x4655c7)\n31 0x00007f7987580830 __libc_start_main /build/glibc-9tT8Do/glibc-2.23/csu/../csu/libc-start.c:325:0\n32 0x0000000000462c69 _start (/path/to/swift/bin/swift+0x462c69)\n```",
      "score": 1.1821367
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10372",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10372/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10372/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10372/events",
      "html_url": "https://github.com/apple/swift/pull/10372",
      "id": 236949885,
      "number": 10372,
      "title": "[ASTPrinter] Allow error type in printTransformedType",
      "user": {
        "login": "benlangmuir",
        "id": 3412956,
        "avatar_url": "https://avatars2.githubusercontent.com/u/3412956?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benlangmuir",
        "html_url": "https://github.com/benlangmuir",
        "followers_url": "https://api.github.com/users/benlangmuir/followers",
        "following_url": "https://api.github.com/users/benlangmuir/following{/other_user}",
        "gists_url": "https://api.github.com/users/benlangmuir/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/benlangmuir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/benlangmuir/subscriptions",
        "organizations_url": "https://api.github.com/users/benlangmuir/orgs",
        "repos_url": "https://api.github.com/users/benlangmuir/repos",
        "events_url": "https://api.github.com/users/benlangmuir/events{/privacy}",
        "received_events_url": "https://api.github.com/users/benlangmuir/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T16:35:01Z",
      "updated_at": "2017-06-19T19:51:41Z",
      "closed_at": "2017-06-19T19:51:38Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10372",
        "html_url": "https://github.com/apple/swift/pull/10372",
        "diff_url": "https://github.com/apple/swift/pull/10372.diff",
        "patch_url": "https://github.com/apple/swift/pull/10372.patch"
      },
      "body": "When printing an associated type that is not provided (e.g. during\r\ncode-completion of overrides), we want to print the type even if there\r\nare errors.\r\n\r\nrdar://problem/30451236",
      "score": 1.1893225
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10373",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10373/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10373/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10373/events",
      "html_url": "https://github.com/apple/swift/pull/10373",
      "id": 236959646,
      "number": 10373,
      "title": "Fix layering violation I introduced by putting _EmptyBoxStorage into the stubs library",
      "user": {
        "login": "aschwaighofer",
        "id": 15268288,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aschwaighofer",
        "html_url": "https://github.com/aschwaighofer",
        "followers_url": "https://api.github.com/users/aschwaighofer/followers",
        "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
        "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
        "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
        "repos_url": "https://api.github.com/users/aschwaighofer/repos",
        "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T17:12:33Z",
      "updated_at": "2017-06-19T17:59:06Z",
      "closed_at": "2017-06-19T17:59:06Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10373",
        "html_url": "https://github.com/apple/swift/pull/10373",
        "diff_url": "https://github.com/apple/swift/pull/10373.diff",
        "patch_url": "https://github.com/apple/swift/pull/10373.patch"
      },
      "body": "\r\nShould fix the linkage issue on linux",
      "score": 1.1890814
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10374",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10374/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10374/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10374/events",
      "html_url": "https://github.com/apple/swift/pull/10374",
      "id": 236961575,
      "number": 10374,
      "title": "[Syntax] Fix use-after-free in SyntaxSerialization",
      "user": {
        "login": "harlanhaskins",
        "id": 853032,
        "avatar_url": "https://avatars1.githubusercontent.com/u/853032?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harlanhaskins",
        "html_url": "https://github.com/harlanhaskins",
        "followers_url": "https://api.github.com/users/harlanhaskins/followers",
        "following_url": "https://api.github.com/users/harlanhaskins/following{/other_user}",
        "gists_url": "https://api.github.com/users/harlanhaskins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/harlanhaskins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/harlanhaskins/subscriptions",
        "organizations_url": "https://api.github.com/users/harlanhaskins/orgs",
        "repos_url": "https://api.github.com/users/harlanhaskins/repos",
        "events_url": "https://api.github.com/users/harlanhaskins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/harlanhaskins/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-06-19T17:20:12Z",
      "updated_at": "2017-06-20T01:52:23Z",
      "closed_at": "2017-06-20T01:52:23Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10374",
        "html_url": "https://github.com/apple/swift/pull/10374",
        "diff_url": "https://github.com/apple/swift/pull/10374.diff",
        "patch_url": "https://github.com/apple/swift/pull/10374.patch"
      },
      "body": "The ASAN build caught a use-after-free because the `StringRef` passed into the JSON output for `TriviaPiece` was destroyed before the outputting happened. ~~Instead, explicitly copy the `OwnedString` first.~~ Instead, ensure the string outlives the raw syntax tree by moving the `CompilerInstance` out of `getSyntaxTree`.",
      "score": 1.1910245
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10375",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10375/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10375/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10375/events",
      "html_url": "https://github.com/apple/swift/pull/10375",
      "id": 236971457,
      "number": 10375,
      "title": "[AST] Bring 'mutating' and 'inout self' in sync.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-06-19T17:58:05Z",
      "updated_at": "2017-06-19T23:16:50Z",
      "closed_at": "2017-06-19T23:16:48Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10375",
        "html_url": "https://github.com/apple/swift/pull/10375",
        "diff_url": "https://github.com/apple/swift/pull/10375.diff",
        "patch_url": "https://github.com/apple/swift/pull/10375.patch"
      },
      "body": "- A mutating method or accessor always has `inout self`.\r\n- A nonmutating method or accessor never has `inout self`.\r\n- Only instance members can be mutating.\r\n\r\nCame up after reviewing another patch that confused the two as possibly distinct concepts.",
      "score": 1.190612
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10376",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10376/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10376/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10376/events",
      "html_url": "https://github.com/apple/swift/pull/10376",
      "id": 236972884,
      "number": 10376,
      "title": "[overlay] Port Foundation String extensions to StringProtocol",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 24,
      "created_at": "2017-06-19T18:03:35Z",
      "updated_at": "2017-07-13T21:53:22Z",
      "closed_at": "2017-07-13T21:50:47Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10376",
        "html_url": "https://github.com/apple/swift/pull/10376",
        "diff_url": "https://github.com/apple/swift/pull/10376.diff",
        "patch_url": "https://github.com/apple/swift/pull/10376.patch"
      },
      "body": "\r\n",
      "score": 1.3437631
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10377",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10377/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10377/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10377/events",
      "html_url": "https://github.com/apple/swift/pull/10377",
      "id": 236974440,
      "number": 10377,
      "title": "[Foundation Tests] Add a unit test to validate the behavior of dropFirst",
      "user": {
        "login": "phausler",
        "id": 278470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/278470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phausler",
        "html_url": "https://github.com/phausler",
        "followers_url": "https://api.github.com/users/phausler/followers",
        "following_url": "https://api.github.com/users/phausler/following{/other_user}",
        "gists_url": "https://api.github.com/users/phausler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phausler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phausler/subscriptions",
        "organizations_url": "https://api.github.com/users/phausler/orgs",
        "repos_url": "https://api.github.com/users/phausler/repos",
        "events_url": "https://api.github.com/users/phausler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phausler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-19T18:09:47Z",
      "updated_at": "2017-06-21T18:17:40Z",
      "closed_at": "2017-06-21T18:17:40Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10377",
        "html_url": "https://github.com/apple/swift/pull/10377",
        "diff_url": "https://github.com/apple/swift/pull/10377.diff",
        "patch_url": "https://github.com/apple/swift/pull/10377.patch"
      },
      "body": "Previous changes resolved an issue that incorrectly offset indexes in slices; this resulted in misbehavior of dropFirst. This is a set of tests to validate the expected behavior.\r\n\r\nrdar://problem/32596254",
      "score": 1.2011219
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10378",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10378/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10378/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10378/events",
      "html_url": "https://github.com/apple/swift/pull/10378",
      "id": 237005696,
      "number": 10378,
      "title": "CursorInfo: Teach SemaLocResolver to recognize the start of an expression.",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T19:56:20Z",
      "updated_at": "2017-06-19T20:28:39Z",
      "closed_at": "2017-06-19T20:28:36Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10378",
        "html_url": "https://github.com/apple/swift/pull/10378",
        "diff_url": "https://github.com/apple/swift/pull/10378.diff",
        "patch_url": "https://github.com/apple/swift/pull/10378.patch"
      },
      "body": "A location is resolved to the start of an expression only when it cannot be further refined to other kind, e.g. a reference. rdar://32749670\r\n\r\n",
      "score": 1.1906005
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10379",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10379/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10379/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10379/events",
      "html_url": "https://github.com/apple/swift/pull/10379",
      "id": 237006378,
      "number": 10379,
      "title": "[4.0] [ASTPrinter] Allow error type in printTransformedType",
      "user": {
        "login": "benlangmuir",
        "id": 3412956,
        "avatar_url": "https://avatars2.githubusercontent.com/u/3412956?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benlangmuir",
        "html_url": "https://github.com/benlangmuir",
        "followers_url": "https://api.github.com/users/benlangmuir/followers",
        "following_url": "https://api.github.com/users/benlangmuir/following{/other_user}",
        "gists_url": "https://api.github.com/users/benlangmuir/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/benlangmuir/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/benlangmuir/subscriptions",
        "organizations_url": "https://api.github.com/users/benlangmuir/orgs",
        "repos_url": "https://api.github.com/users/benlangmuir/repos",
        "events_url": "https://api.github.com/users/benlangmuir/events{/privacy}",
        "received_events_url": "https://api.github.com/users/benlangmuir/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T19:58:39Z",
      "updated_at": "2017-06-19T21:19:06Z",
      "closed_at": "2017-06-19T21:19:03Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10379",
        "html_url": "https://github.com/apple/swift/pull/10379",
        "diff_url": "https://github.com/apple/swift/pull/10379.diff",
        "patch_url": "https://github.com/apple/swift/pull/10379.patch"
      },
      "body": "* Explanation: Code-completion of protocol requirements that use associated types that aren't (yet) provided are currently showing as \"\\<null\\>\".\r\n* Scope: Affects code-completion of requirements using associated types that aren't provided yet.\r\n* Radar: rdar://problem/30451236\r\n* Risk: What is the (specific) risk to the release for taking this change?\r\n* Testing: Regression tests added.",
      "score": 1.1908163
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10380",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10380/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10380/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10380/events",
      "html_url": "https://github.com/apple/swift/pull/10380",
      "id": 237012291,
      "number": 10380,
      "title": "Fix SIL serialization of witness tables and protocol witness thunks",
      "user": {
        "login": "swiftix",
        "id": 15327066,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15327066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/swiftix",
        "html_url": "https://github.com/swiftix",
        "followers_url": "https://api.github.com/users/swiftix/followers",
        "following_url": "https://api.github.com/users/swiftix/following{/other_user}",
        "gists_url": "https://api.github.com/users/swiftix/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/swiftix/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/swiftix/subscriptions",
        "organizations_url": "https://api.github.com/users/swiftix/orgs",
        "repos_url": "https://api.github.com/users/swiftix/repos",
        "events_url": "https://api.github.com/users/swiftix/events{/privacy}",
        "received_events_url": "https://api.github.com/users/swiftix/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2017-06-19T20:20:28Z",
      "updated_at": "2017-06-20T15:48:54Z",
      "closed_at": "2017-06-20T15:48:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10380",
        "html_url": "https://github.com/apple/swift/pull/10380",
        "diff_url": "https://github.com/apple/swift/pull/10380.diff",
        "patch_url": "https://github.com/apple/swift/pull/10380.patch"
      },
      "body": "Serialize witness tables only if it -sil-serialize-all or -sil-serialize-witness-tables options are provided, which should happen only when building the stdlib and overlays, or it is a compilation with explicitly enabled resilience support. Disable serialization of witness tables in all other cases.\r\n\r\nDisabling the serialization of witness tables also avoids serialization of protocol witness thunks, whose serialization in 3rd party code sometimes resulted in performance degradation, because resilience checking rules used by many parts of the compiler would prohibit certain optimizations like inlining or specialization, if the caller was serialized and the callee would not be serialized.\r\n\r\nThis should fix rdar://32718853 and address rdar://32743391",
      "score": 1.1954081
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10381",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10381/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10381/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10381/events",
      "html_url": "https://github.com/apple/swift/pull/10381",
      "id": 237013627,
      "number": 10381,
      "title": "Don't add rpath to swift with statically linking",
      "user": {
        "login": "keith",
        "id": 283886,
        "avatar_url": "https://avatars3.githubusercontent.com/u/283886?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keith",
        "html_url": "https://github.com/keith",
        "followers_url": "https://api.github.com/users/keith/followers",
        "following_url": "https://api.github.com/users/keith/following{/other_user}",
        "gists_url": "https://api.github.com/users/keith/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keith/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keith/subscriptions",
        "organizations_url": "https://api.github.com/users/keith/orgs",
        "repos_url": "https://api.github.com/users/keith/repos",
        "events_url": "https://api.github.com/users/keith/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keith/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 13,
      "created_at": "2017-06-19T20:25:40Z",
      "updated_at": "2017-06-20T18:06:24Z",
      "closed_at": "2017-06-20T16:01:18Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10381",
        "html_url": "https://github.com/apple/swift/pull/10381",
        "diff_url": "https://github.com/apple/swift/pull/10381.diff",
        "patch_url": "https://github.com/apple/swift/pull/10381.patch"
      },
      "body": "This updates the rpath linking logic to only add the rpath that points\r\nto the swift dylibs in the case that the libraries are not statically\r\nlinked into the binary.\r\n\r\nThis fix is marginally relevant to https://bugs.swift.org/browse/SR-1967, but does not solve the core problem here.",
      "score": 1.195993
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10382",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10382/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10382/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10382/events",
      "html_url": "https://github.com/apple/swift/pull/10382",
      "id": 237018777,
      "number": 10382,
      "title": "[4.0] Fix multi-line string syntax coloring issues",
      "user": {
        "login": "nathawes",
        "id": 23247203,
        "avatar_url": "https://avatars3.githubusercontent.com/u/23247203?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nathawes",
        "html_url": "https://github.com/nathawes",
        "followers_url": "https://api.github.com/users/nathawes/followers",
        "following_url": "https://api.github.com/users/nathawes/following{/other_user}",
        "gists_url": "https://api.github.com/users/nathawes/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nathawes/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nathawes/subscriptions",
        "organizations_url": "https://api.github.com/users/nathawes/orgs",
        "repos_url": "https://api.github.com/users/nathawes/repos",
        "events_url": "https://api.github.com/users/nathawes/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nathawes/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T20:45:30Z",
      "updated_at": "2017-06-19T23:26:19Z",
      "closed_at": "2017-06-19T23:25:56Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10382",
        "html_url": "https://github.com/apple/swift/pull/10382",
        "diff_url": "https://github.com/apple/swift/pull/10382.diff",
        "patch_url": "https://github.com/apple/swift/pull/10382.patch"
      },
      "body": "<!-- What's in this pull request? -->\r\n- **Explanation**: With multi-line strings, edits on one line can make tokens appear/disapear on previous and later lines, which broke assumptions in the existing syntax highlighting logic. This left odd ranges of source unhighlighted or incorrectly highlighted.\r\n\r\n- **Scope**: Affects syntax highlighting of source files when users edit multi-line strings.\r\n- **Radar**: rdar://problem/32148117\r\n- **Risk**: Low; The change is limited to syntax highlighting\r\n- **Testing**: Added regression tests and measured the per-keystroke performance in a file with 12K lines of code (it's ~50ms, down from ~80ms).\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\n\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.1915889
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10383",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10383/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10383/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10383/events",
      "html_url": "https://github.com/apple/swift/pull/10383",
      "id": 237024705,
      "number": 10383,
      "title": "stdlib: Add another missing @_versioned annotation",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T21:09:16Z",
      "updated_at": "2017-06-19T22:04:42Z",
      "closed_at": "2017-06-19T22:04:42Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10383",
        "html_url": "https://github.com/apple/swift/pull/10383",
        "diff_url": "https://github.com/apple/swift/pull/10383.diff",
        "patch_url": "https://github.com/apple/swift/pull/10383.patch"
      },
      "body": "We cannot diagnose uses of a non-public conformance yet, so this\r\nwas resulting in a linker failure.\r\n\r\nFixes <rdar://problem/32536790>.",
      "score": 1.1913962
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10384",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10384/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10384/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10384/events",
      "html_url": "https://github.com/apple/swift/pull/10384",
      "id": 237026513,
      "number": 10384,
      "title": "[swift-4.0] Fix SIL serialization of witness tables and protocol witness thunks",
      "user": {
        "login": "swiftix",
        "id": 15327066,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15327066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/swiftix",
        "html_url": "https://github.com/swiftix",
        "followers_url": "https://api.github.com/users/swiftix/followers",
        "following_url": "https://api.github.com/users/swiftix/following{/other_user}",
        "gists_url": "https://api.github.com/users/swiftix/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/swiftix/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/swiftix/subscriptions",
        "organizations_url": "https://api.github.com/users/swiftix/orgs",
        "repos_url": "https://api.github.com/users/swiftix/repos",
        "events_url": "https://api.github.com/users/swiftix/events{/privacy}",
        "received_events_url": "https://api.github.com/users/swiftix/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 18,
      "created_at": "2017-06-19T21:16:32Z",
      "updated_at": "2017-06-26T22:21:36Z",
      "closed_at": "2017-06-26T22:21:36Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10384",
        "html_url": "https://github.com/apple/swift/pull/10384",
        "diff_url": "https://github.com/apple/swift/pull/10384.diff",
        "patch_url": "https://github.com/apple/swift/pull/10384.patch"
      },
      "body": "Serialize witness tables only if it -sil-serialize-all or -sil-serialize-witness-tables options are provided, which should happen only when building the stdlib and overlays, or it is a compilation with explicitly enabled resilience support. Disable serialization of witness tables in all other cases.\r\n\r\nDisabling the serialization of witness tables also avoids serialization of protocol witness thunks, whose serialization in 3rd party code sometimes resulted in performance degradation, because resilience checking rules used by many parts of the compiler would prohibit certain optimizations like inlining or specialization, if the caller was serialized and the callee would not be serialized.\r\n\r\n• Explanation: This is fix to recover the performance regression reported for Beta1. \r\n\r\n• Scope of Issue: Compiling a 3rd party code that does not use resilience may result in performance degradation, because some optimizations like specialization or inlining  could be skipped due to some serialization related checks. \r\n\r\n• Origination: rdar://32718853 by an external developer\r\n\r\n• Risk: Low. It restricts SIL serialization of witness tables and protocol witness thunks.\r\n\r\nThis should fix rdar://32718853",
      "score": 1.2331755
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10385",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10385/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10385/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10385/events",
      "html_url": "https://github.com/apple/swift/pull/10385",
      "id": 237042448,
      "number": 10385,
      "title": "[4.0] Debugger hook/breakpoint for issue reporting from the Swift runtime",
      "user": {
        "login": "kubamracek",
        "id": 1186214,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1186214?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kubamracek",
        "html_url": "https://github.com/kubamracek",
        "followers_url": "https://api.github.com/users/kubamracek/followers",
        "following_url": "https://api.github.com/users/kubamracek/following{/other_user}",
        "gists_url": "https://api.github.com/users/kubamracek/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kubamracek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kubamracek/subscriptions",
        "organizations_url": "https://api.github.com/users/kubamracek/orgs",
        "repos_url": "https://api.github.com/users/kubamracek/repos",
        "events_url": "https://api.github.com/users/kubamracek/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kubamracek/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-19T22:30:40Z",
      "updated_at": "2017-06-20T07:14:19Z",
      "closed_at": "2017-06-20T07:14:19Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10385",
        "html_url": "https://github.com/apple/swift/pull/10385",
        "diff_url": "https://github.com/apple/swift/pull/10385.diff",
        "patch_url": "https://github.com/apple/swift/pull/10385.patch"
      },
      "body": "This cherry-picks fec8d72ea318acd638982334804db5b6c6714a2f into swift-4.0-branch.\r\n\r\n=== **CCC information** ===\r\n**Explanation**: Implements a debugger hook for reporting runtime issues. Swift runtime has some features (exclusivity, objc inference) that currently log into stderr only, and we need to improve user workflow.\r\n**Scope**: On the runtime side, this is a very limited change, which only adds an interface for the debugger to set a breakpoint on. The LLDB follow-up change will read the information about the runtime issue.\r\n**Radar**: <rdar://problem/32085171>\r\n**Risk**: This PR alone is very low risk, it only calls an empty function when a runtime issue is found (exclusivity violation, calling an implicit objc entrypoint).  The risk of the LLDB change will be discussed in the LLDB PR.\r\n**Testing**: This was tested together with the LLDB change by running the LLDB test suite + the new 2 tests that verify the issue reporting is working for exclusivity and objc inference.",
      "score": 1.1940646
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10386",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10386/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10386/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10386/events",
      "html_url": "https://github.com/apple/swift/pull/10386",
      "id": 237045241,
      "number": 10386,
      "title": "[Foundation] Validate indexes and ranges passed into Data so that bounding conditions are respected",
      "user": {
        "login": "phausler",
        "id": 278470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/278470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phausler",
        "html_url": "https://github.com/phausler",
        "followers_url": "https://api.github.com/users/phausler/followers",
        "following_url": "https://api.github.com/users/phausler/following{/other_user}",
        "gists_url": "https://api.github.com/users/phausler/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phausler/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phausler/subscriptions",
        "organizations_url": "https://api.github.com/users/phausler/orgs",
        "repos_url": "https://api.github.com/users/phausler/repos",
        "events_url": "https://api.github.com/users/phausler/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phausler/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 11,
      "created_at": "2017-06-19T22:46:58Z",
      "updated_at": "2017-06-22T18:26:02Z",
      "closed_at": "2017-06-22T18:26:02Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10386",
        "html_url": "https://github.com/apple/swift/pull/10386",
        "diff_url": "https://github.com/apple/swift/pull/10386.diff",
        "patch_url": "https://github.com/apple/swift/pull/10386.patch"
      },
      "body": "This enforces index validation of ranges and indexes passed into Data so that reading or writing past the bounds is defined behavior by preconditions.\r\n\r\nThis resolves the following issues:\r\nrdar://problem/30460514\r\nrdar://problem/32019725",
      "score": 1.2086093
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10387",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10387/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10387/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10387/events",
      "html_url": "https://github.com/apple/swift/pull/10387",
      "id": 237046936,
      "number": 10387,
      "title": "[AST Verifier] Don't verify parsed function bodies in a type-checked AST",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-19T22:57:23Z",
      "updated_at": "2017-06-19T23:45:02Z",
      "closed_at": "2017-06-19T23:35:39Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10387",
        "html_url": "https://github.com/apple/swift/pull/10387",
        "diff_url": "https://github.com/apple/swift/pull/10387.diff",
        "patch_url": "https://github.com/apple/swift/pull/10387.patch"
      },
      "body": "Eliminates an AST verifier crash on reasonable ASTs where we ended up\r\nsynthesizing the body for a function (e.g., from the Clang importer)\r\nthat we don't actually need to type-check. Fixes\r\nrdar://problem/32774779.\r\n",
      "score": 1.1923699
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10388",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10388/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10388/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10388/events",
      "html_url": "https://github.com/apple/swift/pull/10388",
      "id": 237055278,
      "number": 10388,
      "title": "[SourceKit] If diagnostics are 'stale' for a particular snapshot then ignore them and only return the syntactic parser diagnostics",
      "user": {
        "login": "akyrtzi",
        "id": 46970,
        "avatar_url": "https://avatars2.githubusercontent.com/u/46970?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akyrtzi",
        "html_url": "https://github.com/akyrtzi",
        "followers_url": "https://api.github.com/users/akyrtzi/followers",
        "following_url": "https://api.github.com/users/akyrtzi/following{/other_user}",
        "gists_url": "https://api.github.com/users/akyrtzi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akyrtzi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akyrtzi/subscriptions",
        "organizations_url": "https://api.github.com/users/akyrtzi/orgs",
        "repos_url": "https://api.github.com/users/akyrtzi/repos",
        "events_url": "https://api.github.com/users/akyrtzi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akyrtzi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-19T23:53:29Z",
      "updated_at": "2017-06-20T19:26:38Z",
      "closed_at": "2017-06-20T19:26:33Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10388",
        "html_url": "https://github.com/apple/swift/pull/10388",
        "diff_url": "https://github.com/apple/swift/pull/10388.diff",
        "patch_url": "https://github.com/apple/swift/pull/10388.patch"
      },
      "body": "rdar://32769873\r\n",
      "score": 1.197487
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10389",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10389/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10389/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10389/events",
      "html_url": "https://github.com/apple/swift/pull/10389",
      "id": 237055357,
      "number": 10389,
      "title": "[4.0] [AST Verifier] Don't verify parsed function bodies in a type-checked AST.",
      "user": {
        "login": "DougGregor",
        "id": 989428,
        "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DougGregor",
        "html_url": "https://github.com/DougGregor",
        "followers_url": "https://api.github.com/users/DougGregor/followers",
        "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
        "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
        "organizations_url": "https://api.github.com/users/DougGregor/orgs",
        "repos_url": "https://api.github.com/users/DougGregor/repos",
        "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DougGregor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/apple/swift/milestones/9",
        "html_url": "https://github.com/apple/swift/milestone/9",
        "labels_url": "https://api.github.com/repos/apple/swift/milestones/9/labels",
        "id": 2501670,
        "number": 9,
        "title": "Swift 4.0",
        "description": null,
        "creator": {
          "login": "shahmishal",
          "id": 2727770,
          "avatar_url": "https://avatars2.githubusercontent.com/u/2727770?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shahmishal",
          "html_url": "https://github.com/shahmishal",
          "followers_url": "https://api.github.com/users/shahmishal/followers",
          "following_url": "https://api.github.com/users/shahmishal/following{/other_user}",
          "gists_url": "https://api.github.com/users/shahmishal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shahmishal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shahmishal/subscriptions",
          "organizations_url": "https://api.github.com/users/shahmishal/orgs",
          "repos_url": "https://api.github.com/users/shahmishal/repos",
          "events_url": "https://api.github.com/users/shahmishal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shahmishal/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 0,
        "closed_issues": 83,
        "state": "open",
        "created_at": "2017-05-05T05:40:40Z",
        "updated_at": "2017-07-31T22:11:56Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2017-06-19T23:54:05Z",
      "updated_at": "2017-06-21T04:37:15Z",
      "closed_at": "2017-06-21T00:19:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10389",
        "html_url": "https://github.com/apple/swift/pull/10389",
        "diff_url": "https://github.com/apple/swift/pull/10389.diff",
        "patch_url": "https://github.com/apple/swift/pull/10389.patch"
      },
      "body": "**Explanation**: Eliminates an AST verifier crash on reasonable ASTs where we ended up\r\nsynthesizing the body for a function (e.g., from the Clang importer) that we don't actually need to type-check.\r\n**Scope**: This is a fairly common source of AST verifier crashes in builds with assertions enabled, but otherwise has zero effect.\r\n**Radar**: rdar://problem/32774779\r\n**Risk**: Zero risk to customer builds; this code is disabled in non-assertions compilers.\r\n**Testing**: Built the affected project with assertions enabled, plus of course normal compiler regression testing.",
      "score": 1.1986758
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10392",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10392/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10392/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10392/events",
      "html_url": "https://github.com/apple/swift/pull/10392",
      "id": 237060818,
      "number": 10392,
      "title": "[NFC] Kill decomposeParamType",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T00:35:52Z",
      "updated_at": "2017-06-20T20:38:28Z",
      "closed_at": "2017-06-20T06:37:23Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10392",
        "html_url": "https://github.com/apple/swift/pull/10392",
        "diff_url": "https://github.com/apple/swift/pull/10392.diff",
        "patch_url": "https://github.com/apple/swift/pull/10392.patch"
      },
      "body": "`AnyFunctionType::Param` is now the source of truth when it comes to information about parameter types.  Information about default arguments on parameter decls is computed separately by `swift:: computeDefaultMap`.",
      "score": 1.1946211
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10393",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10393/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10393/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10393/events",
      "html_url": "https://github.com/apple/swift/pull/10393",
      "id": 237062091,
      "number": 10393,
      "title": "[test] Add regression test for already fixed syntax coloring crash (rdar31960764)",
      "user": {
        "login": "nathawes",
        "id": 23247203,
        "avatar_url": "https://avatars3.githubusercontent.com/u/23247203?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nathawes",
        "html_url": "https://github.com/nathawes",
        "followers_url": "https://api.github.com/users/nathawes/followers",
        "following_url": "https://api.github.com/users/nathawes/following{/other_user}",
        "gists_url": "https://api.github.com/users/nathawes/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nathawes/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nathawes/subscriptions",
        "organizations_url": "https://api.github.com/users/nathawes/orgs",
        "repos_url": "https://api.github.com/users/nathawes/repos",
        "events_url": "https://api.github.com/users/nathawes/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nathawes/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T00:45:59Z",
      "updated_at": "2017-06-20T17:02:17Z",
      "closed_at": "2017-06-20T17:02:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10393",
        "html_url": "https://github.com/apple/swift/pull/10393",
        "diff_url": "https://github.com/apple/swift/pull/10393.diff",
        "patch_url": "https://github.com/apple/swift/pull/10393.patch"
      },
      "body": "<!-- What's in this pull request? -->\r\nAdd regression test for crash when syntax highlighting an unclosed `#if ` followed by any non-whitespace character. The crash itself was incidentally fixed by the changes in https://github.com/apple/swift/pull/10289.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves rdar://problem/31960764\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->",
      "score": 1.1971992
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10394",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10394/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10394/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10394/events",
      "html_url": "https://github.com/apple/swift/pull/10394",
      "id": 237062351,
      "number": 10394,
      "title": "[AST] Move getEffectiveAccess calls into SIL.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-06-20T00:48:10Z",
      "updated_at": "2017-06-22T17:38:21Z",
      "closed_at": "2017-06-22T17:38:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10394",
        "html_url": "https://github.com/apple/swift/pull/10394",
        "diff_url": "https://github.com/apple/swift/pull/10394.diff",
        "patch_url": "https://github.com/apple/swift/pull/10394.patch"
      },
      "body": "",
      "score": 1.209096
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10395",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10395/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10395/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10395/events",
      "html_url": "https://github.com/apple/swift/pull/10395",
      "id": 237077242,
      "number": 10395,
      "title": "Initializer Fix",
      "user": {
        "login": "gottesmm",
        "id": 499423,
        "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gottesmm",
        "html_url": "https://github.com/gottesmm",
        "followers_url": "https://api.github.com/users/gottesmm/followers",
        "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
        "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
        "organizations_url": "https://api.github.com/users/gottesmm/orgs",
        "repos_url": "https://api.github.com/users/gottesmm/repos",
        "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gottesmm/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-06-20T02:43:57Z",
      "updated_at": "2017-06-20T20:35:33Z",
      "closed_at": "2017-06-20T05:04:04Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10395",
        "html_url": "https://github.com/apple/swift/pull/10395",
        "diff_url": "https://github.com/apple/swift/pull/10395.diff",
        "patch_url": "https://github.com/apple/swift/pull/10395.patch"
      },
      "body": "This PR contains two commits:\r\n\r\n1. The first actual fixes the crash in rdar://32539006 and is small to ensure that review is easy.\r\n2. I added a bunch of other test cases that were missing from initializers.swift.\r\n\r\nrdar://32539006",
      "score": 1.194968
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10396",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10396/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10396/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10396/events",
      "html_url": "https://github.com/apple/swift/pull/10396",
      "id": 237083300,
      "number": 10396,
      "title": "benchmarks: Fix the BitCount benchmark",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-06-20T03:32:04Z",
      "updated_at": "2017-06-20T15:27:11Z",
      "closed_at": "2017-06-20T04:08:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10396",
        "html_url": "https://github.com/apple/swift/pull/10396",
        "diff_url": "https://github.com/apple/swift/pull/10396.diff",
        "patch_url": "https://github.com/apple/swift/pull/10396.patch"
      },
      "body": "*) Increase the iteration count, so that we cat a time value > 100 for better accuracy\r\n*) Use getInt to prevent constant propgation and loop hoisting\r\n",
      "score": 1.1950165
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/10397",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/10397/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/10397/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/10397/events",
      "html_url": "https://github.com/apple/swift/pull/10397",
      "id": 237096467,
      "number": 10397,
      "title": "Dynamic exclusivity enforcement for non-escaping closures.",
      "user": {
        "login": "atrick",
        "id": 2165663,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2165663?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/atrick",
        "html_url": "https://github.com/atrick",
        "followers_url": "https://api.github.com/users/atrick/followers",
        "following_url": "https://api.github.com/users/atrick/following{/other_user}",
        "gists_url": "https://api.github.com/users/atrick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/atrick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/atrick/subscriptions",
        "organizations_url": "https://api.github.com/users/atrick/orgs",
        "repos_url": "https://api.github.com/users/atrick/repos",
        "events_url": "https://api.github.com/users/atrick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/atrick/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-06-20T05:29:34Z",
      "updated_at": "2017-07-05T21:24:46Z",
      "closed_at": "2017-06-20T07:01:53Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/10397",
        "html_url": "https://github.com/apple/swift/pull/10397",
        "diff_url": "https://github.com/apple/swift/pull/10397.diff",
        "patch_url": "https://github.com/apple/swift/pull/10397.patch"
      },
      "body": "",
      "score": 1.1986485
    }
  ]
}

