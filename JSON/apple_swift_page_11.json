{
  "total_count": 445,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11108",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11108/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11108/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11108/events",
      "html_url": "https://github.com/apple/swift/pull/11108",
      "id": 244802142,
      "number": 11108,
      "title": "[4.0] SILGen: The allocator entry point for an initializer is never `dynamic`.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-21T22:58:34Z",
      "updated_at": "2017-07-22T03:14:01Z",
      "closed_at": "2017-07-22T03:14:01Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11108",
        "html_url": "https://github.com/apple/swift/pull/11108",
        "diff_url": "https://github.com/apple/swift/pull/11108.diff",
        "patch_url": "https://github.com/apple/swift/pull/11108.patch"
      },
      "body": "Explanation: We would miscompile `required` initializer in subclasses of Objective-C classes, causing an `init` message to be sent to the class object rather than an allocated instance of the object.\r\n\r\nScope: This was a latent bug in `dynamic` initializers, aggravated by our change to make all ObjC-compatible interfaces implicitly `dynamic` in order to ensure cross-language-version compatibility, making it a regression for existing code.\r\n\r\nIssue: SR-5223 | rdar://problem/32778104.\r\n\r\nRisk: Low, small bug fix.\r\n\r\nTesting: Swift CI, compatibility suite, test case from Jira.",
      "score": 1.7466732
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11109",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11109/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11109/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11109/events",
      "html_url": "https://github.com/apple/swift/pull/11109",
      "id": 244805108,
      "number": 11109,
      "title": "[Serialization] Recover from ObjC protocols changing inheritance.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-21T23:22:45Z",
      "updated_at": "2017-07-24T23:22:18Z",
      "closed_at": "2017-07-24T23:22:10Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11109",
        "html_url": "https://github.com/apple/swift/pull/11109",
        "diff_url": "https://github.com/apple/swift/pull/11109.diff",
        "patch_url": "https://github.com/apple/swift/pull/11109.patch"
      },
      "body": "When there's an Objective-C protocol that adopts other protocols, the other protocols become part of the requirement signature. If that can change, Swift conformances to that protocol will get very confused when it comes time to deserialize the conformances that satisfy the requirement signature.\r\n\r\nTo recover from this, just deserialize *all* trailing conformances, rather than follow the requirement signature, and match them up after the fact. (This only works for Objective-C protocols where we know all conformance requirements represent inherited protocols, as opposed to constraints on associated types.)\r\n\r\nrdar://problem/33356098",
      "score": 1.7685665
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11113",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11113/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11113/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11113/events",
      "html_url": "https://github.com/apple/swift/pull/11113",
      "id": 244812219,
      "number": 11113,
      "title": "tests: temporarily disable Interpreter/SDK/libc.swift",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-22T00:39:28Z",
      "updated_at": "2017-07-22T01:22:54Z",
      "closed_at": "2017-07-22T01:22:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11113",
        "html_url": "https://github.com/apple/swift/pull/11113",
        "diff_url": "https://github.com/apple/swift/pull/11113.diff",
        "patch_url": "https://github.com/apple/swift/pull/11113.patch"
      },
      "body": "r://problem/33388782\r\n",
      "score": 1.747055
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11114",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11114/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11114/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11114/events",
      "html_url": "https://github.com/apple/swift/pull/11114",
      "id": 244812670,
      "number": 11114,
      "title": "[RangeInfo] Address Argyrios' code review comments. NFC",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-22T00:46:16Z",
      "updated_at": "2017-07-22T01:10:53Z",
      "closed_at": "2017-07-22T01:10:53Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11114",
        "html_url": "https://github.com/apple/swift/pull/11114",
        "diff_url": "https://github.com/apple/swift/pull/11114.diff",
        "patch_url": "https://github.com/apple/swift/pull/11114.patch"
      },
      "body": "",
      "score": 1.7470572
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11115",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11115/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11115/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11115/events",
      "html_url": "https://github.com/apple/swift/pull/11115",
      "id": 244817399,
      "number": 11115,
      "title": "[docs] Branches.md: If you commit at llvm.org, you should cherry-pick.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-22T02:14:21Z",
      "updated_at": "2017-07-24T15:52:42Z",
      "closed_at": "2017-07-22T02:52:45Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11115",
        "html_url": "https://github.com/apple/swift/pull/11115",
        "diff_url": "https://github.com/apple/swift/pull/11115.diff",
        "patch_url": "https://github.com/apple/swift/pull/11115.patch"
      },
      "body": "Clarification suggested by @modocache; thanks, Brian!",
      "score": 1.7484326
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11116",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11116/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11116/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11116/events",
      "html_url": "https://github.com/apple/swift/pull/11116",
      "id": 244821406,
      "number": 11116,
      "title": "Allow pointer comparisons and KVO methods to avoid initiating formal accesses",
      "user": {
        "login": "rjmccall",
        "id": 793869,
        "avatar_url": "https://avatars1.githubusercontent.com/u/793869?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjmccall",
        "html_url": "https://github.com/rjmccall",
        "followers_url": "https://api.github.com/users/rjmccall/followers",
        "following_url": "https://api.github.com/users/rjmccall/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjmccall/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjmccall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjmccall/subscriptions",
        "organizations_url": "https://api.github.com/users/rjmccall/orgs",
        "repos_url": "https://api.github.com/users/rjmccall/repos",
        "events_url": "https://api.github.com/users/rjmccall/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjmccall/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-07-22T03:46:42Z",
      "updated_at": "2017-07-24T22:12:27Z",
      "closed_at": "2017-07-23T02:10:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11116",
        "html_url": "https://github.com/apple/swift/pull/11116",
        "diff_url": "https://github.com/apple/swift/pull/11116.diff",
        "patch_url": "https://github.com/apple/swift/pull/11116.patch"
      },
      "body": "",
      "score": 1.7707165
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11119",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11119/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11119/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11119/events",
      "html_url": "https://github.com/apple/swift/pull/11119",
      "id": 244892917,
      "number": 11119,
      "title": "fix description `CountablePartialRangeFrom`",
      "user": {
        "login": "ezura",
        "id": 2020337,
        "avatar_url": "https://avatars3.githubusercontent.com/u/2020337?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ezura",
        "html_url": "https://github.com/ezura",
        "followers_url": "https://api.github.com/users/ezura/followers",
        "following_url": "https://api.github.com/users/ezura/following{/other_user}",
        "gists_url": "https://api.github.com/users/ezura/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ezura/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ezura/subscriptions",
        "organizations_url": "https://api.github.com/users/ezura/orgs",
        "repos_url": "https://api.github.com/users/ezura/repos",
        "events_url": "https://api.github.com/users/ezura/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ezura/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-23T06:54:36Z",
      "updated_at": "2017-07-23T19:16:11Z",
      "closed_at": "2017-07-23T19:16:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11119",
        "html_url": "https://github.com/apple/swift/pull/11119",
        "diff_url": "https://github.com/apple/swift/pull/11119.diff",
        "patch_url": "https://github.com/apple/swift/pull/11119.patch"
      },
      "body": "This PR is fix description `CountablePartialRangeFrom` in Range.swift.gyb.\r\nWe can not treat `5.0...` as `CountablePartialRangeFrom`...?",
      "score": 1.7778296
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11122",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11122/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11122/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11122/events",
      "html_url": "https://github.com/apple/swift/pull/11122",
      "id": 244929731,
      "number": 11122,
      "title": "[swiftc (43 vs. 5582)] Add crasher in swift::TypeChecker::validateExtension(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-23T19:10:44Z",
      "updated_at": "2017-07-23T20:44:11Z",
      "closed_at": "2017-07-23T20:44:11Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11122",
        "html_url": "https://github.com/apple/swift/pull/11122",
        "diff_url": "https://github.com/apple/swift/pull/11122.diff",
        "patch_url": "https://github.com/apple/swift/pull/11122.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::validateExtension(...)`.\n\nCurrent number of unresolved compiler crashers: 43 (5582 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ae85e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae85e8)\n1 0x0000000003ae8d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae8d26)\n2 0x00007fec1bdbe390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00000000011feb95 formExtensionInterfaceType(swift::Type, swift::GenericParamList*) (/path/to/swift/bin/swift+0x11feb95)\n4 0x00000000011feb19 formExtensionInterfaceType(swift::Type, swift::GenericParamList*) (/path/to/swift/bin/swift+0x11feb19)\n5 0x00000000011e1682 checkExtensionGenericParams(swift::TypeChecker&, swift::ExtensionDecl*, swift::Type, swift::GenericParamList*) (/path/to/swift/bin/swift+0x11e1682)\n6 0x00000000011d4a4f swift::TypeChecker::validateExtension(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11d4a4f)\n7 0x00000000011eb80b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11eb80b)\n8 0x00000000011da9b4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11da9b4)\n9 0x00000000011da883 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11da883)\n10 0x0000000001268514 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x1268514)\n11 0x0000000000fb5717 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb5717)\n12 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n13 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n14 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n15 0x00007fec1a2ce830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n16 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.7855092
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11123",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11123/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11123/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11123/events",
      "html_url": "https://github.com/apple/swift/pull/11123",
      "id": 244935087,
      "number": 11123,
      "title": "[swiftc (44 vs. 5582)] Add crasher in swift::TupleTypeElt::TupleTypeElt",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-23T20:45:59Z",
      "updated_at": "2017-07-23T23:51:36Z",
      "closed_at": "2017-07-23T22:00:12Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11123",
        "html_url": "https://github.com/apple/swift/pull/11123",
        "diff_url": "https://github.com/apple/swift/pull/11123.diff",
        "patch_url": "https://github.com/apple/swift/pull/11123.patch"
      },
      "body": "Add test case for crash triggered in `swift::TupleTypeElt::TupleTypeElt`.\n\nCurrent number of unresolved compiler crashers: 44 (5582 resolved)\n\n/cc Robert Widmann - just wanted to let you know that this crasher caused an assertion failure for the assertion `fl.isInOut() && \"caller did not set flags correctly\"` added on 2017-07-11 by you in commit 5d5d16393 :-)\n\nAssertion failure in [`lib/AST/ASTContext.cpp (line 2748)`](https://github.com/apple/swift/blob/e6d3e3751932dd485541deec5c165f30bc1cfb3b/lib/AST/ASTContext.cpp#L2748):\n\n```\nAssertion `fl.isInOut() && \"caller did not set flags correctly\"' failed.\n\nWhen executing: swift::TupleTypeElt::TupleTypeElt(swift::Type, swift::Identifier, swift::ParameterTypeFlags)\n```\n\nAssertion context:\n\n```c++\n                           ParameterTypeFlags fl)\n  : Name(name), ElementType(ty), Flags(fl) {\n  if (fl.isInOut())\n    assert(!ty->is<InOutType>() && \"caller did not pass a base type\");\n  if (ty->is<InOutType>())\n    assert(fl.isInOut() && \"caller did not set flags correctly\");\n}\n\nType TupleTypeElt::getType() const {\n  if (Flags.isInOut()) return InOutType::get(ElementType);\n  return ElementType;\n```\nStack trace:\n\n```\n0 0x0000000003ae85e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae85e8)\n1 0x0000000003ae8d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae8d26)\n2 0x00007f5ee0168390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f5ede68d428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f5ede68f02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f5ede685bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f5ede685c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000014d1488 swift::TupleTypeElt::TupleTypeElt(swift::Type, swift::Identifier, swift::ParameterTypeFlags) (/path/to/swift/bin/swift+0x14d1488)\n8 0x00000000012a77b9 (anonymous namespace)::FailureDiagnosis::typeCheckArgumentChildIndependently(swift::Expr*, swift::Type, (anonymous namespace)::CalleeCandidateInfo const&, swift::OptionSet<TCCFlags, unsigned int>) (/path/to/swift/bin/swift+0x12a77b9)\n9 0x00000000012b924a (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x12b924a)\n10 0x000000000129b372 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x129b372)\n11 0x0000000001294e92 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x1294e92)\n12 0x000000000129ad79 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x129ad79)\n13 0x00000000011bf708 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11bf708)\n14 0x00000000011c34c5 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x11c34c5)\n15 0x000000000124a7e0 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x124a7e0)\n16 0x0000000001249fe6 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x1249fe6)\n17 0x0000000001268580 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x1268580)\n18 0x0000000000fb5717 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb5717)\n19 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n20 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n21 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n22 0x00007f5ede678830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n23 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.787443
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11124",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11124/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11124/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11124/events",
      "html_url": "https://github.com/apple/swift/pull/11124",
      "id": 244939355,
      "number": 11124,
      "title": "[swiftc (45 vs. 5582)] Add crasher in swift::TypeChecker::resolveIdentifierType",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2017-07-23T22:04:41Z",
      "updated_at": "2017-07-24T08:19:40Z",
      "closed_at": "2017-07-24T08:19:40Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11124",
        "html_url": "https://github.com/apple/swift/pull/11124",
        "diff_url": "https://github.com/apple/swift/pull/11124.diff",
        "patch_url": "https://github.com/apple/swift/pull/11124.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::resolveIdentifierType`.\n\nCurrent number of unresolved compiler crashers: 45 (5582 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `!isa<ProtocolDecl>(nominal) && \"Cannot be a protocol\"` added on 2017-04-23 by you in commit 07c189558 :-)\n\nAssertion failure in [`lib/Sema/TypeCheckType.cpp (line 688)`](https://github.com/apple/swift/blob/bd02831599e8764d6bcfa955343e7e6c144c9cc1/lib/Sema/TypeCheckType.cpp#L688):\n\n```\nAssertion `!isa<ProtocolDecl>(nominal) && \"Cannot be a protocol\"' failed.\n\nWhen executing: swift::Type diagnoseUnknownType(swift::TypeChecker &, swift::DeclContext *, swift::Type, swift::SourceRange, swift::ComponentIdentTypeRepr *, TypeResolutionOptions, NameLookupOptions, swift::GenericTypeResolver *, UnsatisfiedDependency *)\n```\n\nAssertion context:\n\n```c++\n          (nominal = nominalDC->getAsNominalTypeOrNominalTypeExtensionContext())) {\n        // Attempt to refer to 'Self' within a non-protocol nominal\n        // type. Fix this by replacing 'Self' with the nominal type name.\n\n        // Retrieve the nominal type and resolve it within this context.\n        assert(!isa<ProtocolDecl>(nominal) && \"Cannot be a protocol\");\n        auto type = resolver->mapTypeIntoContext(\n          dc->getInnermostTypeContext()->getSelfInterfaceType());\n        if (type->hasError())\n          return type;\n\n```\nStack trace:\n\n```\n0 0x0000000003ae85e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae85e8)\n1 0x0000000003ae8d26 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae8d26)\n2 0x00007fc4866f5390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fc484c1a428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fc484c1c02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fc484c12bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fc484c12c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000126141a diagnoseUnknownType(swift::TypeChecker&, swift::DeclContext*, swift::Type, swift::SourceRange, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::OptionSet<swift::NameLookupFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x126141a)\n8 0x000000000125fbc7 resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125fbc7)\n9 0x000000000125a093 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a093)\n10 0x0000000001259e6f resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1259e6f)\n11 0x0000000001259a2a swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1259a2a)\n12 0x000000000125a7e2 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x125a7e2)\n13 0x000000000125a6ec swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a6ec)\n14 0x00000000012590a0 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x12590a0)\n15 0x000000000120a876 checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x120a876)\n16 0x000000000120a3d9 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x120a3d9)\n17 0x00000000011ef7e7 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x11ef7e7)\n18 0x00000000011da9a4 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11da9a4)\n19 0x00000000011dca91 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x11dca91)\n20 0x00000000015e09cb swift::DeclContext::lookupQualified(swift::Type, swift::DeclName, swift::NLOptions, swift::LazyResolver*, llvm::SmallVectorImpl<swift::ValueDecl*>&) const (/path/to/swift/bin/swift+0x15e09cb)\n21 0x00000000012100af swift::TypeChecker::lookupMember(swift::DeclContext*, swift::Type, swift::DeclName, swift::OptionSet<swift::NameLookupFlags, unsigned int>)::$_1::operator()() const (/path/to/swift/bin/swift+0x12100af)\n22 0x000000000120ff37 swift::TypeChecker::lookupMember(swift::DeclContext*, swift::Type, swift::DeclName, swift::OptionSet<swift::NameLookupFlags, unsigned int>) (/path/to/swift/bin/swift+0x120ff37)\n23 0x0000000001260740 diagnoseUnknownType(swift::TypeChecker&, swift::DeclContext*, swift::Type, swift::SourceRange, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::OptionSet<swift::NameLookupFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1260740)\n24 0x000000000125a3fd resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a3fd)\n25 0x0000000001259a2a swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1259a2a)\n26 0x000000000125a7e2 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x125a7e2)\n27 0x000000000125a6ec swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a6ec)\n28 0x00000000012590a0 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x12590a0)\n29 0x000000000131e971 swift::IterativeTypeChecker::processResolveInheritedClauseEntry(std::pair<llvm::PointerUnion<swift::TypeDecl*, swift::ExtensionDecl*>, unsigned int>, llvm::function_ref<bool (swift::TypeCheckRequest)>) (/path/to/swift/bin/swift+0x131e971)\n30 0x00000000012e6856 swift::IterativeTypeChecker::satisfy(swift::TypeCheckRequest) (/path/to/swift/bin/swift+0x12e6856)\n31 0x00000000011d2aa9 swift::TypeChecker::resolveInheritanceClause(llvm::PointerUnion<swift::TypeDecl*, swift::ExtensionDecl*>) (/path/to/swift/bin/swift+0x11d2aa9)\n32 0x00000000015a65f4 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x15a65f4)\n33 0x00000000015a6cf4 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15a6cf4)\n34 0x00000000015aa8f5 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x15aa8f5)\n35 0x00000000015a887b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x15a887b)\n36 0x000000000157515c swift::ProtocolDecl::computeRequirementSignature() (/path/to/swift/bin/swift+0x157515c)\n37 0x000000000120d908 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x120d908)\n38 0x00000000011dc802 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x11dc802)\n39 0x00000000011ed0af (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed0af)\n40 0x00000000011da984 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11da984)\n41 0x00000000011da883 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11da883)\n42 0x0000000001268514 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x1268514)\n43 0x0000000000fb5717 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb5717)\n44 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n45 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n46 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n47 0x00007fc484c05830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n48 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.7909243
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11125",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11125/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11125/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11125/events",
      "html_url": "https://github.com/apple/swift/pull/11125",
      "id": 244947684,
      "number": 11125,
      "title": "Sema/AST: Fix a couple of protocol typealias validation order bugs",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-24T00:35:06Z",
      "updated_at": "2017-07-24T19:54:01Z",
      "closed_at": "2017-07-24T05:40:44Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11125",
        "html_url": "https://github.com/apple/swift/pull/11125",
        "diff_url": "https://github.com/apple/swift/pull/11125.diff",
        "patch_url": "https://github.com/apple/swift/pull/11125.patch"
      },
      "body": "We break name lookup circularities by special-casing validation of\r\ntype aliases, resolving the underlying type of the type alias before\r\nbuilding the generic environment of the protocol that contains the\r\ntype alias.\r\n\r\nHowever doing this gives the type alias an underlying type written\r\nin terms of unresolved DependentMemberTypes which do not map to\r\nassociated types.\r\n\r\nAttempting to substitute such a type fails.\r\n\r\nWe worked around this by re-validating type alias members of\r\nprotocols when we finally got around to building the protocol's\r\ngeneric environment. Force this to happen earlier in\r\nsubstMemberTypeWithBase(), because we need the fully resolved\r\nunderlying type in order to perform the substitution.\r\n\r\nAlso, fix TypeAliasDecl::setUnderlyingType() to only create a new\r\nNameAliasType the first time it is called. In this special case\r\nwhere it can be called twice with a resolved underlying type the\r\nsecond time, we should not be creating a new NameAliasType.\r\n\r\nThere are better fixes possible here, requiring various levels\r\nof refactoring. I'll investigate this soon, but for now this narrow\r\nfix should address the problem with minimal risk.\r\n\r\nFixes <rdar://problem/33189068>.",
      "score": 1.7961192
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11126",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11126/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11126/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11126/events",
      "html_url": "https://github.com/apple/swift/pull/11126",
      "id": 244970298,
      "number": 11126,
      "title": "[NFC] Refactor self type computation to return a Param",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-24T04:38:51Z",
      "updated_at": "2017-07-24T07:17:20Z",
      "closed_at": "2017-07-24T06:49:04Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11126",
        "html_url": "https://github.com/apple/swift/pull/11126",
        "diff_url": "https://github.com/apple/swift/pull/11126.diff",
        "patch_url": "https://github.com/apple/swift/pull/11126.patch"
      },
      "body": "Remove a user of InOutType::get and flip a few users of\r\nFunctionType::get to pass Params instead of naked input\r\ntypes.",
      "score": 1.794336
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11127",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11127/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11127/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11127/events",
      "html_url": "https://github.com/apple/swift/pull/11127",
      "id": 244978388,
      "number": 11127,
      "title": "Sema/AST: Fix a couple of protocol typealias validation order bugs [4.0]",
      "user": {
        "login": "slavapestov",
        "id": 66486,
        "avatar_url": "https://avatars1.githubusercontent.com/u/66486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slavapestov",
        "html_url": "https://github.com/slavapestov",
        "followers_url": "https://api.github.com/users/slavapestov/followers",
        "following_url": "https://api.github.com/users/slavapestov/following{/other_user}",
        "gists_url": "https://api.github.com/users/slavapestov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/slavapestov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/slavapestov/subscriptions",
        "organizations_url": "https://api.github.com/users/slavapestov/orgs",
        "repos_url": "https://api.github.com/users/slavapestov/repos",
        "events_url": "https://api.github.com/users/slavapestov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/slavapestov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T05:53:38Z",
      "updated_at": "2017-07-24T19:56:01Z",
      "closed_at": "2017-07-24T19:56:01Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11127",
        "html_url": "https://github.com/apple/swift/pull/11127",
        "diff_url": "https://github.com/apple/swift/pull/11127.diff",
        "patch_url": "https://github.com/apple/swift/pull/11127.patch"
      },
      "body": "* Description: Fix a crash when a typealias defined inside a protocol is validated before the protocol itself.\r\n\r\n* Origination: Swift 4.0 fixed some issues with protocol typaliases by adding a new code path for validating the typealias before the protocol was completely validated. However some callers depend on the additional invariants established by validating the protocol, and some of these callers did not validate the protocol as they should.\r\n\r\n* Scope of the issue: Reported externally as a regression from 3.1.\r\n\r\n* Risk: Low; the standard library and the validation test suite's compiler crasher collection exercises recursive validation pretty well.\r\n\r\n* Radar: <rdar://problem/33189068>\r\n\r\n* Reviewed by: @DougGregor and @huonw ",
      "score": 1.7992812
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11128",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11128/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11128/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11128/events",
      "html_url": "https://github.com/apple/swift/pull/11128",
      "id": 245004690,
      "number": 11128,
      "title": "[swiftc (46 vs. 5582)] Add crasher in swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T08:20:33Z",
      "updated_at": "2017-07-24T10:04:00Z",
      "closed_at": "2017-07-24T10:04:00Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11128",
        "html_url": "https://github.com/apple/swift/pull/11128",
        "diff_url": "https://github.com/apple/swift/pull/11128.diff",
        "patch_url": "https://github.com/apple/swift/pull/11128.patch"
      },
      "body": "Add test case for crash triggered in `swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(...)`.\n\nCurrent number of unresolved compiler crashers: 46 (5582 resolved)\n\nStack trace:\n\n```\n0 0x0000000003ae8f28 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae8f28)\n1 0x0000000003ae9666 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae9666)\n2 0x00007f9436c6a390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x000000000159e87c formProtocolRelativeType(swift::ProtocolDecl*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x159e87c)\n4 0x000000000159e893 formProtocolRelativeType(swift::ProtocolDecl*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x159e893)\n5 0x000000000159e6c6 swift::GenericSignatureBuilder::FloatingRequirementSource::getSource(swift::GenericSignatureBuilder::PotentialArchetype*) const (/path/to/swift/bin/swift+0x159e6c6)\n6 0x00000000015aaec0 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x15aaec0)\n7 0x00000000015a8f0b swift::GenericSignatureBuilder::addRequirement(swift::Requirement const&, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::ModuleDecl*, swift::SubstitutionMap const*) (/path/to/swift/bin/swift+0x15a8f0b)\n8 0x00000000015b48fd swift::GenericSignatureBuilder::InferRequirementsWalker::walkToTypePost(swift::Type) (/path/to/swift/bin/swift+0x15b48fd)\n9 0x0000000001612467 swift::TypeVisitor<(anonymous namespace)::Traversal, bool>::visit(swift::Type) (/path/to/swift/bin/swift+0x1612467)\n10 0x0000000001612416 swift::TypeVisitor<(anonymous namespace)::Traversal, bool>::visit(swift::Type) (/path/to/swift/bin/swift+0x1612416)\n11 0x00000000016113c4 swift::Type::walk(swift::TypeWalker&) const (/path/to/swift/bin/swift+0x16113c4)\n12 0x00000000015bb0ad swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_22>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x15bb0ad)\n13 0x00000000015b4742 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_54>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x15b4742)\n14 0x00000000015a6d81 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x15a6d81)\n15 0x00000000015a7384 swift::GenericSignatureBuilder::addConformanceRequirement(swift::GenericSignatureBuilder::PotentialArchetype*, swift::ProtocolDecl*, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15a7384)\n16 0x00000000015aaf85 swift::GenericSignatureBuilder::addTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind) (/path/to/swift/bin/swift+0x15aaf85)\n17 0x00000000015bb27f swift::GenericSignatureBuilder::ConstraintResult llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>::callback_fn<swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*)::$_22>(long, swift::Type, swift::TypeRepr const*) (/path/to/swift/bin/swift+0x15bb27f)\n18 0x00000000015b4742 std::_Function_handler<void (swift::Type, swift::TypeRepr const*), visitInherited(llvm::ArrayRef<swift::TypeLoc>, llvm::function_ref<swift::GenericSignatureBuilder::ConstraintResult (swift::Type, swift::TypeRepr const*)>)::$_54>::_M_invoke(std::_Any_data const&, swift::Type&&, swift::TypeRepr const*&&) (/path/to/swift/bin/swift+0x15b4742)\n19 0x00000000015a6d81 swift::GenericSignatureBuilder::addInheritedRequirements(swift::TypeDecl*, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::RequirementSource const*, swift::ModuleDecl*) (/path/to/swift/bin/swift+0x15a6d81)\n20 0x00000000015a6b9e swift::GenericSignatureBuilder::addGenericParameterRequirements(swift::GenericTypeParamDecl*) (/path/to/swift/bin/swift+0x15a6b9e)\n21 0x0000000001209ca2 swift::TypeChecker::checkGenericParamList(swift::GenericSignatureBuilder*, swift::GenericParamList*, swift::GenericSignature*, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x1209ca2)\n22 0x000000000120a9f1 checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x120a9f1)\n23 0x000000000120a6a9 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x120a6a9)\n24 0x00000000011efa74 (anonymous namespace)::DeclChecker::visitFuncDecl(swift::FuncDecl*) (/path/to/swift/bin/swift+0x11efa74)\n25 0x00000000011dac74 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac74)\n26 0x00000000011ebd3b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11ebd3b)\n27 0x00000000011dac84 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac84)\n28 0x00000000011dab53 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11dab53)\n29 0x00000000012687e4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x12687e4)\n30 0x0000000000fb59e7 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb59e7)\n31 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n32 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n33 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n34 0x00007f943517a830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n35 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.7975739
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11129",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11129/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11129/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11129/events",
      "html_url": "https://github.com/apple/swift/pull/11129",
      "id": 245013104,
      "number": 11129,
      "title": "[ConstraintSolver] Prefer same name class properties found on subclass over superclass",
      "user": {
        "login": "xedin",
        "id": 21240,
        "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xedin",
        "html_url": "https://github.com/xedin",
        "followers_url": "https://api.github.com/users/xedin/followers",
        "following_url": "https://api.github.com/users/xedin/following{/other_user}",
        "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
        "organizations_url": "https://api.github.com/users/xedin/orgs",
        "repos_url": "https://api.github.com/users/xedin/repos",
        "events_url": "https://api.github.com/users/xedin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xedin/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-07-24T08:55:36Z",
      "updated_at": "2017-07-24T23:14:13Z",
      "closed_at": "2017-07-24T23:14:13Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11129",
        "html_url": "https://github.com/apple/swift/pull/11129",
        "diff_url": "https://github.com/apple/swift/pull/11129.diff",
        "patch_url": "https://github.com/apple/swift/pull/11129.patch"
      },
      "body": "If the class property with the same name and type was found on both subclass\r\nand superclass, let's always prefer subclass with all else equal, because\r\nsubclass property could only be found if requested directly.\r\n\r\nResolves: rdar://problem/32973206\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.8021487
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11130",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11130/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11130/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11130/events",
      "html_url": "https://github.com/apple/swift/pull/11130",
      "id": 245031596,
      "number": 11130,
      "title": "[swiftc (47 vs. 5582)] Add crasher in swift::constraints::ConstraintGraph::addConstraint(...)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T10:07:20Z",
      "updated_at": "2017-07-24T11:51:27Z",
      "closed_at": "2017-07-24T11:51:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11130",
        "html_url": "https://github.com/apple/swift/pull/11130",
        "diff_url": "https://github.com/apple/swift/pull/11130.diff",
        "patch_url": "https://github.com/apple/swift/pull/11130.patch"
      },
      "body": "Add test case for crash triggered in `swift::constraints::ConstraintGraph::addConstraint(...)`.\n\nCurrent number of unresolved compiler crashers: 47 (5582 resolved)\n\n/cc @DougGregor - just wanted to let you know that this crasher caused an assertion failure for the assertion `impl.getGraphIndex() < TypeVariables.size() && \"Out-of-bounds index\"` added on 2013-12-09 by you in commit 11794095 :-)\n\nAssertion failure in [`lib/Sema/ConstraintGraph.cpp (line 50)`](https://github.com/apple/swift/blob/725702c28307491a01c6bad42e5f4123cd9148de/lib/Sema/ConstraintGraph.cpp#L50):\n\n```\nAssertion `impl.getGraphIndex() < TypeVariables.size() && \"Out-of-bounds index\"' failed.\n\nWhen executing: std::pair<ConstraintGraphNode &, unsigned int> swift::constraints::ConstraintGraph::lookupNode(swift::TypeVariableType *)\n```\n\nAssertion context:\n\n```c++\nstd::pair<ConstraintGraphNode &, unsigned>\nConstraintGraph::lookupNode(TypeVariableType *typeVar) {\n  // Check whether we've already created a node for this type variable.\n  auto &impl = typeVar->getImpl();\n  if (auto nodePtr = impl.getGraphNode()) {\n    assert(impl.getGraphIndex() < TypeVariables.size() && \"Out-of-bounds index\");\n    assert(TypeVariables[impl.getGraphIndex()] == typeVar &&\n           \"Type variable mismatch\");\n    return { *nodePtr, impl.getGraphIndex() };\n  }\n\n```\nStack trace:\n\n```\n0 0x0000000003ae8f28 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae8f28)\n1 0x0000000003ae9666 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae9666)\n2 0x00007f7cdb9c7390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f7cd9eec428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f7cd9eee02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f7cd9ee4bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f7cd9ee4c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x000000000119a2bb (/path/to/swift/bin/swift+0x119a2bb)\n8 0x000000000119bbdf swift::constraints::ConstraintGraph::addConstraint(swift::constraints::Constraint*) (/path/to/swift/bin/swift+0x119bbdf)\n9 0x000000000116a909 swift::constraints::ConstraintSystem::addUnsolvedConstraint(swift::constraints::Constraint*) (/path/to/swift/bin/swift+0x116a909)\n10 0x000000000117cf20 swift::constraints::ConstraintSystem::addExplicitConversionConstraint(swift::Type, swift::Type, bool, swift::constraints::ConstraintLocatorBuilder) (/path/to/swift/bin/swift+0x117cf20)\n11 0x00000000011618af swift::ASTVisitor<(anonymous namespace)::ConstraintGenerator, swift::Type, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x11618af)\n12 0x00000000011683b8 (anonymous namespace)::ConstraintWalker::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x11683b8)\n13 0x0000000001550faf swift::ASTVisitor<(anonymous namespace)::Traversal, swift::Expr*, swift::Stmt*, bool, swift::Pattern*, bool, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x1550faf)\n14 0x000000000154dbdb swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x154dbdb)\n15 0x000000000115ed91 swift::constraints::ConstraintSystem::generateConstraints(swift::Expr*) (/path/to/swift/bin/swift+0x115ed91)\n16 0x000000000118be18 swift::constraints::ConstraintSystem::solve(swift::Expr*&, swift::Type, swift::ExprTypeCheckListener*, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118be18)\n17 0x00000000011bf997 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11bf997)\n18 0x00000000011c4012 swift::TypeChecker::getPossibleTypesOfExpressionWithoutApplying(swift::Expr*&, swift::DeclContext*, llvm::SmallVectorImpl<swift::Type>&, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*) (/path/to/swift/bin/swift+0x11c4012)\n19 0x00000000012b856b (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x12b856b)\n20 0x000000000129b642 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x129b642)\n21 0x0000000001295162 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) (/path/to/swift/bin/swift+0x1295162)\n22 0x000000000129b049 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*) (/path/to/swift/bin/swift+0x129b049)\n23 0x00000000011bf9d8 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11bf9d8)\n24 0x00000000011c3795 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x11c3795)\n25 0x000000000124aab0 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) (/path/to/swift/bin/swift+0x124aab0)\n26 0x000000000124a2b6 swift::TypeChecker::typeCheckTopLevelCodeDecl(swift::TopLevelCodeDecl*) (/path/to/swift/bin/swift+0x124a2b6)\n27 0x0000000001268850 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x1268850)\n28 0x0000000000fb59e7 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb59e7)\n29 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n30 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n31 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n32 0x00007f7cd9ed7830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n33 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.7992084
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11131",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11131/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11131/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11131/events",
      "html_url": "https://github.com/apple/swift/pull/11131",
      "id": 245056441,
      "number": 11131,
      "title": "[swiftc (48 vs. 5582)] Add crasher in swift::SubstitutionMap::lookupConformance",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T11:55:55Z",
      "updated_at": "2017-07-24T13:12:19Z",
      "closed_at": "2017-07-24T13:12:19Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11131",
        "html_url": "https://github.com/apple/swift/pull/11131",
        "diff_url": "https://github.com/apple/swift/pull/11131.diff",
        "patch_url": "https://github.com/apple/swift/pull/11131.patch"
      },
      "body": "Add test case for crash triggered in `swift::SubstitutionMap::lookupConformance`.\n\nCurrent number of unresolved compiler crashers: 48 (5582 resolved)\n\nAssertion failure in `llvm/include/llvm/ADT/Optional.h (line 138)`:\n\n```\nAssertion `hasVal' failed.\n\nWhen executing: T &&llvm::Optional<swift::ProtocolConformanceRef>::operator*() && [T = swift::ProtocolConformanceRef]\n```\n\nAssertion context:\n\n```c++\n    return hasValue() ? getValue() : std::forward<U>(value);\n  }\n\n#if LLVM_HAS_RVALUE_REFERENCE_THIS\n  T&& getValue() && { assert(hasVal); return std::move(*getPointer()); }\n  T&& operator*() && { assert(hasVal); return std::move(*getPointer()); }\n\n  template <typename U>\n  T getValueOr(U &&value) && {\n    return hasValue() ? std::move(getValue()) : std::forward<U>(value);\n  }\n```\nStack trace:\n\n```\n0 0x0000000003ae8f28 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae8f28)\n1 0x0000000003ae9666 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae9666)\n2 0x00007fb288bad390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007fb2870d2428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007fb2870d402a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007fb2870cabd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007fb2870cac82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000015f71a9 swift::SubstitutionMap::lookupConformance(swift::CanType, swift::ProtocolDecl*) const (/path/to/swift/bin/swift+0x15f71a9)\n8 0x0000000001603ca0 swift::LookUpConformanceInSubstitutionMap::operator()(swift::CanType, swift::Type, swift::ProtocolType*) const (/path/to/swift/bin/swift+0x1603ca0)\n9 0x0000000000c39469 llvm::Optional<swift::ProtocolConformanceRef> llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>::callback_fn<swift::LookUpConformanceInSubstitutionMap>(long, swift::CanType, swift::Type, swift::ProtocolType*) (/path/to/swift/bin/swift+0xc39469)\n10 0x00000000016041ad getMemberForBaseType(llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::Type, swift::Type, swift::AssociatedTypeDecl*, swift::Identifier, swift::SubstOptions) (/path/to/swift/bin/swift+0x16041ad)\n11 0x0000000001608f09 llvm::Optional<swift::Type> llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>::callback_fn<substType(swift::Type, llvm::function_ref<swift::Type (swift::SubstitutableType*)>, llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::SubstOptions)::$_18>(long, swift::TypeBase*) (/path/to/swift/bin/swift+0x1608f09)\n12 0x0000000001605156 swift::Type::transformRec(llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>) const (/path/to/swift/bin/swift+0x1605156)\n13 0x00000000016003f5 swift::Type::subst(swift::SubstitutionMap const&, swift::SubstOptions) const (/path/to/swift/bin/swift+0x16003f5)\n14 0x00000000015ec786 swift::SpecializedProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15ec786)\n15 0x00000000015ebec2 swift::ProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15ebec2)\n16 0x00000000015eb8d9 swift::ProtocolConformance::getTypeWitness(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15eb8d9)\n17 0x0000000001604277 getMemberForBaseType(llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::Type, swift::Type, swift::AssociatedTypeDecl*, swift::Identifier, swift::SubstOptions) (/path/to/swift/bin/swift+0x1604277)\n18 0x0000000001608f09 llvm::Optional<swift::Type> llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>::callback_fn<substType(swift::Type, llvm::function_ref<swift::Type (swift::SubstitutableType*)>, llvm::function_ref<llvm::Optional<swift::ProtocolConformanceRef> (swift::CanType, swift::Type, swift::ProtocolType*)>, swift::SubstOptions)::$_18>(long, swift::TypeBase*) (/path/to/swift/bin/swift+0x1608f09)\n19 0x0000000001605156 swift::Type::transformRec(llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>) const (/path/to/swift/bin/swift+0x1605156)\n20 0x00000000016003f5 swift::Type::subst(swift::SubstitutionMap const&, swift::SubstOptions) const (/path/to/swift/bin/swift+0x16003f5)\n21 0x00000000015ec786 swift::SpecializedProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15ec786)\n22 0x00000000015ebec2 swift::ProtocolConformance::getTypeWitnessAndDecl(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15ebec2)\n23 0x00000000015eb8d9 swift::ProtocolConformance::getTypeWitness(swift::AssociatedTypeDecl*, swift::LazyResolver*, swift::SubstOptions) const (/path/to/swift/bin/swift+0x15eb8d9)\n24 0x00000000015a40a2 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x15a40a2)\n25 0x00000000015acb3b swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15acb3b)\n26 0x00000000015ac5bc swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x15ac5bc)\n27 0x00000000015a4136 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x15a4136)\n28 0x00000000015acb3b swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15acb3b)\n29 0x00000000015ac5bc swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x15ac5bc)\n30 0x00000000015a4136 concretizeNestedTypeFromConcreteParent(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x15a4136)\n31 0x00000000015acb3b swift::GenericSignatureBuilder::addSameTypeRequirementToConcrete(swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type, swift::GenericSignatureBuilder::RequirementSource const*) (/path/to/swift/bin/swift+0x15acb3b)\n32 0x00000000015ac5bc swift::GenericSignatureBuilder::addSameTypeRequirement(llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, llvm::PointerUnion<swift::GenericSignatureBuilder::PotentialArchetype*, swift::Type>, swift::GenericSignatureBuilder::FloatingRequirementSource, swift::GenericSignatureBuilder::UnresolvedHandlingKind, llvm::function_ref<void (swift::Type, swift::Type)>) (/path/to/swift/bin/swift+0x15ac5bc)\n33 0x00000000015a3086 swift::GenericSignatureBuilder::PotentialArchetype::updateNestedTypeForConformance(llvm::PointerUnion<swift::AssociatedTypeDecl*, swift::TypeDecl*>, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x15a3086)\n34 0x00000000015a2513 swift::GenericSignatureBuilder::PotentialArchetype::getNestedArchetypeAnchor(swift::Identifier, swift::GenericSignatureBuilder&, swift::ArchetypeResolutionKind) (/path/to/swift/bin/swift+0x15a2513)\n35 0x00000000015b0be6 getLocalAnchor(swift::GenericSignatureBuilder::PotentialArchetype*, swift::GenericSignatureBuilder&) (/path/to/swift/bin/swift+0x15b0be6)\n36 0x00000000015af7bc swift::GenericSignatureBuilder::checkSameTypeConstraints(llvm::ArrayRef<swift::GenericTypeParamType*>, swift::GenericSignatureBuilder::PotentialArchetype*) (/path/to/swift/bin/swift+0x15af7bc)\n37 0x00000000015ad5ea swift::GenericSignatureBuilder::finalize(swift::SourceLoc, llvm::ArrayRef<swift::GenericTypeParamType*>, bool) (/path/to/swift/bin/swift+0x15ad5ea)\n38 0x000000000120d820 swift::TypeChecker::checkGenericEnvironment(swift::GenericParamList*, swift::DeclContext*, swift::GenericSignature*, bool, llvm::function_ref<void (swift::GenericSignatureBuilder&)>) (/path/to/swift/bin/swift+0x120d820)\n39 0x000000000120dc13 swift::TypeChecker::validateGenericTypeSignature(swift::GenericTypeDecl*) (/path/to/swift/bin/swift+0x120dc13)\n40 0x00000000011dcad2 swift::TypeChecker::validateDecl(swift::ValueDecl*) (/path/to/swift/bin/swift+0x11dcad2)\n41 0x00000000011ed37f (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed37f)\n42 0x00000000011dac54 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac54)\n43 0x00000000011ed69b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed69b)\n44 0x00000000011dac54 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac54)\n45 0x00000000011ebd3b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11ebd3b)\n46 0x00000000011dac84 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac84)\n47 0x00000000011dab53 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11dab53)\n48 0x00000000012687e4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x12687e4)\n49 0x0000000000fb59e7 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb59e7)\n50 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n51 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n52 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n53 0x00007fb2870bd830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n54 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8007203
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11132",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11132/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11132/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11132/events",
      "html_url": "https://github.com/apple/swift/pull/11132",
      "id": 245076252,
      "number": 11132,
      "title": "[swiftc (49 vs. 5582)] Add crasher in swift::TypeChecker::substMemberTypeWithBase",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T13:15:30Z",
      "updated_at": "2017-07-24T14:31:57Z",
      "closed_at": "2017-07-24T14:31:57Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11132",
        "html_url": "https://github.com/apple/swift/pull/11132",
        "diff_url": "https://github.com/apple/swift/pull/11132.diff",
        "patch_url": "https://github.com/apple/swift/pull/11132.patch"
      },
      "body": "Add test case for crash triggered in `swift::TypeChecker::substMemberTypeWithBase`.\n\nCurrent number of unresolved compiler crashers: 49 (5582 resolved)\n\n/cc @slavapestov - just wanted to let you know that this crasher caused an assertion failure for the assertion `isa<ClassDecl>(nominalDecl) && \"expected a class here\"` added on 2017-04-07 by you in commit 473faf1e :-)\n\nAssertion failure in [`lib/AST/Type.cpp (line 3230)`](https://github.com/apple/swift/blob/e1e759c758c6d08ee05c4a2e904a903b98d85f7d/lib/AST/Type.cpp#L3230):\n\n```\nAssertion `isa<ClassDecl>(nominalDecl) && \"expected a class here\"' failed.\n\nWhen executing: swift::Type swift::TypeBase::getSuperclassForDecl(const swift::ClassDecl *)\n```\n\nAssertion context:\n\n```c++\n             \"expected a class, archetype or existential\");\n      t = t->getSuperclass();\n      assert(t && \"archetype or existential is not class constrained\");\n      continue;\n    }\n    assert(isa<ClassDecl>(nominalDecl) && \"expected a class here\");\n\n    if (nominalDecl == baseClass)\n      return t;\n\n    t = t->getSuperclass();\n```\nStack trace:\n\n```\n0 0x0000000003ae8f28 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae8f28)\n1 0x0000000003ae9666 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae9666)\n2 0x00007f9cb2da7390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f9cb12cc428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f9cb12ce02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f9cb12c4bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f9cb12c4c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000016046d9 (/path/to/swift/bin/swift+0x16046d9)\n8 0x0000000001258829 swift::TypeChecker::substMemberTypeWithBase(swift::ModuleDecl*, swift::TypeDecl*, swift::Type) (/path/to/swift/bin/swift+0x1258829)\n9 0x00000000012586c0 swift::TypeChecker::resolveTypeInContext(swift::TypeDecl*, swift::DeclContext*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*) (/path/to/swift/bin/swift+0x12586c0)\n10 0x000000000126024d resolveTypeDecl(swift::TypeChecker&, swift::TypeDecl*, swift::SourceLoc, swift::DeclContext*, swift::DeclContext*, swift::GenericIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x126024d)\n11 0x000000000125fda6 resolveTopLevelIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, swift::ComponentIdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125fda6)\n12 0x000000000125a363 resolveIdentTypeComponent(swift::TypeChecker&, swift::DeclContext*, llvm::ArrayRef<swift::ComponentIdentTypeRepr*>, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a363)\n13 0x0000000001259cfa swift::TypeChecker::resolveIdentifierType(swift::DeclContext*, swift::IdentTypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, bool, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1259cfa)\n14 0x000000000125aab2 (anonymous namespace)::TypeResolver::resolveType(swift::TypeRepr*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>) (/path/to/swift/bin/swift+0x125aab2)\n15 0x000000000125a9bc swift::TypeChecker::resolveType(swift::TypeRepr*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x125a9bc)\n16 0x0000000001259370 swift::TypeChecker::validateType(swift::TypeLoc&, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver*, llvm::function_ref<bool (swift::TypeCheckRequest)>*) (/path/to/swift/bin/swift+0x1259370)\n17 0x0000000001212e3e validateParameterType(swift::ParamDecl*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&, swift::TypeChecker&) (/path/to/swift/bin/swift+0x1212e3e)\n18 0x0000000001212c3a swift::TypeChecker::typeCheckParameterList(swift::ParameterList*, swift::DeclContext*, swift::OptionSet<swift::TypeResolutionFlags, unsigned int>, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x1212c3a)\n19 0x000000000120aaac checkGenericFuncSignature(swift::TypeChecker&, swift::GenericSignatureBuilder*, swift::AbstractFunctionDecl*, swift::GenericTypeResolver&) (/path/to/swift/bin/swift+0x120aaac)\n20 0x000000000120a6a9 swift::TypeChecker::validateGenericFuncSignature(swift::AbstractFunctionDecl*) (/path/to/swift/bin/swift+0x120a6a9)\n21 0x00000000011ee2d4 (anonymous namespace)::DeclChecker::visitConstructorDecl(swift::ConstructorDecl*) (/path/to/swift/bin/swift+0x11ee2d4)\n22 0x00000000011dac64 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac64)\n23 0x00000000011ed69b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed69b)\n24 0x00000000011dac54 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac54)\n25 0x00000000011dab53 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11dab53)\n26 0x00000000012687e4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x12687e4)\n27 0x0000000000fb59e7 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb59e7)\n28 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n29 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n30 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n31 0x00007f9cb12b7830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n32 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8019383
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11133",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11133/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11133/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11133/events",
      "html_url": "https://github.com/apple/swift/pull/11133",
      "id": 245100718,
      "number": 11133,
      "title": "[swiftc (50 vs. 5582)] Add crasher in swift::constraints::ConstraintSystem::matchTypes",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "avatar_url": "https://avatars3.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T14:34:50Z",
      "updated_at": "2017-07-24T15:51:51Z",
      "closed_at": "2017-07-24T15:51:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11133",
        "html_url": "https://github.com/apple/swift/pull/11133",
        "diff_url": "https://github.com/apple/swift/pull/11133.diff",
        "patch_url": "https://github.com/apple/swift/pull/11133.patch"
      },
      "body": "Add test case for crash triggered in `swift::constraints::ConstraintSystem::matchTypes`.\n\nCurrent number of unresolved compiler crashers: 50 (5582 resolved)\n\n/cc @rudkx - just wanted to let you know that this crasher caused an assertion failure for the assertion `!type->hasError() && \"Should not be assigning a type involving ErrorType!\"` added on 2017-05-24 by you in commit e83131da :-)\n\nAssertion failure in [`lib/Sema/ConstraintSystem.cpp (line 132)`](https://github.com/apple/swift/blob/01510ec93d4f8cf2664cd4576139e78a2c75b879/lib/Sema/ConstraintSystem.cpp#L132):\n\n```\nAssertion `!type->hasError() && \"Should not be assigning a type involving ErrorType!\"' failed.\n\nWhen executing: void swift::constraints::ConstraintSystem::assignFixedType(swift::TypeVariableType *, swift::Type, bool)\n```\n\nAssertion context:\n\n```c++\n}\n\nvoid ConstraintSystem::assignFixedType(TypeVariableType *typeVar, Type type,\n                                       bool updateState) {\n  assert(!type->hasError() &&\n         \"Should not be assigning a type involving ErrorType!\");\n\n  typeVar->getImpl().assignFixedType(type, getSavedBindings());\n\n  if (!updateState)\n    return;\n```\nStack trace:\n\n```\n0 0x0000000003ae8f28 llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/path/to/swift/bin/swift+0x3ae8f28)\n1 0x0000000003ae9666 SignalHandler(int) (/path/to/swift/bin/swift+0x3ae9666)\n2 0x00007f17747a4390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\n3 0x00007f1772cc9428 gsignal /build/glibc-bfm8X4/glibc-2.23/signal/../sysdeps/unix/sysv/linux/raise.c:54:0\n4 0x00007f1772ccb02a abort /build/glibc-bfm8X4/glibc-2.23/stdlib/abort.c:91:0\n5 0x00007f1772cc1bd7 __assert_fail_base /build/glibc-bfm8X4/glibc-2.23/assert/assert.c:92:0\n6 0x00007f1772cc1c82 (/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\n7 0x00000000011a712e (/path/to/swift/bin/swift+0x11a712e)\n8 0x00000000011712ae swift::constraints::ConstraintSystem::matchTypes(swift::Type, swift::Type, swift::constraints::ConstraintKind, swift::OptionSet<swift::constraints::ConstraintSystem::TypeMatchFlags, unsigned int>, swift::constraints::ConstraintLocatorBuilder) (/path/to/swift/bin/swift+0x11712ae)\n9 0x0000000001180ca8 swift::constraints::ConstraintSystem::addConstraintImpl(swift::constraints::ConstraintKind, swift::Type, swift::Type, swift::constraints::ConstraintLocatorBuilder, bool) (/path/to/swift/bin/swift+0x1180ca8)\n10 0x00000000011778ad swift::constraints::ConstraintSystem::addConstraint(swift::constraints::ConstraintKind, swift::Type, swift::Type, swift::constraints::ConstraintLocatorBuilder, bool) (/path/to/swift/bin/swift+0x11778ad)\n11 0x00000000011a8e77 swift::constraints::ConstraintSystem::openGeneric(swift::DeclContext*, swift::DeclContext*, swift::GenericSignature*, bool, swift::constraints::ConstraintLocatorBuilder, llvm::DenseMap<swift::GenericTypeParamType*, swift::TypeVariableType*, llvm::DenseMapInfo<swift::GenericTypeParamType*>, llvm::detail::DenseMapPair<swift::GenericTypeParamType*, swift::TypeVariableType*> >&) (/path/to/swift/bin/swift+0x11a8e77)\n12 0x00000000011a81d9 swift::constraints::ConstraintSystem::openUnboundGenericType(swift::UnboundGenericType*, swift::constraints::ConstraintLocatorBuilder, llvm::DenseMap<swift::GenericTypeParamType*, swift::TypeVariableType*, llvm::DenseMapInfo<swift::GenericTypeParamType*>, llvm::detail::DenseMapPair<swift::GenericTypeParamType*, swift::TypeVariableType*> >&) (/path/to/swift/bin/swift+0x11a81d9)\n13 0x00000000011aee80 swift::Type llvm::function_ref<swift::Type (swift::Type)>::callback_fn<swift::constraints::ConstraintSystem::openUnboundGenericType(swift::Type, swift::constraints::ConstraintLocatorBuilder)::$_1>(long, swift::Type) (/path/to/swift/bin/swift+0x11aee80)\n14 0x000000000160bbd6 llvm::Optional<swift::Type> llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>::callback_fn<swift::Type::transform(llvm::function_ref<swift::Type (swift::Type)>) const::$_13>(long, swift::TypeBase*) (/path/to/swift/bin/swift+0x160bbd6)\n15 0x0000000001605156 swift::Type::transformRec(llvm::function_ref<llvm::Optional<swift::Type> (swift::TypeBase*)>) const (/path/to/swift/bin/swift+0x1605156)\n16 0x00000000015fc6c7 swift::Type::transform(llvm::function_ref<swift::Type (swift::Type)>) const (/path/to/swift/bin/swift+0x15fc6c7)\n17 0x00000000011a8988 swift::constraints::ConstraintSystem::openUnboundGenericType(swift::Type, swift::constraints::ConstraintLocatorBuilder) (/path/to/swift/bin/swift+0x11a8988)\n18 0x00000000011626cf swift::ASTVisitor<(anonymous namespace)::ConstraintGenerator, swift::Type, void, void, void, void, void>::visit(swift::Expr*) (/path/to/swift/bin/swift+0x11626cf)\n19 0x00000000011683b8 (anonymous namespace)::ConstraintWalker::walkToExprPost(swift::Expr*) (/path/to/swift/bin/swift+0x11683b8)\n20 0x0000000001551a9c (anonymous namespace)::Traversal::visitApplyExpr(swift::ApplyExpr*) (/path/to/swift/bin/swift+0x1551a9c)\n21 0x000000000154dbdb swift::Expr::walk(swift::ASTWalker&) (/path/to/swift/bin/swift+0x154dbdb)\n22 0x000000000115ed91 swift::constraints::ConstraintSystem::generateConstraints(swift::Expr*) (/path/to/swift/bin/swift+0x115ed91)\n23 0x000000000118be18 swift::constraints::ConstraintSystem::solve(swift::Expr*&, swift::Type, swift::ExprTypeCheckListener*, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::FreeTypeVariableBinding) (/path/to/swift/bin/swift+0x118be18)\n24 0x00000000011bf997 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) (/path/to/swift/bin/swift+0x11bf997)\n25 0x00000000011c3795 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) (/path/to/swift/bin/swift+0x11c3795)\n26 0x00000000011c7f31 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*, bool) (/path/to/swift/bin/swift+0x11c7f31)\n27 0x00000000011c81a6 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int, bool) (/path/to/swift/bin/swift+0x11c81a6)\n28 0x00000000011e0a18 validatePatternBindingEntries(swift::TypeChecker&, swift::PatternBindingDecl*) (/path/to/swift/bin/swift+0x11e0a18)\n29 0x00000000011dac9d (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac9d)\n30 0x00000000011ec4ab (anonymous namespace)::DeclChecker::visitClassDecl(swift::ClassDecl*) (/path/to/swift/bin/swift+0x11ec4ab)\n31 0x00000000011dad4e (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dad4e)\n32 0x00000000011ebd3b (anonymous namespace)::DeclChecker::visitExtensionDecl(swift::ExtensionDecl*) (/path/to/swift/bin/swift+0x11ebd3b)\n33 0x00000000011dac84 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac84)\n34 0x00000000011ed69b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed69b)\n35 0x00000000011dac54 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac54)\n36 0x00000000011ed69b (anonymous namespace)::DeclChecker::visitProtocolDecl(swift::ProtocolDecl*) (/path/to/swift/bin/swift+0x11ed69b)\n37 0x00000000011dac54 (anonymous namespace)::DeclChecker::visit(swift::Decl*) (/path/to/swift/bin/swift+0x11dac54)\n38 0x00000000011dab53 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) (/path/to/swift/bin/swift+0x11dab53)\n39 0x00000000012687e4 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int, unsigned int, unsigned int, unsigned int) (/path/to/swift/bin/swift+0x12687e4)\n40 0x0000000000fb59e7 swift::CompilerInstance::performSema() (/path/to/swift/bin/swift+0xfb59e7)\n41 0x00000000004ad9f8 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) (/path/to/swift/bin/swift+0x4ad9f8)\n42 0x00000000004abfa1 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/path/to/swift/bin/swift+0x4abfa1)\n43 0x00000000004655d4 main (/path/to/swift/bin/swift+0x4655d4)\n44 0x00007f1772cb4830 __libc_start_main /build/glibc-bfm8X4/glibc-2.23/csu/../csu/libc-start.c:325:0\n45 0x0000000000462ea9 _start (/path/to/swift/bin/swift+0x462ea9)\n```",
      "score": 1.8031561
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11134",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11134/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11134/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11134/events",
      "html_url": "https://github.com/apple/swift/pull/11134",
      "id": 245142898,
      "number": 11134,
      "title": "SIL: Replace TransitivelyUnreachableBlocks with DeadEndBlocks",
      "user": {
        "login": "eeckstein",
        "id": 15270291,
        "avatar_url": "https://avatars0.githubusercontent.com/u/15270291?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eeckstein",
        "html_url": "https://github.com/eeckstein",
        "followers_url": "https://api.github.com/users/eeckstein/followers",
        "following_url": "https://api.github.com/users/eeckstein/following{/other_user}",
        "gists_url": "https://api.github.com/users/eeckstein/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eeckstein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eeckstein/subscriptions",
        "organizations_url": "https://api.github.com/users/eeckstein/orgs",
        "repos_url": "https://api.github.com/users/eeckstein/repos",
        "events_url": "https://api.github.com/users/eeckstein/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eeckstein/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-24T16:52:50Z",
      "updated_at": "2017-07-24T19:45:08Z",
      "closed_at": "2017-07-24T19:44:37Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11134",
        "html_url": "https://github.com/apple/swift/pull/11134",
        "diff_url": "https://github.com/apple/swift/pull/11134.diff",
        "patch_url": "https://github.com/apple/swift/pull/11134.patch"
      },
      "body": "We had both utilities doing the same thing.\r\nNFC\r\n",
      "score": 1.8057786
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11136",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11136/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11136/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11136/events",
      "html_url": "https://github.com/apple/swift/pull/11136",
      "id": 245159450,
      "number": 11136,
      "title": "[4.0] TBD including all files from a full build.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-07-24T17:55:17Z",
      "updated_at": "2017-07-26T16:50:51Z",
      "closed_at": "2017-07-26T16:50:51Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11136",
        "html_url": "https://github.com/apple/swift/pull/11136",
        "diff_url": "https://github.com/apple/swift/pull/11136.diff",
        "patch_url": "https://github.com/apple/swift/pull/11136.patch"
      },
      "body": "https://github.com/apple/swift/pull/10861 , https://github.com/apple/swift/pull/10724 , and https://github.com/apple/swift/pull/11142 .\r\n\r\n**Explanation**: TBDGen now includes all the exported symbols encountered while building the standard library and test suite.\r\n**Scope**: Future users of TBD files, as there's no functionality change outside of it.\r\nRadar: rdar://problem/32252869 and its subtasks.\r\n**Risk**: Low: the only changes outside of TBDGen are tightening the linkage of some symbols, which people shouldn't be relying on.\r\n**Testing**: CI and local testing with TBD validation turned on by default (which this PR doesn't include, as that could break user's build).\r\n",
      "score": 1.821006
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11137",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11137/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11137/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11137/events",
      "html_url": "https://github.com/apple/swift/pull/11137",
      "id": 245162513,
      "number": 11137,
      "title": "RangeInfo: Remove unused fields in range resolver. NFC",
      "user": {
        "login": "nkcsgexi",
        "id": 2191945,
        "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nkcsgexi",
        "html_url": "https://github.com/nkcsgexi",
        "followers_url": "https://api.github.com/users/nkcsgexi/followers",
        "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
        "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
        "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
        "repos_url": "https://api.github.com/users/nkcsgexi/repos",
        "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T18:06:28Z",
      "updated_at": "2017-07-24T18:31:57Z",
      "closed_at": "2017-07-24T18:31:54Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11137",
        "html_url": "https://github.com/apple/swift/pull/11137",
        "diff_url": "https://github.com/apple/swift/pull/11137.diff",
        "patch_url": "https://github.com/apple/swift/pull/11137.patch"
      },
      "body": "",
      "score": 1.806125
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11138",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11138/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11138/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11138/events",
      "html_url": "https://github.com/apple/swift/pull/11138",
      "id": 245197501,
      "number": 11138,
      "title": "NSNumber custom AnyHashable fix",
      "user": {
        "login": "itaiferber",
        "id": 33716,
        "avatar_url": "https://avatars3.githubusercontent.com/u/33716?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itaiferber",
        "html_url": "https://github.com/itaiferber",
        "followers_url": "https://api.github.com/users/itaiferber/followers",
        "following_url": "https://api.github.com/users/itaiferber/following{/other_user}",
        "gists_url": "https://api.github.com/users/itaiferber/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itaiferber/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itaiferber/subscriptions",
        "organizations_url": "https://api.github.com/users/itaiferber/orgs",
        "repos_url": "https://api.github.com/users/itaiferber/repos",
        "events_url": "https://api.github.com/users/itaiferber/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itaiferber/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2017-07-24T20:21:29Z",
      "updated_at": "2017-07-24T23:39:31Z",
      "closed_at": "2017-07-24T23:03:27Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11138",
        "html_url": "https://github.com/apple/swift/pull/11138",
        "diff_url": "https://github.com/apple/swift/pull/11138.diff",
        "patch_url": "https://github.com/apple/swift/pull/11138.patch"
      },
      "body": "**What's in this pull request?**\r\nResolves rdar://problem/33105735.\r\n\r\nWhen we give `NSNumber` a custom `AnyHashable` representation, we want to give it as large a box as possible. When we want to compare it against other `AnyHashable` boxes such as `Int` or `UInt`, it's always possible to upcast the `Int`/`UInt` to a larger integer size like `Int64` or `UInt64` for the comparison. By eliminating the smaller boxes we create, we can maintain the existing behavior that `_SwiftTypePreservingNSNumber` gave us.",
      "score": 1.8091235
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11139",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11139/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11139/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11139/events",
      "html_url": "https://github.com/apple/swift/pull/11139",
      "id": 245198312,
      "number": 11139,
      "title": "[test] Re-disable objc_nonnull_lie_hack.swift.",
      "user": {
        "login": "jrose-apple",
        "id": 15097531,
        "avatar_url": "https://avatars2.githubusercontent.com/u/15097531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrose-apple",
        "html_url": "https://github.com/jrose-apple",
        "followers_url": "https://api.github.com/users/jrose-apple/followers",
        "following_url": "https://api.github.com/users/jrose-apple/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrose-apple/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrose-apple/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrose-apple/subscriptions",
        "organizations_url": "https://api.github.com/users/jrose-apple/orgs",
        "repos_url": "https://api.github.com/users/jrose-apple/repos",
        "events_url": "https://api.github.com/users/jrose-apple/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrose-apple/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-07-24T20:24:44Z",
      "updated_at": "2017-07-24T21:38:53Z",
      "closed_at": "2017-07-24T21:14:59Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11139",
        "html_url": "https://github.com/apple/swift/pull/11139",
        "diff_url": "https://github.com/apple/swift/pull/11139.diff",
        "patch_url": "https://github.com/apple/swift/pull/11139.patch"
      },
      "body": "The CHECK lines are too restrictive under different optimization. Disable the test to unblock the buildbots. Filed rdar://problem/33495516 to pick it up again later.",
      "score": 1.8085092
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11140",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11140/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11140/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11140/events",
      "html_url": "https://github.com/apple/swift/pull/11140",
      "id": 245202947,
      "number": 11140,
      "title": "SILOptimizer: include used header",
      "user": {
        "login": "compnerd",
        "id": 63311,
        "avatar_url": "https://avatars3.githubusercontent.com/u/63311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/compnerd",
        "html_url": "https://github.com/compnerd",
        "followers_url": "https://api.github.com/users/compnerd/followers",
        "following_url": "https://api.github.com/users/compnerd/following{/other_user}",
        "gists_url": "https://api.github.com/users/compnerd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/compnerd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/compnerd/subscriptions",
        "organizations_url": "https://api.github.com/users/compnerd/orgs",
        "repos_url": "https://api.github.com/users/compnerd/repos",
        "events_url": "https://api.github.com/users/compnerd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/compnerd/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T20:42:19Z",
      "updated_at": "2017-07-24T22:14:17Z",
      "closed_at": "2017-07-24T22:14:17Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11140",
        "html_url": "https://github.com/apple/swift/pull/11140",
        "diff_url": "https://github.com/apple/swift/pull/11140.diff",
        "patch_url": "https://github.com/apple/swift/pull/11140.patch"
      },
      "body": "Include headers that are used in the file.\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves [SR-NNNN](https://bugs.swift.org/browse/SR-NNNN).\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
      "score": 1.8088752
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11141",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11141/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11141/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11141/events",
      "html_url": "https://github.com/apple/swift/pull/11141",
      "id": 245208623,
      "number": 11141,
      "title": "[swift-4.0-branch][stdlib] Remove DoubleWidth<T>",
      "user": {
        "login": "moiseev",
        "id": 64011,
        "avatar_url": "https://avatars3.githubusercontent.com/u/64011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/moiseev",
        "html_url": "https://github.com/moiseev",
        "followers_url": "https://api.github.com/users/moiseev/followers",
        "following_url": "https://api.github.com/users/moiseev/following{/other_user}",
        "gists_url": "https://api.github.com/users/moiseev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/moiseev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/moiseev/subscriptions",
        "organizations_url": "https://api.github.com/users/moiseev/orgs",
        "repos_url": "https://api.github.com/users/moiseev/repos",
        "events_url": "https://api.github.com/users/moiseev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/moiseev/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2017-07-24T21:03:41Z",
      "updated_at": "2017-07-24T23:37:24Z",
      "closed_at": "2017-07-24T22:58:30Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11141",
        "html_url": "https://github.com/apple/swift/pull/11141",
        "diff_url": "https://github.com/apple/swift/pull/11141.diff",
        "patch_url": "https://github.com/apple/swift/pull/11141.patch"
      },
      "body": "* Explanation: DoubleWith<T> type is partially implemented in the Integers.swift.gyb. The complete implementation has been merged into master in this PR: https://github.com/apple/swift/pull/9367\nIt, however, increased the size of the stdlib binary produced, which is unlikely to be addressed in the time left until the release.\n* Scope of Issue: Removing the unused and, in fact, unusable code.\n* Risk: Minimal\n* Reviewed By: Ben Cohen\n* Testing: Automated test suite\n* Directions for QA: N/A\n* Radar: <rdar://problem/33493257>",
      "score": 1.8093262
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11142",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11142/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11142/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11142/events",
      "html_url": "https://github.com/apple/swift/pull/11142",
      "id": 245209227,
      "number": 11142,
      "title": "[SILGen] MaterializeForSet closures should never be serialized and private.",
      "user": {
        "login": "huonw",
        "id": 1203825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huonw",
        "html_url": "https://github.com/huonw",
        "followers_url": "https://api.github.com/users/huonw/followers",
        "following_url": "https://api.github.com/users/huonw/following{/other_user}",
        "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
        "organizations_url": "https://api.github.com/users/huonw/orgs",
        "repos_url": "https://api.github.com/users/huonw/repos",
        "events_url": "https://api.github.com/users/huonw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huonw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-24T21:06:10Z",
      "updated_at": "2017-07-24T21:53:27Z",
      "closed_at": "2017-07-24T21:50:58Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11142",
        "html_url": "https://github.com/apple/swift/pull/11142",
        "diff_url": "https://github.com/apple/swift/pull/11142.diff",
        "patch_url": "https://github.com/apple/swift/pull/11142.patch"
      },
      "body": "If the closure is serialized, it needs to be shared.",
      "score": 1.808989
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11143",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11143/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11143/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11143/events",
      "html_url": "https://github.com/apple/swift/pull/11143",
      "id": 245215424,
      "number": 11143,
      "title": "[SourceKit] Add typealias to doc structure - SR-4828",
      "user": {
        "login": "johnfairh",
        "id": 26768470,
        "avatar_url": "https://avatars1.githubusercontent.com/u/26768470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/johnfairh",
        "html_url": "https://github.com/johnfairh",
        "followers_url": "https://api.github.com/users/johnfairh/followers",
        "following_url": "https://api.github.com/users/johnfairh/following{/other_user}",
        "gists_url": "https://api.github.com/users/johnfairh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/johnfairh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/johnfairh/subscriptions",
        "organizations_url": "https://api.github.com/users/johnfairh/orgs",
        "repos_url": "https://api.github.com/users/johnfairh/repos",
        "events_url": "https://api.github.com/users/johnfairh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/johnfairh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-07-24T21:31:55Z",
      "updated_at": "2017-07-27T08:48:41Z",
      "closed_at": "2017-07-26T16:59:07Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11143",
        "html_url": "https://github.com/apple/swift/pull/11143",
        "diff_url": "https://github.com/apple/swift/pull/11143.diff",
        "patch_url": "https://github.com/apple/swift/pull/11143.patch"
      },
      "body": "This adds `typealias` declarations to the SourceKit document structure as included in the response from source.request.editor.open.{ interface/ interface.header/ interface.swiftsource/ interface.swifttype} and editor.replacetext.  Update tests.\r\n\r\nResolves [SR-4828](https://bugs.swift.org/browse/SR-4828).\r\n\r\nOne reason why it’s important for SourceKit clients to have all declarations included in doc structure is that it is the only interface that includes accessibility.  There are 3-4 decl types missing/wrong right now.\r\n\r\nThis PR is pretty tentative: I can believe there are Xcode dependencies making it impractical for community changes to this part of the code, but I thought it was worth a shot.  I built a toolchain and Xcode seems happy enough with it, not comprehensive ofc.\r\n\r\nCode note: I added the new enum case alongside the other decl enum cases rather than at the end because the enum does not look to get persisted anywhere.",
      "score": 1.8283964
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11144",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11144/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11144/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11144/events",
      "html_url": "https://github.com/apple/swift/pull/11144",
      "id": 245215582,
      "number": 11144,
      "title": "SILGen: Fix override handling when a dynamic init is also required.",
      "user": {
        "login": "jckarter",
        "id": 147281,
        "avatar_url": "https://avatars0.githubusercontent.com/u/147281?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jckarter",
        "html_url": "https://github.com/jckarter",
        "followers_url": "https://api.github.com/users/jckarter/followers",
        "following_url": "https://api.github.com/users/jckarter/following{/other_user}",
        "gists_url": "https://api.github.com/users/jckarter/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jckarter/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jckarter/subscriptions",
        "organizations_url": "https://api.github.com/users/jckarter/orgs",
        "repos_url": "https://api.github.com/users/jckarter/repos",
        "events_url": "https://api.github.com/users/jckarter/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jckarter/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-07-24T21:32:33Z",
      "updated_at": "2017-07-25T18:43:49Z",
      "closed_at": "2017-07-25T18:43:46Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11144",
        "html_url": "https://github.com/apple/swift/pull/11144",
        "diff_url": "https://github.com/apple/swift/pull/11144.diff",
        "patch_url": "https://github.com/apple/swift/pull/11144.patch"
      },
      "body": "A missed case from #11107. Fixes SR-5542 | rdar://problem/33490780.",
      "score": 1.8159904
    },
    {
      "url": "https://api.github.com/repos/apple/swift/issues/11145",
      "repository_url": "https://api.github.com/repos/apple/swift",
      "labels_url": "https://api.github.com/repos/apple/swift/issues/11145/labels{/name}",
      "comments_url": "https://api.github.com/repos/apple/swift/issues/11145/comments",
      "events_url": "https://api.github.com/repos/apple/swift/issues/11145/events",
      "html_url": "https://github.com/apple/swift/pull/11145",
      "id": 245215831,
      "number": 11145,
      "title": "Shared parameters do not need a load",
      "user": {
        "login": "CodaFi",
        "id": 1896383,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1896383?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CodaFi",
        "html_url": "https://github.com/CodaFi",
        "followers_url": "https://api.github.com/users/CodaFi/followers",
        "following_url": "https://api.github.com/users/CodaFi/following{/other_user}",
        "gists_url": "https://api.github.com/users/CodaFi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/CodaFi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/CodaFi/subscriptions",
        "organizations_url": "https://api.github.com/users/CodaFi/orgs",
        "repos_url": "https://api.github.com/users/CodaFi/repos",
        "events_url": "https://api.github.com/users/CodaFi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/CodaFi/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-24T21:33:39Z",
      "updated_at": "2017-07-24T23:07:10Z",
      "closed_at": "2017-07-24T23:07:08Z",
      "pull_request": {
        "url": "https://api.github.com/repos/apple/swift/pulls/11145",
        "html_url": "https://github.com/apple/swift/pull/11145",
        "diff_url": "https://github.com/apple/swift/pull/11145.diff",
        "patch_url": "https://github.com/apple/swift/pull/11145.patch"
      },
      "body": "A quick patch up of a downstream callee of `doesStorageProduceLValue` so we don't emit `LoadExpr`s for declrefs of `__shared` parameters.",
      "score": 1.8096726
    }
  ]
}

